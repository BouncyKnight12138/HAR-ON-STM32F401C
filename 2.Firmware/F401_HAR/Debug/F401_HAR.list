
F401_HAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000317cc  080097c0  080097c0  000197c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803af8c  0803af8c  00050b20  2**0
                  CONTENTS
  4 .ARM          00000008  0803af8c  0803af8c  0004af8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803af94  0803af94  00050b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803af94  0803af94  0004af94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803af98  0803af98  0004af98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b20  20000000  0803af9c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a74  20000b20  0803babc  00050b20  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20007594  0803babc  00057594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050b20  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a578  00000000  00000000  00050b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003922  00000000  00000000  0006b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0006e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0006f770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b10b  00000000  00000000  00070a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7c4  00000000  00000000  0008bb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d7bd  00000000  00000000  000a832f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  00145aec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e44  00000000  00000000  00145bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000fbbd  00000000  00000000  001499fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001595bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00159688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000b20 	.word	0x20000b20
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009790 	.word	0x08009790

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000b24 	.word	0x20000b24
 80001dc:	08009790 	.word	0x08009790

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_CRC_Init+0x18>)
{
 8000ebe:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <MX_CRC_Init+0x1c>)
 8000ec2:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ec4:	f000 fbda 	bl	800167c <HAL_CRC_Init>
 8000ec8:	b118      	cbz	r0, 8000ed2 <MX_CRC_Init+0x16>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000ece:	f000 b9f3 	b.w	80012b8 <Error_Handler>
}
 8000ed2:	bd08      	pop	{r3, pc}
 8000ed4:	20000b3c 	.word	0x20000b3c
 8000ed8:	40023000 	.word	0x40023000

08000edc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000edc:	6802      	ldr	r2, [r0, #0]
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_CRC_MspInit+0x28>)
 8000ee0:	429a      	cmp	r2, r3
{
 8000ee2:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000ee4:	d10b      	bne.n	8000efe <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_CRC_MspInit+0x2c>)
 8000eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000efe:	b002      	add	sp, #8
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023000 	.word	0x40023000
 8000f08:	40023800 	.word	0x40023800

08000f0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f0c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	2214      	movs	r2, #20
{
 8000f10:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	eb0d 0002 	add.w	r0, sp, r2
 8000f16:	2100      	movs	r1, #0
 8000f18:	f005 fbd8 	bl	80066cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_GPIO_Init+0x9c>)
 8000f20:	9401      	str	r4, [sp, #4]
 8000f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f24:	4d21      	ldr	r5, [pc, #132]	; (8000fac <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f2e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f32:	9201      	str	r2, [sp, #4]
 8000f34:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	9402      	str	r4, [sp, #8]
 8000f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f42:	f002 0201 	and.w	r2, r2, #1
 8000f46:	9202      	str	r2, [sp, #8]
 8000f48:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	9403      	str	r4, [sp, #12]
 8000f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f4e:	f042 0208 	orr.w	r2, r2, #8
 8000f52:	631a      	str	r2, [r3, #48]	; 0x30
 8000f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f56:	f002 0208 	and.w	r2, r2, #8
 8000f5a:	9203      	str	r2, [sp, #12]
 8000f5c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	9404      	str	r4, [sp, #16]
 8000f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f62:	f042 0202 	orr.w	r2, r2, #2
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f6e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f72:	4628      	mov	r0, r5
 8000f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000f7a:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f7c:	f000 fc56 	bl	800182c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000f80:	a905      	add	r1, sp, #20
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <MX_GPIO_Init+0xa4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	e9cd 6405 	strd	r6, r4, [sp, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f000 fb87 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f92:	a905      	add	r1, sp, #20
 8000f94:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f000 fb7d 	bl	800169c <HAL_GPIO_Init>

}
 8000fa2:	b00a      	add	sp, #40	; 0x28
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fb4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb6:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 400000;
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <MX_I2C1_Init+0x34>)
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_I2C1_Init+0x38>)
 8000fbc:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc0:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8000fc6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fca:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fce:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd4:	f000 fe0c 	bl	8001bf0 <HAL_I2C_Init>
 8000fd8:	b118      	cbz	r0, 8000fe2 <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000fde:	f000 b96b 	b.w	80012b8 <Error_Handler>
}
 8000fe2:	bd08      	pop	{r3, pc}
 8000fe4:	20000b44 	.word	0x20000b44
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	00061a80 	.word	0x00061a80

08000ff0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff0:	b530      	push	{r4, r5, lr}
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	a803      	add	r0, sp, #12
 8000ffc:	f005 fb66 	bl	80066cc <memset>
  if(i2cHandle->Instance==I2C1)
 8001000:	6822      	ldr	r2, [r4, #0]
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_I2C_MspInit+0x64>)
 8001004:	429a      	cmp	r2, r3
 8001006:	d122      	bne.n	800104e <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4c13      	ldr	r4, [pc, #76]	; (8001058 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	4814      	ldr	r0, [pc, #80]	; (800105c <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	2500      	movs	r5, #0
 800100e:	9501      	str	r5, [sp, #4]
 8001010:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	6323      	str	r3, [r4, #48]	; 0x30
 8001018:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001022:	f44f 7210 	mov.w	r2, #576	; 0x240
 8001026:	2312      	movs	r3, #18
 8001028:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102c:	2103      	movs	r1, #3
 800102e:	2304      	movs	r3, #4
 8001030:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	a903      	add	r1, sp, #12
 8001036:	f000 fb31 	bl	800169c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103a:	9502      	str	r5, [sp, #8]
 800103c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800103e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001042:	6423      	str	r3, [r4, #64]	; 0x40
 8001044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800104e:	b009      	add	sp, #36	; 0x24
 8001050:	bd30      	pop	{r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	40005400 	.word	0x40005400
 8001058:	40023800 	.word	0x40023800
 800105c:	40020400 	.word	0x40020400

08001060 <COMPASSACCELERO_IO_Write>:

}


void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8001060:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&LSM303DLHC_I2C_HANDLE, DeviceAddr, RegisterAddr, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100);
 8001062:	2301      	movs	r3, #1
{
 8001064:	f88d 2017 	strb.w	r2, [sp, #23]
	HAL_I2C_Mem_Write(&LSM303DLHC_I2C_HANDLE, DeviceAddr, RegisterAddr, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100);
 8001068:	2264      	movs	r2, #100	; 0x64
 800106a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800106e:	f10d 0217 	add.w	r2, sp, #23
 8001072:	9200      	str	r2, [sp, #0]
 8001074:	460a      	mov	r2, r1
 8001076:	4601      	mov	r1, r0
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <COMPASSACCELERO_IO_Write+0x24>)
 800107a:	f000 fe61 	bl	8001d40 <HAL_I2C_Mem_Write>

}
 800107e:	b007      	add	sp, #28
 8001080:	f85d fb04 	ldr.w	pc, [sp], #4
 8001084:	20000b44 	.word	0x20000b44

08001088 <COMPASSACCELERO_IO_ReadLen>:
    return ret;

}

uint8_t COMPASSACCELERO_IO_ReadLen(uint8_t dev_addr,uint8_t reg,uint8_t *buf,uint16_t cnt)
{
 8001088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(&LSM303DLHC_I2C_HANDLE, dev_addr, reg, I2C_MEMADD_SIZE_8BIT, buf, cnt, 100);
 800108a:	2464      	movs	r4, #100	; 0x64
 800108c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001090:	9200      	str	r2, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	460a      	mov	r2, r1
 8001096:	4601      	mov	r1, r0
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <COMPASSACCELERO_IO_ReadLen+0x1c>)
 800109a:	f000 fee1 	bl	8001e60 <HAL_I2C_Mem_Read>


	return 0;
}
 800109e:	2000      	movs	r0, #0
 80010a0:	b004      	add	sp, #16
 80010a2:	bd10      	pop	{r4, pc}
 80010a4:	20000b44 	.word	0x20000b44

080010a8 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(void)
{  
 80010a8:	b508      	push	{r3, lr}
  /* Write value to ACC MEMS CTRL_REG1 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, LSM303DLHC_ODR_25_HZ|LSM303DLHC_AXES_ENABLE);
 80010aa:	2237      	movs	r2, #55	; 0x37
 80010ac:	2120      	movs	r1, #32
 80010ae:	2032      	movs	r0, #50	; 0x32
 80010b0:	f7ff ffd6 	bl	8001060 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, LSM303DLHC_FULLSCALE_4G);
}
 80010b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, LSM303DLHC_FULLSCALE_4G);
 80010b8:	2210      	movs	r2, #16
 80010ba:	2123      	movs	r1, #35	; 0x23
 80010bc:	2032      	movs	r0, #50	; 0x32
 80010be:	f7ff bfcf 	b.w	8001060 <COMPASSACCELERO_IO_Write>
	...

080010c4 <LSM303DLHC_AccReadXYZ>:
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
}


void LSM303DLHC_AccReadXYZ(float* pData)
{
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	b087      	sub	sp, #28
  uint8_t buffer[6]={0}, ctrlx[2],i;
 80010c8:	2300      	movs	r3, #0
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	f8ad 300c 	strh.w	r3, [sp, #12]
  float sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;

  int16_t cen;
  /* Read the acceleration control register content */

  COMPASSACCELERO_IO_ReadLen(ACC_I2C_ADDRESS,LSM303DLHC_CTRL_REG4_A|0x80,ctrlx,2);
 80010d0:	aa01      	add	r2, sp, #4
 80010d2:	2302      	movs	r3, #2
 80010d4:	21a3      	movs	r1, #163	; 0xa3
{
 80010d6:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_ReadLen(ACC_I2C_ADDRESS,LSM303DLHC_CTRL_REG4_A|0x80,ctrlx,2);
 80010d8:	2032      	movs	r0, #50	; 0x32
 80010da:	f7ff ffd5 	bl	8001088 <COMPASSACCELERO_IO_ReadLen>

  /* Read output register X, Y & Z acceleration */
  COMPASSACCELERO_IO_ReadLen(ACC_I2C_ADDRESS,LSM303DLHC_OUT_X_L_A|0x80,buffer,6);
 80010de:	2306      	movs	r3, #6
 80010e0:	aa02      	add	r2, sp, #8
 80010e2:	21a8      	movs	r1, #168	; 0xa8
 80010e4:	2032      	movs	r0, #50	; 0x32
 80010e6:	f7ff ffcf 	bl	8001088 <COMPASSACCELERO_IO_ReadLen>



  if(ctrlx[1]&0x40)
 80010ea:	f89d c005 	ldrb.w	ip, [sp, #5]
      cDivider=64;
    else
      cDivider=16;

  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & 0x40) || (ctrlx[1] & 0x40)) /* Little Endian Mode or FIFO mode */
 80010ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80010f2:	f89d e009 	ldrb.w	lr, [sp, #9]
 80010f6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80010fa:	f89d 700b 	ldrb.w	r7, [sp, #11]
 80010fe:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001102:	f89d 600d 	ldrb.w	r6, [sp, #13]
 8001106:	f89d 300c 	ldrb.w	r3, [sp, #12]
      cDivider=16;
 800110a:	f01c 0c40 	ands.w	ip, ip, #64	; 0x40
 800110e:	bf14      	ite	ne
 8001110:	2540      	movne	r5, #64	; 0x40
 8001112:	2510      	moveq	r5, #16
  if(!(ctrlx[0] & 0x40) || (ctrlx[1] & 0x40)) /* Little Endian Mode or FIFO mode */
 8001114:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001118:	d002      	beq.n	8001120 <LSM303DLHC_AccReadXYZ+0x5c>
 800111a:	f1bc 0f00 	cmp.w	ip, #0
 800111e:	d03a      	beq.n	8001196 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
    {
 		cen=(int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i];
 8001120:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8001124:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 8001128:	eb03 2306 	add.w	r3, r3, r6, lsl #8
      pnRawData[i]=(int16_t)(cen)/cDivider;
 800112c:	b209      	sxth	r1, r1
 800112e:	b212      	sxth	r2, r2
 8001130:	b21b      	sxth	r3, r3
 8001132:	fb91 f1f5 	sdiv	r1, r1, r5
 8001136:	fb92 f2f5 	sdiv	r2, r2, r5
 800113a:	fb93 f3f5 	sdiv	r3, r3, r5
 800113e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8001142:	f8ad 2012 	strh.w	r2, [sp, #18]
 8001146:	f8ad 3014 	strh.w	r3, [sp, #20]
  {
    for(i=0; i<3; i++)
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1])/cDivider;
  }

  if(ctrlx[1]&0x40)
 800114a:	f1bc 0f00 	cmp.w	ip, #0
 800114e:	d138      	bne.n	80011c2 <LSM303DLHC_AccReadXYZ+0xfe>
    }
    else
    {
    	/* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
       switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001150:	f000 0030 	and.w	r0, r0, #48	; 0x30
 8001154:	2820      	cmp	r0, #32
 8001156:	d037      	beq.n	80011c8 <LSM303DLHC_AccReadXYZ+0x104>
 8001158:	2830      	cmp	r0, #48	; 0x30
 800115a:	d038      	beq.n	80011ce <LSM303DLHC_AccReadXYZ+0x10a>
 800115c:	2810      	cmp	r0, #16
 800115e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001162:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001166:	bf08      	it	eq
 8001168:	eef0 7a47 	vmoveq.f32	s15, s14
    }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(float)pnRawData[i]*sensitivity/100.0f;
 800116c:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80011d4 <LSM303DLHC_AccReadXYZ+0x110>
 8001170:	ab04      	add	r3, sp, #16
 8001172:	f104 020c 	add.w	r2, r4, #12
 8001176:	f933 1b02 	ldrsh.w	r1, [r3], #2
 800117a:	ee07 1a10 	vmov	s14, r1
 800117e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001186:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800118a:	ece4 6a01 	vstmia	r4!, {s13}
  for(i=0; i<3; i++)
 800118e:	42a2      	cmp	r2, r4
 8001190:	d1f1      	bne.n	8001176 <LSM303DLHC_AccReadXYZ+0xb2>
  }
}
 8001192:	b007      	add	sp, #28
 8001194:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1])/cDivider;
 8001196:	0209      	lsls	r1, r1, #8
 8001198:	0212      	lsls	r2, r2, #8
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	fa0e f181 	sxtah	r1, lr, r1
 80011a0:	fa07 f282 	sxtah	r2, r7, r2
 80011a4:	fa06 f383 	sxtah	r3, r6, r3
 80011a8:	fb91 f1f5 	sdiv	r1, r1, r5
 80011ac:	fb92 f2f5 	sdiv	r2, r2, r5
 80011b0:	fb93 f3f5 	sdiv	r3, r3, r5
 80011b4:	f8ad 1010 	strh.w	r1, [sp, #16]
 80011b8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80011bc:	f8ad 3014 	strh.w	r3, [sp, #20]
    for(i=0; i<3; i++)
 80011c0:	e7c6      	b.n	8001150 <LSM303DLHC_AccReadXYZ+0x8c>
      sensitivity = 0.25;
 80011c2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80011c6:	e7d1      	b.n	800116c <LSM303DLHC_AccReadXYZ+0xa8>
         sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80011c8:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80011cc:	e7ce      	b.n	800116c <LSM303DLHC_AccReadXYZ+0xa8>
         sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80011ce:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 80011d2:	e7cb      	b.n	800116c <LSM303DLHC_AccReadXYZ+0xa8>
 80011d4:	42c80000 	.word	0x42c80000

080011d8 <LSM303DLHC_Init>:



void LSM303DLHC_Init(void)
{
	LSM303DLHC_AccInit();
 80011d8:	f7ff bf66 	b.w	80010a8 <LSM303DLHC_AccInit>

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b510      	push	{r4, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e0:	2210      	movs	r2, #16
 80011e2:	2100      	movs	r1, #0
 80011e4:	a80a      	add	r0, sp, #40	; 0x28
 80011e6:	f005 fa71 	bl	80066cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ea:	2214      	movs	r2, #20
 80011ec:	2100      	movs	r1, #0
 80011ee:	a803      	add	r0, sp, #12
 80011f0:	f005 fa6c 	bl	80066cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <SystemClock_Config+0x9c>)
 80011f6:	2100      	movs	r1, #0
 80011f8:	9101      	str	r1, [sp, #4]
 80011fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800120e:	9102      	str	r1, [sp, #8]
 8001210:	6813      	ldr	r3, [r2, #0]
 8001212:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	6813      	ldr	r3, [r2, #0]
 800121e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001222:	9302      	str	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001224:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001226:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800122c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001230:	2402      	movs	r4, #2
 8001232:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001236:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 800123a:	22a8      	movs	r2, #168	; 0xa8
 800123c:	2304      	movs	r3, #4
 800123e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001242:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001244:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001246:	2307      	movs	r3, #7
 8001248:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f000 ff11 	bl	8002070 <HAL_RCC_OscConfig>
 800124e:	b108      	cbz	r0, 8001254 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001252:	e7fe      	b.n	8001252 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001254:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125e:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001264:	4621      	mov	r1, r4
 8001266:	a803      	add	r0, sp, #12
 8001268:	f001 f8e0 	bl	800242c <HAL_RCC_ClockConfig>
 800126c:	b108      	cbz	r0, 8001272 <SystemClock_Config+0x96>
 800126e:	b672      	cpsid	i
  while (1)
 8001270:	e7fe      	b.n	8001270 <SystemClock_Config+0x94>
}
 8001272:	b014      	add	sp, #80	; 0x50
 8001274:	bd10      	pop	{r4, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <main>:
{
 8001280:	b508      	push	{r3, lr}
  HAL_Init();
 8001282:	f000 f969 	bl	8001558 <HAL_Init>
  SystemClock_Config();
 8001286:	f7ff ffa9 	bl	80011dc <SystemClock_Config>
  MX_GPIO_Init();
 800128a:	f7ff fe3f 	bl	8000f0c <MX_GPIO_Init>
  MX_CRC_Init();
 800128e:	f7ff fe15 	bl	8000ebc <MX_CRC_Init>
  MX_USART2_UART_Init();
 8001292:	f000 f8c1 	bl	8001418 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001296:	f7ff fe8d 	bl	8000fb4 <MX_I2C1_Init>
  MX_TIM1_Init();
 800129a:	f000 f865 	bl	8001368 <MX_TIM1_Init>
  MX_X_CUBE_AI_Init();
 800129e:	f001 fdc5 	bl	8002e2c <MX_X_CUBE_AI_Init>
  LSM303DLHC_Init();
 80012a2:	f7ff ff99 	bl	80011d8 <LSM303DLHC_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <main+0x34>)
 80012a8:	f001 f97c 	bl	80025a4 <HAL_TIM_Base_Start_IT>
  MX_X_CUBE_AI_Process();
 80012ac:	f001 fdf4 	bl	8002e98 <MX_X_CUBE_AI_Process>
  while (1)
 80012b0:	e7fc      	b.n	80012ac <main+0x2c>
 80012b2:	bf00      	nop
 80012b4:	20000b9c 	.word	0x20000b9c

080012b8 <Error_Handler>:
 80012b8:	b672      	cpsid	i
  while (1)
 80012ba:	e7fe      	b.n	80012ba <Error_Handler+0x2>

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_MspInit+0x34>)
 80012c0:	2100      	movs	r1, #0
 80012c2:	9100      	str	r1, [sp, #0]
 80012c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012ca:	645a      	str	r2, [r3, #68]	; 0x44
 80012cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	9101      	str	r1, [sp, #4]
 80012d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012de:	641a      	str	r2, [r3, #64]	; 0x40
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	b002      	add	sp, #8
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler>

080012f6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler>

080012f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler>

080012fa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <BusFault_Handler>

080012fc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler>

080012fe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fe:	4770      	bx	lr

08001300 <DebugMon_Handler>:
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f000 b942 	b.w	800158c <HAL_IncTick>

08001308 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001308:	4801      	ldr	r0, [pc, #4]	; (8001310 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800130a:	f001 b981 	b.w	8002610 <HAL_TIM_IRQHandler>
 800130e:	bf00      	nop
 8001310:	20000b9c 	.word	0x20000b9c

08001314 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <_sbrk+0x30>)
 8001316:	6811      	ldr	r1, [r2, #0]
{
 8001318:	b510      	push	{r4, lr}
 800131a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800131c:	b909      	cbnz	r1, 8001322 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800131e:	490a      	ldr	r1, [pc, #40]	; (8001348 <_sbrk+0x34>)
 8001320:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	6810      	ldr	r0, [r2, #0]
 8001324:	4909      	ldr	r1, [pc, #36]	; (800134c <_sbrk+0x38>)
 8001326:	4c0a      	ldr	r4, [pc, #40]	; (8001350 <_sbrk+0x3c>)
 8001328:	4403      	add	r3, r0
 800132a:	1b09      	subs	r1, r1, r4
 800132c:	428b      	cmp	r3, r1
 800132e:	d906      	bls.n	800133e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001330:	f005 f98c 	bl	800664c <__errno>
 8001334:	230c      	movs	r3, #12
 8001336:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001338:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800133c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800133e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001340:	e7fc      	b.n	800133c <_sbrk+0x28>
 8001342:	bf00      	nop
 8001344:	20000b98 	.word	0x20000b98
 8001348:	20007598 	.word	0x20007598
 800134c:	20010000 	.word	0x20010000
 8001350:	00000800 	.word	0x00000800

08001354 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4a03      	ldr	r2, [pc, #12]	; (8001364 <SystemInit+0x10>)
 8001356:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800135a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	2210      	movs	r2, #16
 800136c:	2100      	movs	r1, #0
 800136e:	a802      	add	r0, sp, #8
 8001370:	f005 f9ac 	bl	80066cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001374:	4815      	ldr	r0, [pc, #84]	; (80013cc <MX_TIM1_Init+0x64>)
  htim1.Init.Prescaler = 8400-1;
 8001376:	4916      	ldr	r1, [pc, #88]	; (80013d0 <MX_TIM1_Init+0x68>)
 8001378:	f242 02cf 	movw	r2, #8399	; 0x20cf
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 8400-1;
 800137e:	e9c0 1200 	strd	r1, r2, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 500-1;
 8001382:	f240 12f3 	movw	r2, #499	; 0x1f3
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001386:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	6083      	str	r3, [r0, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001394:	f001 fa2c 	bl	80027f0 <HAL_TIM_Base_Init>
 8001398:	b108      	cbz	r0, 800139e <MX_TIM1_Init+0x36>
  {
    Error_Handler();
 800139a:	f7ff ff8d 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a2:	480a      	ldr	r0, [pc, #40]	; (80013cc <MX_TIM1_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a6:	a902      	add	r1, sp, #8
 80013a8:	f001 fa58 	bl	800285c <HAL_TIM_ConfigClockSource>
 80013ac:	b108      	cbz	r0, 80013b2 <MX_TIM1_Init+0x4a>
  {
    Error_Handler();
 80013ae:	f7ff ff83 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_TIM1_Init+0x64>)
 80013b6:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013bc:	f001 faea 	bl	8002994 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	b108      	cbz	r0, 80013c6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80013c2:	f7ff ff79 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013c6:	b007      	add	sp, #28
 80013c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80013cc:	20000b9c 	.word	0x20000b9c
 80013d0:	40010000 	.word	0x40010000

080013d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013d4:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM1)
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_TIM_Base_MspInit+0x40>)
 80013d8:	6802      	ldr	r2, [r0, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d116      	bne.n	800140c <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013de:	2200      	movs	r2, #0
 80013e0:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80013e4:	9201      	str	r2, [sp, #4]
 80013e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80013e8:	f041 0101 	orr.w	r1, r1, #1
 80013ec:	6459      	str	r1, [r3, #68]	; 0x44
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	9301      	str	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013f6:	4611      	mov	r1, r2
 80013f8:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013fc:	f000 f8ea 	bl	80015d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001400:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001402:	b003      	add	sp, #12
 8001404:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001408:	f000 b916 	b.w	8001638 <HAL_NVIC_EnableIRQ>
}
 800140c:	b003      	add	sp, #12
 800140e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001412:	bf00      	nop
 8001414:	40010000 	.word	0x40010000

08001418 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <MX_USART2_UART_Init+0x34>)
{
 800141c:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 800141e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001422:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001428:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001436:	f001 fb79 	bl	8002b2c <HAL_UART_Init>
 800143a:	b118      	cbz	r0, 8001444 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001440:	f7ff bf3a 	b.w	80012b8 <Error_Handler>
}
 8001444:	bd08      	pop	{r3, pc}
 8001446:	bf00      	nop
 8001448:	20000be4 	.word	0x20000be4
 800144c:	40004400 	.word	0x40004400

08001450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001450:	b510      	push	{r4, lr}
 8001452:	4604      	mov	r4, r0
 8001454:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	2214      	movs	r2, #20
 8001458:	2100      	movs	r1, #0
 800145a:	a803      	add	r0, sp, #12
 800145c:	f005 f936 	bl	80066cc <memset>
  if(uartHandle->Instance==USART2)
 8001460:	6822      	ldr	r2, [r4, #0]
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_UART_MspInit+0x64>)
 8001464:	429a      	cmp	r2, r3
 8001466:	d122      	bne.n	80014ae <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001468:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800146c:	2100      	movs	r1, #0
 800146e:	9101      	str	r1, [sp, #4]
 8001470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	4811      	ldr	r0, [pc, #68]	; (80014b8 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001474:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
 800147a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800147c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001480:	9201      	str	r2, [sp, #4]
 8001482:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	9102      	str	r1, [sp, #8]
 8001486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	220c      	movs	r2, #12
 800149a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149c:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014a2:	2307      	movs	r3, #7
 80014a4:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	a903      	add	r1, sp, #12
 80014aa:	f000 f8f7 	bl	800169c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014ae:	b008      	add	sp, #32
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	bf00      	nop
 80014b4:	40004400 	.word	0x40004400
 80014b8:	40020000 	.word	0x40020000

080014bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014c2:	490e      	ldr	r1, [pc, #56]	; (80014fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c4:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d8:	4c0b      	ldr	r4, [pc, #44]	; (8001508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e6:	f7ff ff35 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ea:	f005 f8b5 	bl	8006658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ee:	f7ff fec7 	bl	8001280 <main>
  bx  lr    
 80014f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	20000b20 	.word	0x20000b20
  ldr r2, =_sidata
 8001500:	0803af9c 	.word	0x0803af9c
  ldr r2, =_sbss
 8001504:	20000b20 	.word	0x20000b20
  ldr r4, =_ebss
 8001508:	20007594 	.word	0x20007594

0800150c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC_IRQHandler>
	...

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_InitTick+0x3c>)
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_InitTick+0x40>)
{
 8001516:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001518:	7818      	ldrb	r0, [r3, #0]
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001522:	6810      	ldr	r0, [r2, #0]
 8001524:	fbb0 f0f3 	udiv	r0, r0, r3
 8001528:	f000 f894 	bl	8001654 <HAL_SYSTICK_Config>
 800152c:	4604      	mov	r4, r0
 800152e:	b958      	cbnz	r0, 8001548 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001530:	2d0f      	cmp	r5, #15
 8001532:	d809      	bhi.n	8001548 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	4602      	mov	r2, r0
 8001536:	4629      	mov	r1, r5
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f84a 	bl	80015d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <HAL_InitTick+0x44>)
 8001542:	4620      	mov	r0, r4
 8001544:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001546:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001548:	2001      	movs	r0, #1
 800154a:	e7fc      	b.n	8001546 <HAL_InitTick+0x36>
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004
 8001554:	20000008 	.word	0x20000008

08001558 <HAL_Init>:
{
 8001558:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_Init+0x30>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001562:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800156a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001572:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f000 f81b 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	200f      	movs	r0, #15
 800157c:	f7ff ffc8 	bl	8001510 <HAL_InitTick>
  HAL_MspInit();
 8001580:	f7ff fe9c 	bl	80012bc <HAL_MspInit>
}
 8001584:	2000      	movs	r0, #0
 8001586:	bd08      	pop	{r3, pc}
 8001588:	40023c00 	.word	0x40023c00

0800158c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800158c:	4a03      	ldr	r2, [pc, #12]	; (800159c <HAL_IncTick+0x10>)
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <HAL_IncTick+0x14>)
 8001590:	6811      	ldr	r1, [r2, #0]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	440b      	add	r3, r1
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000c28 	.word	0x20000c28
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015a4:	4b01      	ldr	r3, [pc, #4]	; (80015ac <HAL_GetTick+0x8>)
 80015a6:	6818      	ldr	r0, [r3, #0]
}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000c28 	.word	0x20000c28

080015b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015b2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80015cc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d6:	b530      	push	{r4, r5, lr}
 80015d8:	68dc      	ldr	r4, [r3, #12]
 80015da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015de:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	2d04      	cmp	r5, #4
 80015e6:	bf28      	it	cs
 80015e8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f0:	bf8c      	ite	hi
 80015f2:	3c03      	subhi	r4, #3
 80015f4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f6:	fa03 f505 	lsl.w	r5, r3, r5
 80015fa:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fe:	40a3      	lsls	r3, r4
 8001600:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001606:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	bfac      	ite	ge
 800160e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	4a08      	ldrlt	r2, [pc, #32]	; (8001634 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	bfb8      	it	lt
 800161a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	b2db      	uxtb	r3, r3
 8001620:	bfaa      	itet	ge
 8001622:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800162c:	bd30      	pop	{r4, r5, pc}
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	e000ed14 	.word	0xe000ed14

08001638 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001638:	2800      	cmp	r0, #0
 800163a:	db08      	blt.n	800164e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163c:	0942      	lsrs	r2, r0, #5
 800163e:	2301      	movs	r3, #1
 8001640:	f000 001f 	and.w	r0, r0, #31
 8001644:	fa03 f000 	lsl.w	r0, r3, r0
 8001648:	4b01      	ldr	r3, [pc, #4]	; (8001650 <HAL_NVIC_EnableIRQ+0x18>)
 800164a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100

08001654 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	3801      	subs	r0, #1
 8001656:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800165a:	d20b      	bcs.n	8001674 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	21f0      	movs	r1, #240	; 0xf0
 8001666:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001670:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001672:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001674:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800167c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800167e:	4604      	mov	r4, r0
 8001680:	b150      	cbz	r0, 8001698 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001682:	7943      	ldrb	r3, [r0, #5]
 8001684:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001688:	b913      	cbnz	r3, 8001690 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800168a:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800168c:	f7ff fc26 	bl	8000edc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001690:	2301      	movs	r3, #1
 8001692:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001694:	2000      	movs	r0, #0
}
 8001696:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001698:	2001      	movs	r0, #1
 800169a:	e7fc      	b.n	8001696 <HAL_CRC_Init+0x1a>

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001828 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a4:	4a5e      	ldr	r2, [pc, #376]	; (8001820 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80016aa:	2401      	movs	r4, #1
 80016ac:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ae:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80016b2:	43ac      	bics	r4, r5
 80016b4:	f040 80a5 	bne.w	8001802 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b8:	684d      	ldr	r5, [r1, #4]
 80016ba:	f005 0403 	and.w	r4, r5, #3
 80016be:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c6:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ca:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016cc:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d0:	d834      	bhi.n	800173c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80016d2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d8:	68cf      	ldr	r7, [r1, #12]
 80016da:	fa07 f708 	lsl.w	r7, r7, r8
 80016de:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80016e2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80016e4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e6:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ea:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80016ee:	409f      	lsls	r7, r3
 80016f0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80016f4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80016f6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016f8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	688f      	ldr	r7, [r1, #8]
 80016fe:	fa07 f708 	lsl.w	r7, r7, r8
 8001702:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001706:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001708:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	d119      	bne.n	8001740 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800170c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001710:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001714:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001718:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800171c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001720:	f04f 0e0f 	mov.w	lr, #15
 8001724:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001728:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800172c:	690f      	ldr	r7, [r1, #16]
 800172e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001732:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001736:	f8ca 7020 	str.w	r7, [sl, #32]
 800173a:	e001      	b.n	8001740 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173c:	2c03      	cmp	r4, #3
 800173e:	d1da      	bne.n	80016f6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001740:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001742:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001746:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001748:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800174a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800174e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001750:	d057      	beq.n	8001802 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	f04f 0a00 	mov.w	sl, #0
 8001756:	f8cd a004 	str.w	sl, [sp, #4]
 800175a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175e:	4c31      	ldr	r4, [pc, #196]	; (8001824 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001760:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001764:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001768:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800176c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001770:	9601      	str	r6, [sp, #4]
 8001772:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001774:	f023 0603 	bic.w	r6, r3, #3
 8001778:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800177c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001780:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001784:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001788:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800178c:	270f      	movs	r7, #15
 800178e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001792:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001794:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001798:	d03a      	beq.n	8001810 <HAL_GPIO_Init+0x174>
 800179a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800179e:	42a0      	cmp	r0, r4
 80017a0:	d038      	beq.n	8001814 <HAL_GPIO_Init+0x178>
 80017a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017a6:	42a0      	cmp	r0, r4
 80017a8:	d036      	beq.n	8001818 <HAL_GPIO_Init+0x17c>
 80017aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017ae:	42a0      	cmp	r0, r4
 80017b0:	d034      	beq.n	800181c <HAL_GPIO_Init+0x180>
 80017b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017b6:	42a0      	cmp	r0, r4
 80017b8:	bf0c      	ite	eq
 80017ba:	2404      	moveq	r4, #4
 80017bc:	2407      	movne	r4, #7
 80017be:	fa04 f40e 	lsl.w	r4, r4, lr
 80017c2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c4:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80017c6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017cc:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80017ce:	bf54      	ite	pl
 80017d0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017d2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80017d6:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80017d8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017da:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80017dc:	bf54      	ite	pl
 80017de:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017e0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80017e4:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 80017e6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e8:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80017ea:	bf54      	ite	pl
 80017ec:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017ee:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80017f2:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f6:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80017f8:	bf54      	ite	pl
 80017fa:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017fc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001800:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001802:	3301      	adds	r3, #1
 8001804:	2b10      	cmp	r3, #16
 8001806:	f47f af4f 	bne.w	80016a8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800180a:	b003      	add	sp, #12
 800180c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001810:	4654      	mov	r4, sl
 8001812:	e7d4      	b.n	80017be <HAL_GPIO_Init+0x122>
 8001814:	2401      	movs	r4, #1
 8001816:	e7d2      	b.n	80017be <HAL_GPIO_Init+0x122>
 8001818:	2402      	movs	r4, #2
 800181a:	e7d0      	b.n	80017be <HAL_GPIO_Init+0x122>
 800181c:	2403      	movs	r4, #3
 800181e:	e7ce      	b.n	80017be <HAL_GPIO_Init+0x122>
 8001820:	40013c00 	.word	0x40013c00
 8001824:	40020000 	.word	0x40020000
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	b10a      	cbz	r2, 8001832 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800182e:	6181      	str	r1, [r0, #24]
  }
}
 8001830:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001832:	0409      	lsls	r1, r1, #16
 8001834:	e7fb      	b.n	800182e <HAL_GPIO_WritePin+0x2>

08001836 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001836:	6801      	ldr	r1, [r0, #0]
 8001838:	694b      	ldr	r3, [r1, #20]
 800183a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	d010      	beq.n	8001866 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001844:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001848:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800184a:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800184c:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800184e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001852:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001856:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001858:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001862:	2001      	movs	r0, #1
 8001864:	4770      	bx	lr
  }
  return HAL_OK;
 8001866:	4618      	mov	r0, r3
}
 8001868:	4770      	bx	lr

0800186a <I2C_WaitOnFlagUntilTimeout>:
{
 800186a:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800186e:	4606      	mov	r6, r0
 8001870:	460f      	mov	r7, r1
 8001872:	4691      	mov	r9, r2
 8001874:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001876:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800187a:	6833      	ldr	r3, [r6, #0]
 800187c:	f1ba 0f01 	cmp.w	sl, #1
 8001880:	bf0c      	ite	eq
 8001882:	695c      	ldreq	r4, [r3, #20]
 8001884:	699c      	ldrne	r4, [r3, #24]
 8001886:	ea27 0404 	bic.w	r4, r7, r4
 800188a:	b2a4      	uxth	r4, r4
 800188c:	fab4 f484 	clz	r4, r4
 8001890:	0964      	lsrs	r4, r4, #5
 8001892:	45a1      	cmp	r9, r4
 8001894:	d001      	beq.n	800189a <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001896:	2000      	movs	r0, #0
 8001898:	e017      	b.n	80018ca <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800189a:	1c6a      	adds	r2, r5, #1
 800189c:	d0ee      	beq.n	800187c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800189e:	f7ff fe81 	bl	80015a4 <HAL_GetTick>
 80018a2:	9b08      	ldr	r3, [sp, #32]
 80018a4:	1ac0      	subs	r0, r0, r3
 80018a6:	42a8      	cmp	r0, r5
 80018a8:	d801      	bhi.n	80018ae <I2C_WaitOnFlagUntilTimeout+0x44>
 80018aa:	2d00      	cmp	r5, #0
 80018ac:	d1e5      	bne.n	800187a <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80018ae:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80018b0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80018b2:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80018b4:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018b8:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018bc:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80018be:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018c2:	f042 0220 	orr.w	r2, r2, #32
 80018c6:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 80018c8:	2001      	movs	r0, #1
}
 80018ca:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080018ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80018ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d2:	4604      	mov	r4, r0
 80018d4:	460f      	mov	r7, r1
 80018d6:	4616      	mov	r6, r2
 80018d8:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018da:	6825      	ldr	r5, [r4, #0]
 80018dc:	6968      	ldr	r0, [r5, #20]
 80018de:	ea27 0000 	bic.w	r0, r7, r0
 80018e2:	b280      	uxth	r0, r0
 80018e4:	b1b8      	cbz	r0, 8001916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018e6:	696b      	ldr	r3, [r5, #20]
 80018e8:	055a      	lsls	r2, r3, #21
 80018ea:	d516      	bpl.n	800191a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ec:	682b      	ldr	r3, [r5, #0]
 80018ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f2:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018f4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80018f8:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80018fa:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001900:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001904:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001908:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800190a:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800190e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001910:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001914:	2001      	movs	r0, #1
}
 8001916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800191a:	1c73      	adds	r3, r6, #1
 800191c:	d0de      	beq.n	80018dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800191e:	f7ff fe41 	bl	80015a4 <HAL_GetTick>
 8001922:	eba0 0008 	sub.w	r0, r0, r8
 8001926:	42b0      	cmp	r0, r6
 8001928:	d801      	bhi.n	800192e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800192a:	2e00      	cmp	r6, #0
 800192c:	d1d5      	bne.n	80018da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800192e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001930:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001932:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001934:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001938:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800193c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800193e:	f042 0220 	orr.w	r2, r2, #32
 8001942:	e7e4      	b.n	800190e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08001944 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	4604      	mov	r4, r0
 8001948:	460d      	mov	r5, r1
 800194a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800194c:	6821      	ldr	r1, [r4, #0]
 800194e:	694b      	ldr	r3, [r1, #20]
 8001950:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001954:	d001      	beq.n	800195a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001956:	2000      	movs	r0, #0
 8001958:	e010      	b.n	800197c <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800195a:	694a      	ldr	r2, [r1, #20]
 800195c:	06d2      	lsls	r2, r2, #27
 800195e:	d50e      	bpl.n	800197e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001960:	f06f 0210 	mvn.w	r2, #16
 8001964:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001966:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001968:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800196a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800196e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001972:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001974:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001976:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800197a:	2001      	movs	r0, #1
}
 800197c:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800197e:	f7ff fe11 	bl	80015a4 <HAL_GetTick>
 8001982:	1b80      	subs	r0, r0, r6
 8001984:	42a8      	cmp	r0, r5
 8001986:	d801      	bhi.n	800198c <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001988:	2d00      	cmp	r5, #0
 800198a:	d1df      	bne.n	800194c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800198c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800198e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001990:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001992:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001996:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800199a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800199c:	f042 0220 	orr.w	r2, r2, #32
 80019a0:	e7e8      	b.n	8001974 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080019a2 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80019a2:	b570      	push	{r4, r5, r6, lr}
 80019a4:	4604      	mov	r4, r0
 80019a6:	460d      	mov	r5, r1
 80019a8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	075b      	lsls	r3, r3, #29
 80019b0:	d501      	bpl.n	80019b6 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80019b2:	2000      	movs	r0, #0
}
 80019b4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff ff3d 	bl	8001836 <I2C_IsAcknowledgeFailed>
 80019bc:	b9a8      	cbnz	r0, 80019ea <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80019be:	1c6a      	adds	r2, r5, #1
 80019c0:	d0f3      	beq.n	80019aa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c2:	f7ff fdef 	bl	80015a4 <HAL_GetTick>
 80019c6:	1b80      	subs	r0, r0, r6
 80019c8:	42a8      	cmp	r0, r5
 80019ca:	d801      	bhi.n	80019d0 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80019cc:	2d00      	cmp	r5, #0
 80019ce:	d1ec      	bne.n	80019aa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019d0:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80019d2:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019d4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019de:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80019e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019e4:	f042 0220 	orr.w	r2, r2, #32
 80019e8:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80019ea:	2001      	movs	r0, #1
 80019ec:	e7e2      	b.n	80019b4 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080019ee <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80019ee:	b570      	push	{r4, r5, r6, lr}
 80019f0:	4604      	mov	r4, r0
 80019f2:	460d      	mov	r5, r1
 80019f4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	061b      	lsls	r3, r3, #24
 80019fc:	d501      	bpl.n	8001a02 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80019fe:	2000      	movs	r0, #0
}
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff ff17 	bl	8001836 <I2C_IsAcknowledgeFailed>
 8001a08:	b9a8      	cbnz	r0, 8001a36 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001a0a:	1c6a      	adds	r2, r5, #1
 8001a0c:	d0f3      	beq.n	80019f6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0e:	f7ff fdc9 	bl	80015a4 <HAL_GetTick>
 8001a12:	1b80      	subs	r0, r0, r6
 8001a14:	42a8      	cmp	r0, r5
 8001a16:	d801      	bhi.n	8001a1c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001a18:	2d00      	cmp	r5, #0
 8001a1a:	d1ec      	bne.n	80019f6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a1c:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a1e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a20:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a22:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001a2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a30:	f042 0220 	orr.w	r2, r2, #32
 8001a34:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001a36:	2001      	movs	r0, #1
 8001a38:	e7e2      	b.n	8001a00 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08001a3c <I2C_RequestMemoryWrite>:
{
 8001a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a40:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a42:	6802      	ldr	r2, [r0, #0]
{
 8001a44:	b085      	sub	sp, #20
 8001a46:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8001a4a:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a4c:	6813      	ldr	r3, [r2, #0]
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]
{
 8001a54:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a56:	463b      	mov	r3, r7
 8001a58:	f8cd 8000 	str.w	r8, [sp]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001a62:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a64:	f7ff ff01 	bl	800186a <I2C_WaitOnFlagUntilTimeout>
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	b138      	cbz	r0, 8001a7c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	05db      	lsls	r3, r3, #23
 8001a70:	d502      	bpl.n	8001a78 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a76:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001a78:	2003      	movs	r0, #3
 8001a7a:	e00a      	b.n	8001a92 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a7c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8001a80:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a82:	4919      	ldr	r1, [pc, #100]	; (8001ae8 <I2C_RequestMemoryWrite+0xac>)
 8001a84:	4643      	mov	r3, r8
 8001a86:	463a      	mov	r2, r7
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff ff20 	bl	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a8e:	b118      	cbz	r0, 8001a98 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8001a90:	2001      	movs	r0, #1
}
 8001a92:	b005      	add	sp, #20
 8001a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	9003      	str	r0, [sp, #12]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	9203      	str	r2, [sp, #12]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aa4:	4642      	mov	r2, r8
 8001aa6:	4639      	mov	r1, r7
 8001aa8:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aaa:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aac:	f7ff ff9f 	bl	80019ee <I2C_WaitOnTXEFlagUntilTimeout>
 8001ab0:	b140      	cbz	r0, 8001ac4 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ab4:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab6:	bf01      	itttt	eq
 8001ab8:	6822      	ldreq	r2, [r4, #0]
 8001aba:	6813      	ldreq	r3, [r2, #0]
 8001abc:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001ac0:	6013      	streq	r3, [r2, #0]
 8001ac2:	e7e5      	b.n	8001a90 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ac4:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aca:	d102      	bne.n	8001ad2 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001acc:	b2ed      	uxtb	r5, r5
 8001ace:	611d      	str	r5, [r3, #16]
 8001ad0:	e7df      	b.n	8001a92 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ad2:	0a2a      	lsrs	r2, r5, #8
 8001ad4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad6:	4639      	mov	r1, r7
 8001ad8:	4642      	mov	r2, r8
 8001ada:	4620      	mov	r0, r4
 8001adc:	f7ff ff87 	bl	80019ee <I2C_WaitOnTXEFlagUntilTimeout>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d1e6      	bne.n	8001ab2 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	e7f1      	b.n	8001acc <I2C_RequestMemoryWrite+0x90>
 8001ae8:	00010002 	.word	0x00010002

08001aec <I2C_RequestMemoryRead>:
{
 8001aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001af0:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001af2:	6803      	ldr	r3, [r0, #0]
{
 8001af4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001afc:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001afe:	681a      	ldr	r2, [r3, #0]
{
 8001b00:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b08:	601a      	str	r2, [r3, #0]
{
 8001b0a:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	f8cd 8000 	str.w	r8, [sp]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001b18:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b1a:	f7ff fea6 	bl	800186a <I2C_WaitOnFlagUntilTimeout>
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	b148      	cbz	r0, 8001b36 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b22:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	d502      	bpl.n	8001b2e <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001b2e:	2003      	movs	r0, #3
}
 8001b30:	b004      	add	sp, #16
 8001b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b36:	fa5f f986 	uxtb.w	r9, r6
 8001b3a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8001b3e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b40:	492a      	ldr	r1, [pc, #168]	; (8001bec <I2C_RequestMemoryRead+0x100>)
 8001b42:	4643      	mov	r3, r8
 8001b44:	463a      	mov	r2, r7
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff fec1 	bl	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b4c:	b108      	cbz	r0, 8001b52 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
 8001b50:	e7ee      	b.n	8001b30 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	9003      	str	r0, [sp, #12]
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	9203      	str	r2, [sp, #12]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5e:	4642      	mov	r2, r8
 8001b60:	4639      	mov	r1, r7
 8001b62:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b64:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b66:	f7ff ff42 	bl	80019ee <I2C_WaitOnTXEFlagUntilTimeout>
 8001b6a:	b140      	cbz	r0, 8001b7e <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b6e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b70:	bf01      	itttt	eq
 8001b72:	6822      	ldreq	r2, [r4, #0]
 8001b74:	6813      	ldreq	r3, [r2, #0]
 8001b76:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001b7a:	6013      	streq	r3, [r2, #0]
 8001b7c:	e7e7      	b.n	8001b4e <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b7e:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b82:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b84:	d11a      	bne.n	8001bbc <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b86:	b2ed      	uxtb	r5, r5
 8001b88:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b8a:	4642      	mov	r2, r8
 8001b8c:	4639      	mov	r1, r7
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff ff2d 	bl	80019ee <I2C_WaitOnTXEFlagUntilTimeout>
 8001b94:	2800      	cmp	r0, #0
 8001b96:	d1e9      	bne.n	8001b6c <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b98:	6822      	ldr	r2, [r4, #0]
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	f8cd 8000 	str.w	r8, [sp]
 8001bac:	463b      	mov	r3, r7
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff fe5b 	bl	800186a <I2C_WaitOnFlagUntilTimeout>
 8001bb4:	6822      	ldr	r2, [r4, #0]
 8001bb6:	b160      	cbz	r0, 8001bd2 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bb8:	6813      	ldr	r3, [r2, #0]
 8001bba:	e7b3      	b.n	8001b24 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001bbc:	0a2a      	lsrs	r2, r5, #8
 8001bbe:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc0:	4639      	mov	r1, r7
 8001bc2:	4642      	mov	r2, r8
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff ff12 	bl	80019ee <I2C_WaitOnTXEFlagUntilTimeout>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d1ce      	bne.n	8001b6c <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	e7d9      	b.n	8001b86 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001bd2:	f049 0301 	orr.w	r3, r9, #1
 8001bd6:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bd8:	4904      	ldr	r1, [pc, #16]	; (8001bec <I2C_RequestMemoryRead+0x100>)
 8001bda:	4643      	mov	r3, r8
 8001bdc:	463a      	mov	r2, r7
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7ff fe75 	bl	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8001be4:	3800      	subs	r0, #0
 8001be6:	bf18      	it	ne
 8001be8:	2001      	movne	r0, #1
 8001bea:	e7a1      	b.n	8001b30 <I2C_RequestMemoryRead+0x44>
 8001bec:	00010002 	.word	0x00010002

08001bf0 <HAL_I2C_Init>:
{
 8001bf0:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	b908      	cbnz	r0, 8001bfa <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001bf6:	2001      	movs	r0, #1
}
 8001bf8:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bfa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001bfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c02:	b91b      	cbnz	r3, 8001c0c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001c04:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c08:	f7ff f9f2 	bl	8000ff0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c0c:	2324      	movs	r3, #36	; 0x24
 8001c0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c2a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c2c:	f000 fc9a 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c30:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <HAL_I2C_Init+0x140>)
 8001c32:	6865      	ldr	r5, [r4, #4]
 8001c34:	429d      	cmp	r5, r3
 8001c36:	bf94      	ite	ls
 8001c38:	4b3e      	ldrls	r3, [pc, #248]	; (8001d34 <HAL_I2C_Init+0x144>)
 8001c3a:	4b3f      	ldrhi	r3, [pc, #252]	; (8001d38 <HAL_I2C_Init+0x148>)
 8001c3c:	4298      	cmp	r0, r3
 8001c3e:	bf8c      	ite	hi
 8001c40:	2300      	movhi	r3, #0
 8001c42:	2301      	movls	r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1d6      	bne.n	8001bf6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c48:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c4a:	4e39      	ldr	r6, [pc, #228]	; (8001d30 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c4c:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c4e:	493b      	ldr	r1, [pc, #236]	; (8001d3c <HAL_I2C_Init+0x14c>)
 8001c50:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c58:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c5a:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c5c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c5e:	bf88      	it	hi
 8001c60:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 8001c64:	6a13      	ldr	r3, [r2, #32]
 8001c66:	bf88      	it	hi
 8001c68:	4371      	mulhi	r1, r6
 8001c6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c6e:	bf84      	itt	hi
 8001c70:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8001c74:	fbb1 f1f6 	udivhi	r1, r1, r6
 8001c78:	3101      	adds	r1, #1
 8001c7a:	4319      	orrs	r1, r3
 8001c7c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c7e:	69d1      	ldr	r1, [r2, #28]
 8001c80:	1e43      	subs	r3, r0, #1
 8001c82:	482b      	ldr	r0, [pc, #172]	; (8001d30 <HAL_I2C_Init+0x140>)
 8001c84:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001c88:	4285      	cmp	r5, r0
 8001c8a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001c8e:	d832      	bhi.n	8001cf6 <HAL_I2C_Init+0x106>
 8001c90:	006d      	lsls	r5, r5, #1
 8001c92:	f640 70fc 	movw	r0, #4092	; 0xffc
 8001c96:	fbb3 f3f5 	udiv	r3, r3, r5
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4203      	tst	r3, r0
 8001c9e:	d042      	beq.n	8001d26 <HAL_I2C_Init+0x136>
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ca8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001cac:	6811      	ldr	r1, [r2, #0]
 8001cae:	4303      	orrs	r3, r0
 8001cb0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cb8:	6891      	ldr	r1, [r2, #8]
 8001cba:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001cbe:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001cc2:	4303      	orrs	r3, r0
 8001cc4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ccc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001cd0:	68d1      	ldr	r1, [r2, #12]
 8001cd2:	4303      	orrs	r3, r0
 8001cd4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001cdc:	6813      	ldr	r3, [r2, #0]
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce4:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001ce6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cee:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001cf4:	e780      	b.n	8001bf8 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cf6:	68a0      	ldr	r0, [r4, #8]
 8001cf8:	b950      	cbnz	r0, 8001d10 <HAL_I2C_Init+0x120>
 8001cfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001cfe:	fbb3 f3f5 	udiv	r3, r3, r5
 8001d02:	3301      	adds	r3, #1
 8001d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d08:	b17b      	cbz	r3, 8001d2a <HAL_I2C_Init+0x13a>
 8001d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0e:	e7c9      	b.n	8001ca4 <HAL_I2C_Init+0xb4>
 8001d10:	2019      	movs	r0, #25
 8001d12:	4345      	muls	r5, r0
 8001d14:	fbb3 f3f5 	udiv	r3, r3, r5
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1e:	b123      	cbz	r3, 8001d2a <HAL_I2C_Init+0x13a>
 8001d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d24:	e7be      	b.n	8001ca4 <HAL_I2C_Init+0xb4>
 8001d26:	2304      	movs	r3, #4
 8001d28:	e7bc      	b.n	8001ca4 <HAL_I2C_Init+0xb4>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e7ba      	b.n	8001ca4 <HAL_I2C_Init+0xb4>
 8001d2e:	bf00      	nop
 8001d30:	000186a0 	.word	0x000186a0
 8001d34:	001e847f 	.word	0x001e847f
 8001d38:	003d08ff 	.word	0x003d08ff
 8001d3c:	000f4240 	.word	0x000f4240

08001d40 <HAL_I2C_Mem_Write>:
{
 8001d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001d44:	4604      	mov	r4, r0
 8001d46:	4699      	mov	r9, r3
 8001d48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001d4a:	460f      	mov	r7, r1
 8001d4c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001d4e:	f7ff fc29 	bl	80015a4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d52:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d56:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001d58:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5a:	d003      	beq.n	8001d64 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001d5c:	2002      	movs	r0, #2
}
 8001d5e:	b003      	add	sp, #12
 8001d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d64:	9000      	str	r0, [sp, #0]
 8001d66:	493c      	ldr	r1, [pc, #240]	; (8001e58 <HAL_I2C_Mem_Write+0x118>)
 8001d68:	2319      	movs	r3, #25
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff fd7c 	bl	800186a <I2C_WaitOnFlagUntilTimeout>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	d1f2      	bne.n	8001d5c <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001d76:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d0ee      	beq.n	8001d5c <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d7e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8001d80:	2301      	movs	r3, #1
 8001d82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d86:	6803      	ldr	r3, [r0, #0]
 8001d88:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001d8a:	bf5e      	ittt	pl
 8001d8c:	6803      	ldrpl	r3, [r0, #0]
 8001d8e:	f043 0301 	orrpl.w	r3, r3, #1
 8001d92:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d94:	6803      	ldr	r3, [r0, #0]
 8001d96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d9a:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d9c:	2321      	movs	r3, #33	; 0x21
 8001d9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001da2:	2340      	movs	r3, #64	; 0x40
 8001da4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001dae:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001db0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001db4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001db6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001db8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_I2C_Mem_Write+0x11c>)
 8001dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dbe:	e9cd 6500 	strd	r6, r5, [sp]
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	4642      	mov	r2, r8
 8001dc6:	4639      	mov	r1, r7
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7ff fe37 	bl	8001a3c <I2C_RequestMemoryWrite>
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d02a      	beq.n	8001e28 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	e7c3      	b.n	8001d5e <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	f7ff fe0a 	bl	80019ee <I2C_WaitOnTXEFlagUntilTimeout>
 8001dda:	b140      	cbz	r0, 8001dee <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dde:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de0:	bf01      	itttt	eq
 8001de2:	6822      	ldreq	r2, [r4, #0]
 8001de4:	6813      	ldreq	r3, [r2, #0]
 8001de6:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001dea:	6013      	streq	r3, [r2, #0]
 8001dec:	e7f1      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001df0:	6827      	ldr	r7, [r4, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001df8:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001dfa:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001dfc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001dfe:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001e00:	3a01      	subs	r2, #1
 8001e02:	b292      	uxth	r2, r2
 8001e04:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e06:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001e08:	1e48      	subs	r0, r1, #1
 8001e0a:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e0c:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001e0e:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e10:	d50a      	bpl.n	8001e28 <HAL_I2C_Mem_Write+0xe8>
 8001e12:	b148      	cbz	r0, 8001e28 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e14:	785a      	ldrb	r2, [r3, #1]
 8001e16:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001e18:	3302      	adds	r3, #2
 8001e1a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001e1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e1e:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001e20:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8001e22:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001e24:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001e26:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2a:	462a      	mov	r2, r5
 8001e2c:	4631      	mov	r1, r6
 8001e2e:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1d0      	bne.n	8001dd6 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e34:	f7ff fdb5 	bl	80019a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	d1cf      	bne.n	8001ddc <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	6813      	ldr	r3, [r2, #0]
 8001e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e44:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	2320      	movs	r3, #32
 8001e48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001e4c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001e54:	e783      	b.n	8001d5e <HAL_I2C_Mem_Write+0x1e>
 8001e56:	bf00      	nop
 8001e58:	00100002 	.word	0x00100002
 8001e5c:	ffff0000 	.word	0xffff0000

08001e60 <HAL_I2C_Mem_Read>:
{
 8001e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e64:	4604      	mov	r4, r0
 8001e66:	b087      	sub	sp, #28
 8001e68:	4699      	mov	r9, r3
 8001e6a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001e6c:	460d      	mov	r5, r1
 8001e6e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff fb98 	bl	80015a4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e74:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001e78:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001e7a:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7c:	d004      	beq.n	8001e88 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001e7e:	2502      	movs	r5, #2
}
 8001e80:	4628      	mov	r0, r5
 8001e82:	b007      	add	sp, #28
 8001e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e88:	9000      	str	r0, [sp, #0]
 8001e8a:	4976      	ldr	r1, [pc, #472]	; (8002064 <HAL_I2C_Mem_Read+0x204>)
 8001e8c:	2319      	movs	r3, #25
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7ff fcea 	bl	800186a <I2C_WaitOnFlagUntilTimeout>
 8001e96:	2800      	cmp	r0, #0
 8001e98:	d1f1      	bne.n	8001e7e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001e9a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d0ed      	beq.n	8001e7e <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea2:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eaa:	6803      	ldr	r3, [r0, #0]
 8001eac:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001eae:	bf5e      	ittt	pl
 8001eb0:	6803      	ldrpl	r3, [r0, #0]
 8001eb2:	f043 0301 	orrpl.w	r3, r3, #1
 8001eb6:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eb8:	6803      	ldr	r3, [r0, #0]
 8001eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ebe:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ec0:	2322      	movs	r3, #34	; 0x22
 8001ec2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ed2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ed4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001ed8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001edc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ede:	4b62      	ldr	r3, [pc, #392]	; (8002068 <HAL_I2C_Mem_Read+0x208>)
 8001ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	e9cd 7600 	strd	r7, r6, [sp]
 8001ee8:	464b      	mov	r3, r9
 8001eea:	4642      	mov	r2, r8
 8001eec:	4620      	mov	r0, r4
 8001eee:	f7ff fdfd 	bl	8001aec <I2C_RequestMemoryRead>
 8001ef2:	4605      	mov	r5, r0
 8001ef4:	b108      	cbz	r0, 8001efa <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8001ef6:	2501      	movs	r5, #1
 8001ef8:	e7c2      	b.n	8001e80 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8001efa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efc:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8001efe:	b9b2      	cbnz	r2, 8001f2e <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f00:	9002      	str	r0, [sp, #8]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	9202      	str	r2, [sp, #8]
 8001f06:	699a      	ldr	r2, [r3, #24]
 8001f08:	9202      	str	r2, [sp, #8]
 8001f0a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f12:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f14:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800206c <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8001f18:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d12c      	bne.n	8001f78 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001f24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001f2c:	e7a8      	b.n	8001e80 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8001f2e:	2a01      	cmp	r2, #1
 8001f30:	d10a      	bne.n	8001f48 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f38:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3a:	9003      	str	r0, [sp, #12]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	9203      	str	r2, [sp, #12]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	9203      	str	r2, [sp, #12]
 8001f44:	9a03      	ldr	r2, [sp, #12]
 8001f46:	e7e1      	b.n	8001f0c <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8001f48:	2a02      	cmp	r2, #2
 8001f4a:	d10e      	bne.n	8001f6a <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f5a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5c:	9004      	str	r0, [sp, #16]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	9204      	str	r2, [sp, #16]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	9304      	str	r3, [sp, #16]
 8001f66:	9b04      	ldr	r3, [sp, #16]
 8001f68:	e7d4      	b.n	8001f14 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f6a:	9005      	str	r0, [sp, #20]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	9205      	str	r2, [sp, #20]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	9305      	str	r3, [sp, #20]
 8001f74:	9b05      	ldr	r3, [sp, #20]
 8001f76:	e7cd      	b.n	8001f14 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d856      	bhi.n	800202a <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d115      	bne.n	8001fac <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f80:	4632      	mov	r2, r6
 8001f82:	4639      	mov	r1, r7
 8001f84:	4620      	mov	r0, r4
 8001f86:	f7ff fcdd 	bl	8001944 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	d1b3      	bne.n	8001ef6 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f94:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f98:	3301      	adds	r3, #1
 8001f9a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001f9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001fa2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001faa:	e7b5      	b.n	8001f18 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8001fac:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fae:	9600      	str	r6, [sp, #0]
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4641      	mov	r1, r8
 8001fb8:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001fba:	d119      	bne.n	8001ff0 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fbc:	f7ff fc55 	bl	800186a <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d198      	bne.n	8001ef6 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fcc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fd2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001fd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fd6:	1c53      	adds	r3, r2, #1
 8001fd8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001fda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001fe0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe8:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	7053      	strb	r3, [r2, #1]
 8001fee:	e7d2      	b.n	8001f96 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ff0:	f7ff fc3b 	bl	800186a <I2C_WaitOnFlagUntilTimeout>
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	f47f af7e 	bne.w	8001ef6 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002002:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002008:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800200a:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800200c:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 800200e:	3301      	adds	r3, #1
 8002010:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002012:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002014:	3b01      	subs	r3, #1
 8002016:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002018:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800201a:	3b01      	subs	r3, #1
 800201c:	b29b      	uxth	r3, r3
 800201e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002020:	4602      	mov	r2, r0
 8002022:	463b      	mov	r3, r7
 8002024:	4641      	mov	r1, r8
 8002026:	4620      	mov	r0, r4
 8002028:	e7c8      	b.n	8001fbc <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202a:	4632      	mov	r2, r6
 800202c:	4639      	mov	r1, r7
 800202e:	4620      	mov	r0, r4
 8002030:	f7ff fc88 	bl	8001944 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002034:	2800      	cmp	r0, #0
 8002036:	f47f af5e 	bne.w	8001ef6 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002040:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002042:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002044:	1c53      	adds	r3, r2, #1
 8002046:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002048:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800204a:	3b01      	subs	r3, #1
 800204c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800204e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002050:	3b01      	subs	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002056:	6823      	ldr	r3, [r4, #0]
 8002058:	6959      	ldr	r1, [r3, #20]
 800205a:	0749      	lsls	r1, r1, #29
 800205c:	f57f af5c 	bpl.w	8001f18 <HAL_I2C_Mem_Read+0xb8>
 8002060:	e7c3      	b.n	8001fea <HAL_I2C_Mem_Read+0x18a>
 8002062:	bf00      	nop
 8002064:	00100002 	.word	0x00100002
 8002068:	ffff0000 	.word	0xffff0000
 800206c:	00010004 	.word	0x00010004

08002070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002074:	4604      	mov	r4, r0
 8002076:	b340      	cbz	r0, 80020ca <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002078:	6803      	ldr	r3, [r0, #0]
 800207a:	07dd      	lsls	r5, r3, #31
 800207c:	d410      	bmi.n	80020a0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	0798      	lsls	r0, r3, #30
 8002082:	d45e      	bmi.n	8002142 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	071a      	lsls	r2, r3, #28
 8002088:	f100 80a0 	bmi.w	80021cc <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	075b      	lsls	r3, r3, #29
 8002090:	f100 80c0 	bmi.w	8002214 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002094:	69a0      	ldr	r0, [r4, #24]
 8002096:	2800      	cmp	r0, #0
 8002098:	f040 8128 	bne.w	80022ec <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800209c:	2000      	movs	r0, #0
 800209e:	e02b      	b.n	80020f8 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020a0:	4b8f      	ldr	r3, [pc, #572]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	f002 020c 	and.w	r2, r2, #12
 80020a8:	2a04      	cmp	r2, #4
 80020aa:	d007      	beq.n	80020bc <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020b2:	2a08      	cmp	r2, #8
 80020b4:	d10b      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	0251      	lsls	r1, r2, #9
 80020ba:	d508      	bpl.n	80020ce <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	039a      	lsls	r2, r3, #14
 80020c2:	d5dc      	bpl.n	800207e <HAL_RCC_OscConfig+0xe>
 80020c4:	6863      	ldr	r3, [r4, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1d9      	bne.n	800207e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80020ca:	2001      	movs	r0, #1
 80020cc:	e014      	b.n	80020f8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ce:	6862      	ldr	r2, [r4, #4]
 80020d0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80020d4:	d113      	bne.n	80020fe <HAL_RCC_OscConfig+0x8e>
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020de:	f7ff fa61 	bl	80015a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4e7f      	ldr	r6, [pc, #508]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80020e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	6833      	ldr	r3, [r6, #0]
 80020e8:	039b      	lsls	r3, r3, #14
 80020ea:	d4c8      	bmi.n	800207e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fa5a 	bl	80015a4 <HAL_GetTick>
 80020f0:	1b40      	subs	r0, r0, r5
 80020f2:	2864      	cmp	r0, #100	; 0x64
 80020f4:	d9f7      	bls.n	80020e6 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80020f6:	2003      	movs	r0, #3
}
 80020f8:	b002      	add	sp, #8
 80020fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fe:	4d78      	ldr	r5, [pc, #480]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002100:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0xa8>
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	602b      	str	r3, [r5, #0]
 800210e:	682b      	ldr	r3, [r5, #0]
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002116:	e7e2      	b.n	80020de <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211c:	602b      	str	r3, [r5, #0]
 800211e:	682b      	ldr	r3, [r5, #0]
 8002120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002124:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002126:	2a00      	cmp	r2, #0
 8002128:	d1d9      	bne.n	80020de <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800212a:	f7ff fa3b 	bl	80015a4 <HAL_GetTick>
 800212e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002130:	682b      	ldr	r3, [r5, #0]
 8002132:	039f      	lsls	r7, r3, #14
 8002134:	d5a3      	bpl.n	800207e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002136:	f7ff fa35 	bl	80015a4 <HAL_GetTick>
 800213a:	1b80      	subs	r0, r0, r6
 800213c:	2864      	cmp	r0, #100	; 0x64
 800213e:	d9f7      	bls.n	8002130 <HAL_RCC_OscConfig+0xc0>
 8002140:	e7d9      	b.n	80020f6 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002142:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	f012 0f0c 	tst.w	r2, #12
 800214a:	d007      	beq.n	800215c <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002152:	2a08      	cmp	r2, #8
 8002154:	d111      	bne.n	800217a <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	025e      	lsls	r6, r3, #9
 800215a:	d40e      	bmi.n	800217a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215c:	4a60      	ldr	r2, [pc, #384]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 800215e:	6813      	ldr	r3, [r2, #0]
 8002160:	079d      	lsls	r5, r3, #30
 8002162:	d502      	bpl.n	800216a <HAL_RCC_OscConfig+0xfa>
 8002164:	68e3      	ldr	r3, [r4, #12]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d1af      	bne.n	80020ca <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216a:	6813      	ldr	r3, [r2, #0]
 800216c:	6921      	ldr	r1, [r4, #16]
 800216e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002172:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002176:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002178:	e784      	b.n	8002084 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800217a:	68e2      	ldr	r2, [r4, #12]
 800217c:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 800217e:	b1b2      	cbz	r2, 80021ae <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002184:	f7ff fa0e 	bl	80015a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	4d55      	ldr	r5, [pc, #340]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800218a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	682b      	ldr	r3, [r5, #0]
 800218e:	0798      	lsls	r0, r3, #30
 8002190:	d507      	bpl.n	80021a2 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	682b      	ldr	r3, [r5, #0]
 8002194:	6922      	ldr	r2, [r4, #16]
 8002196:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800219a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800219e:	602b      	str	r3, [r5, #0]
 80021a0:	e770      	b.n	8002084 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a2:	f7ff f9ff 	bl	80015a4 <HAL_GetTick>
 80021a6:	1b80      	subs	r0, r0, r6
 80021a8:	2802      	cmp	r0, #2
 80021aa:	d9ef      	bls.n	800218c <HAL_RCC_OscConfig+0x11c>
 80021ac:	e7a3      	b.n	80020f6 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80021ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021b0:	f7ff f9f8 	bl	80015a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b4:	4e4a      	ldr	r6, [pc, #296]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80021b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b8:	6833      	ldr	r3, [r6, #0]
 80021ba:	0799      	lsls	r1, r3, #30
 80021bc:	f57f af62 	bpl.w	8002084 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c0:	f7ff f9f0 	bl	80015a4 <HAL_GetTick>
 80021c4:	1b40      	subs	r0, r0, r5
 80021c6:	2802      	cmp	r0, #2
 80021c8:	d9f6      	bls.n	80021b8 <HAL_RCC_OscConfig+0x148>
 80021ca:	e794      	b.n	80020f6 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021cc:	6962      	ldr	r2, [r4, #20]
 80021ce:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021d0:	b182      	cbz	r2, 80021f4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80021d2:	2201      	movs	r2, #1
 80021d4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80021d8:	f7ff f9e4 	bl	80015a4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021dc:	4e40      	ldr	r6, [pc, #256]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80021de:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80021e2:	079f      	lsls	r7, r3, #30
 80021e4:	f53f af52 	bmi.w	800208c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e8:	f7ff f9dc 	bl	80015a4 <HAL_GetTick>
 80021ec:	1b40      	subs	r0, r0, r5
 80021ee:	2802      	cmp	r0, #2
 80021f0:	d9f6      	bls.n	80021e0 <HAL_RCC_OscConfig+0x170>
 80021f2:	e780      	b.n	80020f6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80021f4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80021f8:	f7ff f9d4 	bl	80015a4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4e38      	ldr	r6, [pc, #224]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80021fe:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002202:	0798      	lsls	r0, r3, #30
 8002204:	f57f af42 	bpl.w	800208c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002208:	f7ff f9cc 	bl	80015a4 <HAL_GetTick>
 800220c:	1b40      	subs	r0, r0, r5
 800220e:	2802      	cmp	r0, #2
 8002210:	d9f6      	bls.n	8002200 <HAL_RCC_OscConfig+0x190>
 8002212:	e770      	b.n	80020f6 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002218:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800221c:	d128      	bne.n	8002270 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	9201      	str	r2, [sp, #4]
 8002220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002222:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002232:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	4d2c      	ldr	r5, [pc, #176]	; (80022e8 <HAL_RCC_OscConfig+0x278>)
 8002236:	682b      	ldr	r3, [r5, #0]
 8002238:	05d9      	lsls	r1, r3, #23
 800223a:	d51b      	bpl.n	8002274 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	68a3      	ldr	r3, [r4, #8]
 800223e:	4d28      	ldr	r5, [pc, #160]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002240:	2b01      	cmp	r3, #1
 8002242:	d127      	bne.n	8002294 <HAL_RCC_OscConfig+0x224>
 8002244:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800224c:	f7ff f9aa 	bl	80015a4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	4e23      	ldr	r6, [pc, #140]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8002252:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800225a:	079b      	lsls	r3, r3, #30
 800225c:	d539      	bpl.n	80022d2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800225e:	2f00      	cmp	r7, #0
 8002260:	f43f af18 	beq.w	8002094 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002264:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002266:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
 800226e:	e711      	b.n	8002094 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002270:	2700      	movs	r7, #0
 8002272:	e7df      	b.n	8002234 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800227c:	f7ff f992 	bl	80015a4 <HAL_GetTick>
 8002280:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002282:	682b      	ldr	r3, [r5, #0]
 8002284:	05da      	lsls	r2, r3, #23
 8002286:	d4d9      	bmi.n	800223c <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002288:	f7ff f98c 	bl	80015a4 <HAL_GetTick>
 800228c:	1b80      	subs	r0, r0, r6
 800228e:	2802      	cmp	r0, #2
 8002290:	d9f7      	bls.n	8002282 <HAL_RCC_OscConfig+0x212>
 8002292:	e730      	b.n	80020f6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002294:	2b05      	cmp	r3, #5
 8002296:	d104      	bne.n	80022a2 <HAL_RCC_OscConfig+0x232>
 8002298:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	672b      	str	r3, [r5, #112]	; 0x70
 80022a0:	e7d0      	b.n	8002244 <HAL_RCC_OscConfig+0x1d4>
 80022a2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	672a      	str	r2, [r5, #112]	; 0x70
 80022aa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80022ac:	f022 0204 	bic.w	r2, r2, #4
 80022b0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1ca      	bne.n	800224c <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 80022b6:	f7ff f975 	bl	80015a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80022be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80022c2:	0798      	lsls	r0, r3, #30
 80022c4:	d5cb      	bpl.n	800225e <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7ff f96d 	bl	80015a4 <HAL_GetTick>
 80022ca:	1b80      	subs	r0, r0, r6
 80022cc:	4540      	cmp	r0, r8
 80022ce:	d9f7      	bls.n	80022c0 <HAL_RCC_OscConfig+0x250>
 80022d0:	e711      	b.n	80020f6 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7ff f967 	bl	80015a4 <HAL_GetTick>
 80022d6:	1b40      	subs	r0, r0, r5
 80022d8:	4540      	cmp	r0, r8
 80022da:	d9bd      	bls.n	8002258 <HAL_RCC_OscConfig+0x1e8>
 80022dc:	e70b      	b.n	80020f6 <HAL_RCC_OscConfig+0x86>
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	42470000 	.word	0x42470000
 80022e8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ec:	4d36      	ldr	r5, [pc, #216]	; (80023c8 <HAL_RCC_OscConfig+0x358>)
 80022ee:	68ab      	ldr	r3, [r5, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d03d      	beq.n	8002374 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f8:	4b34      	ldr	r3, [pc, #208]	; (80023cc <HAL_RCC_OscConfig+0x35c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80022fe:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002300:	d12b      	bne.n	800235a <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8002302:	f7ff f94f 	bl	80015a4 <HAL_GetTick>
 8002306:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002308:	682b      	ldr	r3, [r5, #0]
 800230a:	0199      	lsls	r1, r3, #6
 800230c:	d41f      	bmi.n	800234e <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800230e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002312:	4313      	orrs	r3, r2
 8002314:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002316:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800231a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800231c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002320:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002322:	0852      	lsrs	r2, r2, #1
 8002324:	3a01      	subs	r2, #1
 8002326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800232a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	4d26      	ldr	r5, [pc, #152]	; (80023c8 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8002330:	2201      	movs	r2, #1
 8002332:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002334:	f7ff f936 	bl	80015a4 <HAL_GetTick>
 8002338:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	682b      	ldr	r3, [r5, #0]
 800233c:	019a      	lsls	r2, r3, #6
 800233e:	f53f aead 	bmi.w	800209c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002342:	f7ff f92f 	bl	80015a4 <HAL_GetTick>
 8002346:	1b00      	subs	r0, r0, r4
 8002348:	2802      	cmp	r0, #2
 800234a:	d9f6      	bls.n	800233a <HAL_RCC_OscConfig+0x2ca>
 800234c:	e6d3      	b.n	80020f6 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234e:	f7ff f929 	bl	80015a4 <HAL_GetTick>
 8002352:	1b80      	subs	r0, r0, r6
 8002354:	2802      	cmp	r0, #2
 8002356:	d9d7      	bls.n	8002308 <HAL_RCC_OscConfig+0x298>
 8002358:	e6cd      	b.n	80020f6 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800235a:	f7ff f923 	bl	80015a4 <HAL_GetTick>
 800235e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	019b      	lsls	r3, r3, #6
 8002364:	f57f ae9a 	bpl.w	800209c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002368:	f7ff f91c 	bl	80015a4 <HAL_GetTick>
 800236c:	1b00      	subs	r0, r0, r4
 800236e:	2802      	cmp	r0, #2
 8002370:	d9f6      	bls.n	8002360 <HAL_RCC_OscConfig+0x2f0>
 8002372:	e6c0      	b.n	80020f6 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002374:	2801      	cmp	r0, #1
 8002376:	f43f aebf 	beq.w	80020f8 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 800237a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800237c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002382:	4291      	cmp	r1, r2
 8002384:	f47f aea1 	bne.w	80020ca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002388:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800238a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	428a      	cmp	r2, r1
 8002390:	f47f ae9b 	bne.w	80020ca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002394:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002396:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800239a:	401a      	ands	r2, r3
 800239c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80023a0:	f47f ae93 	bne.w	80020ca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023a6:	0852      	lsrs	r2, r2, #1
 80023a8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80023ac:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ae:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80023b2:	f47f ae8a 	bne.w	80020ca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023b8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023bc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80023c0:	f43f ae6c 	beq.w	800209c <HAL_RCC_OscConfig+0x2c>
 80023c4:	e681      	b.n	80020ca <HAL_RCC_OscConfig+0x5a>
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	42470000 	.word	0x42470000

080023d0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d0:	4913      	ldr	r1, [pc, #76]	; (8002420 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80023d2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d4:	688b      	ldr	r3, [r1, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d01c      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x48>
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d11c      	bne.n	800241c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ec:	bf14      	ite	ne
 80023ee:	480d      	ldrne	r0, [pc, #52]	; (8002424 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f0:	480d      	ldreq	r0, [pc, #52]	; (8002428 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80023f6:	bf18      	it	ne
 80023f8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fe:	fba1 0100 	umull	r0, r1, r1, r0
 8002402:	f7fe fbd9 	bl	8000bb8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCC_GetSysClockFreq+0x50>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800240e:	3301      	adds	r3, #1
 8002410:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002412:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002416:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <HAL_RCC_GetSysClockFreq+0x54>)
 800241a:	e7fc      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800241e:	e7fa      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x46>
 8002420:	40023800 	.word	0x40023800
 8002424:	007a1200 	.word	0x007a1200
 8002428:	00f42400 	.word	0x00f42400

0800242c <HAL_RCC_ClockConfig>:
{
 800242c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002430:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002432:	4604      	mov	r4, r0
 8002434:	b910      	cbnz	r0, 800243c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002436:	2001      	movs	r0, #1
}
 8002438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b44      	ldr	r3, [pc, #272]	; (8002550 <HAL_RCC_ClockConfig+0x124>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	f002 0207 	and.w	r2, r2, #7
 8002444:	428a      	cmp	r2, r1
 8002446:	d328      	bcc.n	800249a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	6822      	ldr	r2, [r4, #0]
 800244a:	0797      	lsls	r7, r2, #30
 800244c:	d42d      	bmi.n	80024aa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	07d0      	lsls	r0, r2, #31
 8002450:	d441      	bmi.n	80024d6 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002452:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_RCC_ClockConfig+0x124>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	f002 0207 	and.w	r2, r2, #7
 800245a:	42aa      	cmp	r2, r5
 800245c:	d866      	bhi.n	800252c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245e:	6822      	ldr	r2, [r4, #0]
 8002460:	0751      	lsls	r1, r2, #29
 8002462:	d46c      	bmi.n	800253e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002464:	0713      	lsls	r3, r2, #28
 8002466:	d507      	bpl.n	8002478 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002468:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <HAL_RCC_ClockConfig+0x128>)
 800246a:	6921      	ldr	r1, [r4, #16]
 800246c:	6893      	ldr	r3, [r2, #8]
 800246e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002472:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002476:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002478:	f7ff ffaa 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800247c:	4b35      	ldr	r3, [pc, #212]	; (8002554 <HAL_RCC_ClockConfig+0x128>)
 800247e:	4a36      	ldr	r2, [pc, #216]	; (8002558 <HAL_RCC_ClockConfig+0x12c>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	40d8      	lsrs	r0, r3
 800248a:	4b34      	ldr	r3, [pc, #208]	; (800255c <HAL_RCC_ClockConfig+0x130>)
 800248c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800248e:	4b34      	ldr	r3, [pc, #208]	; (8002560 <HAL_RCC_ClockConfig+0x134>)
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	f7ff f83d 	bl	8001510 <HAL_InitTick>
  return HAL_OK;
 8002496:	2000      	movs	r0, #0
 8002498:	e7ce      	b.n	8002438 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	b2ca      	uxtb	r2, r1
 800249c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	428b      	cmp	r3, r1
 80024a6:	d1c6      	bne.n	8002436 <HAL_RCC_ClockConfig+0xa>
 80024a8:	e7ce      	b.n	8002448 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024aa:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_RCC_ClockConfig+0x128>)
 80024ac:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b0:	bf1e      	ittt	ne
 80024b2:	6899      	ldrne	r1, [r3, #8]
 80024b4:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80024b8:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024bc:	bf42      	ittt	mi
 80024be:	6899      	ldrmi	r1, [r3, #8]
 80024c0:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80024c4:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c6:	4923      	ldr	r1, [pc, #140]	; (8002554 <HAL_RCC_ClockConfig+0x128>)
 80024c8:	68a0      	ldr	r0, [r4, #8]
 80024ca:	688b      	ldr	r3, [r1, #8]
 80024cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024d0:	4303      	orrs	r3, r0
 80024d2:	608b      	str	r3, [r1, #8]
 80024d4:	e7bb      	b.n	800244e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	6862      	ldr	r2, [r4, #4]
 80024d8:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <HAL_RCC_ClockConfig+0x128>)
 80024da:	2a01      	cmp	r2, #1
 80024dc:	d11c      	bne.n	8002518 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	d0a7      	beq.n	8002436 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	4e1b      	ldr	r6, [pc, #108]	; (8002554 <HAL_RCC_ClockConfig+0x128>)
 80024e8:	68b3      	ldr	r3, [r6, #8]
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80024f2:	f7ff f857 	bl	80015a4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80024fa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fc:	68b3      	ldr	r3, [r6, #8]
 80024fe:	6862      	ldr	r2, [r4, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002508:	d0a3      	beq.n	8002452 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250a:	f7ff f84b 	bl	80015a4 <HAL_GetTick>
 800250e:	1bc0      	subs	r0, r0, r7
 8002510:	4540      	cmp	r0, r8
 8002512:	d9f3      	bls.n	80024fc <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002514:	2003      	movs	r0, #3
 8002516:	e78f      	b.n	8002438 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002518:	1e91      	subs	r1, r2, #2
 800251a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251e:	d802      	bhi.n	8002526 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002520:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002524:	e7de      	b.n	80024e4 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	f013 0f02 	tst.w	r3, #2
 800252a:	e7db      	b.n	80024e4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252c:	b2ea      	uxtb	r2, r5
 800252e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	42ab      	cmp	r3, r5
 8002538:	f47f af7d 	bne.w	8002436 <HAL_RCC_ClockConfig+0xa>
 800253c:	e78f      	b.n	800245e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253e:	4905      	ldr	r1, [pc, #20]	; (8002554 <HAL_RCC_ClockConfig+0x128>)
 8002540:	68e0      	ldr	r0, [r4, #12]
 8002542:	688b      	ldr	r3, [r1, #8]
 8002544:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002548:	4303      	orrs	r3, r0
 800254a:	608b      	str	r3, [r1, #8]
 800254c:	e78a      	b.n	8002464 <HAL_RCC_ClockConfig+0x38>
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00
 8002554:	40023800 	.word	0x40023800
 8002558:	080097ec 	.word	0x080097ec
 800255c:	20000000 	.word	0x20000000
 8002560:	20000008 	.word	0x20000008

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	4a03      	ldr	r2, [pc, #12]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002572:	6810      	ldr	r0, [r2, #0]
}
 8002574:	40d8      	lsrs	r0, r3
 8002576:	4770      	bx	lr
 8002578:	40023800 	.word	0x40023800
 800257c:	080097fc 	.word	0x080097fc
 8002580:	20000000 	.word	0x20000000

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002586:	4a05      	ldr	r2, [pc, #20]	; (800259c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	4a03      	ldr	r2, [pc, #12]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002592:	6810      	ldr	r0, [r2, #0]
}
 8002594:	40d8      	lsrs	r0, r3
 8002596:	4770      	bx	lr
 8002598:	40023800 	.word	0x40023800
 800259c:	080097fc 	.word	0x080097fc
 80025a0:	20000000 	.word	0x20000000

080025a4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d128      	bne.n	80025fe <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	2302      	movs	r3, #2
 80025ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b2:	6803      	ldr	r3, [r0, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025bc:	4a11      	ldr	r2, [pc, #68]	; (8002604 <HAL_TIM_Base_Start_IT+0x60>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d012      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x44>
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d00f      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x44>
 80025c8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00b      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x44>
 80025d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x44>
 80025d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025dc:	4293      	cmp	r3, r2
 80025de:	d003      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x44>
 80025e0:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d104      	bne.n	80025f2 <HAL_TIM_Base_Start_IT+0x4e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ee:	2a06      	cmp	r2, #6
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2000      	movs	r0, #0
}
 80025fc:	4770      	bx	lr
    return HAL_ERROR;
 80025fe:	2001      	movs	r0, #1
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40010000 	.word	0x40010000

08002608 <HAL_TIM_OC_DelayElapsedCallback>:
 8002608:	4770      	bx	lr

0800260a <HAL_TIM_IC_CaptureCallback>:
 800260a:	4770      	bx	lr

0800260c <HAL_TIM_PWM_PulseFinishedCallback>:
 800260c:	4770      	bx	lr

0800260e <HAL_TIM_TriggerCallback>:
 800260e:	4770      	bx	lr

08002610 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002610:	6803      	ldr	r3, [r0, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	0791      	lsls	r1, r2, #30
{
 8002616:	b510      	push	{r4, lr}
 8002618:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800261a:	d50e      	bpl.n	800263a <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	0792      	lsls	r2, r2, #30
 8002620:	d50b      	bpl.n	800263a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002622:	f06f 0202 	mvn.w	r2, #2
 8002626:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002628:	2201      	movs	r2, #1
 800262a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	079b      	lsls	r3, r3, #30
 8002630:	d077      	beq.n	8002722 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002632:	f7ff ffea 	bl	800260a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	2300      	movs	r3, #0
 8002638:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	0750      	lsls	r0, r2, #29
 8002640:	d510      	bpl.n	8002664 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	0751      	lsls	r1, r2, #29
 8002646:	d50d      	bpl.n	8002664 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002648:	f06f 0204 	mvn.w	r2, #4
 800264c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800264e:	2202      	movs	r2, #2
 8002650:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002658:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800265a:	d068      	beq.n	800272e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800265c:	f7ff ffd5 	bl	800260a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002660:	2300      	movs	r3, #0
 8002662:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	0712      	lsls	r2, r2, #28
 800266a:	d50f      	bpl.n	800268c <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	0710      	lsls	r0, r2, #28
 8002670:	d50c      	bpl.n	800268c <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002672:	f06f 0208 	mvn.w	r2, #8
 8002676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002678:	2204      	movs	r2, #4
 800267a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002680:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002682:	d05a      	beq.n	800273a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002684:	f7ff ffc1 	bl	800260a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002688:	2300      	movs	r3, #0
 800268a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	06d2      	lsls	r2, r2, #27
 8002692:	d510      	bpl.n	80026b6 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	06d0      	lsls	r0, r2, #27
 8002698:	d50d      	bpl.n	80026b6 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800269a:	f06f 0210 	mvn.w	r2, #16
 800269e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026a0:	2208      	movs	r2, #8
 80026a2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026aa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ac:	d04b      	beq.n	8002746 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	f7ff ffac 	bl	800260a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b2:	2300      	movs	r3, #0
 80026b4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	07d1      	lsls	r1, r2, #31
 80026bc:	d508      	bpl.n	80026d0 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	07d2      	lsls	r2, r2, #31
 80026c2:	d505      	bpl.n	80026d0 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026c4:	f06f 0201 	mvn.w	r2, #1
 80026c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ca:	4620      	mov	r0, r4
 80026cc:	f000 fb4c 	bl	8002d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	0610      	lsls	r0, r2, #24
 80026d6:	d508      	bpl.n	80026ea <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	0611      	lsls	r1, r2, #24
 80026dc:	d505      	bpl.n	80026ea <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026e4:	4620      	mov	r0, r4
 80026e6:	f000 f98c 	bl	8002a02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	0652      	lsls	r2, r2, #25
 80026f0:	d508      	bpl.n	8002704 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	0650      	lsls	r0, r2, #25
 80026f6:	d505      	bpl.n	8002704 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026fe:	4620      	mov	r0, r4
 8002700:	f7ff ff85 	bl	800260e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	0691      	lsls	r1, r2, #26
 800270a:	d522      	bpl.n	8002752 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	0692      	lsls	r2, r2, #26
 8002710:	d51f      	bpl.n	8002752 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002712:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002716:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002718:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800271a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800271e:	f000 b96f 	b.w	8002a00 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	f7ff ff71 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002726:	4620      	mov	r0, r4
 8002728:	f7ff ff70 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
 800272c:	e783      	b.n	8002636 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	f7ff ff6b 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002732:	4620      	mov	r0, r4
 8002734:	f7ff ff6a 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
 8002738:	e792      	b.n	8002660 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	f7ff ff65 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273e:	4620      	mov	r0, r4
 8002740:	f7ff ff64 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
 8002744:	e7a0      	b.n	8002688 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	f7ff ff5f 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274a:	4620      	mov	r0, r4
 800274c:	f7ff ff5e 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
 8002750:	e7af      	b.n	80026b2 <HAL_TIM_IRQHandler+0xa2>
}
 8002752:	bd10      	pop	{r4, pc}

08002754 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002754:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8002756:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002758:	4290      	cmp	r0, r2
 800275a:	d00e      	beq.n	800277a <TIM_Base_SetConfig+0x26>
 800275c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002760:	d00b      	beq.n	800277a <TIM_Base_SetConfig+0x26>
 8002762:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002766:	4290      	cmp	r0, r2
 8002768:	d007      	beq.n	800277a <TIM_Base_SetConfig+0x26>
 800276a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800276e:	4290      	cmp	r0, r2
 8002770:	d003      	beq.n	800277a <TIM_Base_SetConfig+0x26>
 8002772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002776:	4290      	cmp	r0, r2
 8002778:	d115      	bne.n	80027a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800277a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002780:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002782:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <TIM_Base_SetConfig+0x94>)
 8002784:	4290      	cmp	r0, r2
 8002786:	d019      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 8002788:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800278c:	d016      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 800278e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002792:	4290      	cmp	r0, r2
 8002794:	d012      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 8002796:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800279a:	4290      	cmp	r0, r2
 800279c:	d00e      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 800279e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027a2:	4290      	cmp	r0, r2
 80027a4:	d00a      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 80027a6:	4a11      	ldr	r2, [pc, #68]	; (80027ec <TIM_Base_SetConfig+0x98>)
 80027a8:	4290      	cmp	r0, r2
 80027aa:	d007      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 80027ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027b0:	4290      	cmp	r0, r2
 80027b2:	d003      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 80027b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027b8:	4290      	cmp	r0, r2
 80027ba:	d103      	bne.n	80027c4 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027bc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80027be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c4:	694a      	ldr	r2, [r1, #20]
 80027c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80027cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ce:	688b      	ldr	r3, [r1, #8]
 80027d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d2:	680b      	ldr	r3, [r1, #0]
 80027d4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <TIM_Base_SetConfig+0x94>)
 80027d8:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027da:	bf04      	itt	eq
 80027dc:	690b      	ldreq	r3, [r1, #16]
 80027de:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027e0:	2301      	movs	r3, #1
 80027e2:	6143      	str	r3, [r0, #20]
}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40010000 	.word	0x40010000
 80027ec:	40014000 	.word	0x40014000

080027f0 <HAL_TIM_Base_Init>:
{
 80027f0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80027f2:	4604      	mov	r4, r0
 80027f4:	b330      	cbz	r0, 8002844 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80027f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027fe:	b91b      	cbnz	r3, 8002808 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002800:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002804:	f7fe fde6 	bl	80013d4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002810:	1d21      	adds	r1, r4, #4
 8002812:	f7ff ff9f 	bl	8002754 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002816:	2301      	movs	r3, #1
 8002818:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 800281c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002822:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002826:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800282a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002836:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800283a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800283e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002842:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002844:	2001      	movs	r0, #1
 8002846:	e7fc      	b.n	8002842 <HAL_TIM_Base_Init+0x52>

08002848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002848:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800284a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800284c:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800284e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002852:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002856:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002858:	6083      	str	r3, [r0, #8]
}
 800285a:	bd10      	pop	{r4, pc}

0800285c <HAL_TIM_ConfigClockSource>:
{
 800285c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800285e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002862:	2b01      	cmp	r3, #1
{
 8002864:	4604      	mov	r4, r0
 8002866:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800286a:	f000 8091 	beq.w	8002990 <HAL_TIM_ConfigClockSource+0x134>
 800286e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002874:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002878:	6800      	ldr	r0, [r0, #0]
 800287a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800287c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002880:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002884:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002886:	680b      	ldr	r3, [r1, #0]
 8002888:	2b60      	cmp	r3, #96	; 0x60
 800288a:	d052      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0xd6>
 800288c:	d833      	bhi.n	80028f6 <HAL_TIM_ConfigClockSource+0x9a>
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d067      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x106>
 8002892:	d816      	bhi.n	80028c2 <HAL_TIM_ConfigClockSource+0x66>
 8002894:	2b20      	cmp	r3, #32
 8002896:	d00d      	beq.n	80028b4 <HAL_TIM_ConfigClockSource+0x58>
 8002898:	d80a      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x54>
 800289a:	f033 0110 	bics.w	r1, r3, #16
 800289e:	d009      	beq.n	80028b4 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80028a6:	2300      	movs	r3, #0
 80028a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80028ac:	4610      	mov	r0, r2
 80028ae:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80028b0:	2b30      	cmp	r3, #48	; 0x30
 80028b2:	d1f5      	bne.n	80028a0 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80028b4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80028b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f043 0307 	orr.w	r3, r3, #7
 80028c0:	e017      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80028c2:	2b50      	cmp	r3, #80	; 0x50
 80028c4:	d1ec      	bne.n	80028a0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c6:	684a      	ldr	r2, [r1, #4]
 80028c8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80028ca:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028cc:	6a05      	ldr	r5, [r0, #32]
 80028ce:	f025 0501 	bic.w	r5, r5, #1
 80028d2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028d6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028de:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80028e2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80028e4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80028e6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80028e8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ee:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80028f2:	6083      	str	r3, [r0, #8]
 80028f4:	e011      	b.n	800291a <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fa:	d00e      	beq.n	800291a <HAL_TIM_ConfigClockSource+0xbe>
 80028fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002900:	d00d      	beq.n	800291e <HAL_TIM_ConfigClockSource+0xc2>
 8002902:	2b70      	cmp	r3, #112	; 0x70
 8002904:	d1cc      	bne.n	80028a0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8002906:	68cb      	ldr	r3, [r1, #12]
 8002908:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800290c:	f7ff ff9c 	bl	8002848 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002910:	6822      	ldr	r2, [r4, #0]
 8002912:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002918:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	2200      	movs	r2, #0
 800291c:	e7c0      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800291e:	68cb      	ldr	r3, [r1, #12]
 8002920:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002924:	f7ff ff90 	bl	8002848 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002928:	6822      	ldr	r2, [r4, #0]
 800292a:	6893      	ldr	r3, [r2, #8]
 800292c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002930:	e7f2      	b.n	8002918 <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002932:	684d      	ldr	r5, [r1, #4]
 8002934:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002936:	6a01      	ldr	r1, [r0, #32]
 8002938:	f021 0110 	bic.w	r1, r1, #16
 800293c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002940:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002942:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002946:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800294a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800294e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002952:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002954:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002956:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800295c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002960:	e7c7      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002962:	684a      	ldr	r2, [r1, #4]
 8002964:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002966:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002968:	6a05      	ldr	r5, [r0, #32]
 800296a:	f025 0501 	bic.w	r5, r5, #1
 800296e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002970:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002972:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800297a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800297e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002980:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002982:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002984:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800298a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800298e:	e7b0      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8002990:	461a      	mov	r2, r3
 8002992:	e78b      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x50>

08002994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002994:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002996:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800299a:	2b01      	cmp	r3, #1
 800299c:	f04f 0302 	mov.w	r3, #2
 80029a0:	d02a      	beq.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029a6:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80029aa:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80029ac:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80029ae:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b2:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029b4:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b6:	4c11      	ldr	r4, [pc, #68]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80029b8:	42a3      	cmp	r3, r4
 80029ba:	d012      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c0:	d00f      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80029c2:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80029c6:	42a3      	cmp	r3, r4
 80029c8:	d00b      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80029ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029ce:	42a3      	cmp	r3, r4
 80029d0:	d007      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80029d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029d6:	42a3      	cmp	r3, r4
 80029d8:	d003      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80029da:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80029de:	42a3      	cmp	r3, r4
 80029e0:	d104      	bne.n	80029ec <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e8:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f2:	2300      	movs	r3, #0
 80029f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80029f8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80029fa:	bd30      	pop	{r4, r5, pc}
 80029fc:	40010000 	.word	0x40010000

08002a00 <HAL_TIMEx_CommutCallback>:
 8002a00:	4770      	bx	lr

08002a02 <HAL_TIMEx_BreakCallback>:
 8002a02:	4770      	bx	lr

08002a04 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a04:	6802      	ldr	r2, [r0, #0]
 8002a06:	68c1      	ldr	r1, [r0, #12]
 8002a08:	6913      	ldr	r3, [r2, #16]
 8002a0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a0e:	430b      	orrs	r3, r1
{
 8002a10:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a12:	6113      	str	r3, [r2, #16]
{
 8002a14:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a16:	6883      	ldr	r3, [r0, #8]
 8002a18:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002a1a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a1c:	4303      	orrs	r3, r0
 8002a1e:	6968      	ldr	r0, [r5, #20]
 8002a20:	4303      	orrs	r3, r0
 8002a22:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002a24:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002a28:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a2c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a32:	6953      	ldr	r3, [r2, #20]
 8002a34:	69a9      	ldr	r1, [r5, #24]
 8002a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <UART_SetConfig+0xb8>)
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d003      	beq.n	8002a4c <UART_SetConfig+0x48>
 8002a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d123      	bne.n	8002a94 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a4c:	f7ff fd9a 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a50:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a52:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a58:	e9d5 4600 	ldrd	r4, r6, [r5]
 8002a5c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a60:	d11b      	bne.n	8002a9a <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a62:	19b2      	adds	r2, r6, r6
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	415b      	adcs	r3, r3
 8002a6a:	f7fe f8a5 	bl	8000bb8 <__aeabi_uldivmod>
 8002a6e:	2164      	movs	r1, #100	; 0x64
 8002a70:	fbb0 f5f1 	udiv	r5, r0, r1
 8002a74:	fb01 0315 	mls	r3, r1, r5, r0
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	3332      	adds	r3, #50	; 0x32
 8002a7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a80:	f003 0207 	and.w	r2, r3, #7
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8002a8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a8e:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a90:	60a3      	str	r3, [r4, #8]
  }
}
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a94:	f7ff fd66 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8002a98:	e7da      	b.n	8002a50 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a9a:	00b2      	lsls	r2, r6, #2
 8002a9c:	0fb3      	lsrs	r3, r6, #30
 8002a9e:	f7fe f88b 	bl	8000bb8 <__aeabi_uldivmod>
 8002aa2:	2264      	movs	r2, #100	; 0x64
 8002aa4:	fbb0 f1f2 	udiv	r1, r0, r2
 8002aa8:	fb02 0311 	mls	r3, r2, r1, r0
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	3332      	adds	r3, #50	; 0x32
 8002ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ab4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002ab8:	e7ea      	b.n	8002a90 <UART_SetConfig+0x8c>
 8002aba:	bf00      	nop
 8002abc:	40011000 	.word	0x40011000

08002ac0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	460e      	mov	r6, r1
 8002ac6:	4617      	mov	r7, r2
 8002ac8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aca:	6822      	ldr	r2, [r4, #0]
 8002acc:	6813      	ldr	r3, [r2, #0]
 8002ace:	ea36 0303 	bics.w	r3, r6, r3
 8002ad2:	d101      	bne.n	8002ad8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	e028      	b.n	8002b2a <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002ad8:	1c6b      	adds	r3, r5, #1
 8002ada:	d0f7      	beq.n	8002acc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002adc:	b125      	cbz	r5, 8002ae8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8002ade:	f7fe fd61 	bl	80015a4 <HAL_GetTick>
 8002ae2:	1bc0      	subs	r0, r0, r7
 8002ae4:	4285      	cmp	r5, r0
 8002ae6:	d2f0      	bcs.n	8002aca <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ae8:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	f102 030c 	add.w	r3, r2, #12
 8002aee:	e853 3f00 	ldrex	r3, [r3]
 8002af2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af6:	320c      	adds	r2, #12
 8002af8:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8002afc:	6821      	ldr	r1, [r4, #0]
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d1f2      	bne.n	8002ae8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	f101 0314 	add.w	r3, r1, #20
 8002b06:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	f101 0014 	add.w	r0, r1, #20
 8002b12:	e840 3200 	strex	r2, r3, [r0]
 8002b16:	2a00      	cmp	r2, #0
 8002b18:	d1f3      	bne.n	8002b02 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8002b20:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8002b24:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002b28:	2003      	movs	r0, #3
}
 8002b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b2c <HAL_UART_Init>:
{
 8002b2c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002b2e:	4604      	mov	r4, r0
 8002b30:	b340      	cbz	r0, 8002b84 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002b32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b3a:	b91b      	cbnz	r3, 8002b44 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002b3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002b40:	f7fe fc86 	bl	8001450 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002b44:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b46:	2324      	movs	r3, #36	; 0x24
 8002b48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002b4c:	68d3      	ldr	r3, [r2, #12]
 8002b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b52:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002b54:	4620      	mov	r0, r4
 8002b56:	f7ff ff55 	bl	8002a04 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b6a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b72:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b74:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002b76:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b78:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002b82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b84:	2001      	movs	r0, #1
 8002b86:	e7fc      	b.n	8002b82 <HAL_UART_Init+0x56>

08002b88 <HAL_UART_Transmit>:
{
 8002b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b8a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002b8c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8002b90:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8002b92:	2a20      	cmp	r2, #32
{
 8002b94:	4604      	mov	r4, r0
 8002b96:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002b98:	d149      	bne.n	8002c2e <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8002b9a:	2900      	cmp	r1, #0
 8002b9c:	d045      	beq.n	8002c2a <HAL_UART_Transmit+0xa2>
 8002b9e:	2f00      	cmp	r7, #0
 8002ba0:	d043      	beq.n	8002c2a <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8002ba2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002ba6:	2a01      	cmp	r2, #1
 8002ba8:	d041      	beq.n	8002c2e <HAL_UART_Transmit+0xa6>
 8002baa:	2201      	movs	r2, #1
 8002bac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb0:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb2:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb4:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002bba:	f7fe fcf3 	bl	80015a4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bbe:	68a1      	ldr	r1, [r4, #8]
 8002bc0:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8002bc2:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002bc8:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8002bca:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bcc:	d103      	bne.n	8002bd6 <HAL_UART_Transmit+0x4e>
 8002bce:	6921      	ldr	r1, [r4, #16]
 8002bd0:	b909      	cbnz	r1, 8002bd6 <HAL_UART_Transmit+0x4e>
 8002bd2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002bd4:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002bdc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002bde:	b289      	uxth	r1, r1
 8002be0:	b941      	cbnz	r1, 8002bf4 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002be2:	2140      	movs	r1, #64	; 0x40
 8002be4:	4620      	mov	r0, r4
 8002be6:	f7ff ff6b 	bl	8002ac0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002bea:	b960      	cbnz	r0, 8002c06 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002bec:	2320      	movs	r3, #32
 8002bee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002bf2:	e009      	b.n	8002c08 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	e9cd 2300 	strd	r2, r3, [sp]
 8002bfc:	f7ff ff60 	bl	8002ac0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c04:	b110      	cbz	r0, 8002c0c <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002c06:	2003      	movs	r0, #3
}
 8002c08:	b003      	add	sp, #12
 8002c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c0c:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8002c0e:	b94e      	cbnz	r6, 8002c24 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c10:	f835 1b02 	ldrh.w	r1, [r5], #2
 8002c14:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c18:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8002c1a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002c1c:	3901      	subs	r1, #1
 8002c1e:	b289      	uxth	r1, r1
 8002c20:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002c22:	e7db      	b.n	8002bdc <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c24:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002c28:	e7f6      	b.n	8002c18 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	e7ec      	b.n	8002c08 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002c2e:	2002      	movs	r0, #2
 8002c30:	e7ea      	b.n	8002c08 <HAL_UART_Transmit+0x80>
	...

08002c34 <acquire_and_process_data>:
float samples[270] = {0};



void acquire_and_process_data(void)
{
 8002c34:	b508      	push	{r3, lr}
	ai_i8* ptr = data_in_1;

	for(uint16_t i = 0;i<270;i++)
	{
		memcpy(ptr, (ai_i8*)&samples[i],4);
 8002c36:	4903      	ldr	r1, [pc, #12]	; (8002c44 <acquire_and_process_data+0x10>)
 8002c38:	4803      	ldr	r0, [pc, #12]	; (8002c48 <acquire_and_process_data+0x14>)
 8002c3a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8002c3e:	f003 fd37 	bl	80066b0 <memcpy>
		ptr += 4;
	}

}
 8002c42:	bd08      	pop	{r3, pc}
 8002c44:	200070a0 	.word	0x200070a0
 8002c48:	20000c38 	.word	0x20000c38

08002c4c <post_process>:



void post_process(void)
{
 8002c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t buf[30];
	float possibility[6];
	const char* labels[] = {"Downstairs","Jogging","Sitting","Standing","Upstairs","Walking"};
 8002c50:	4d3d      	ldr	r5, [pc, #244]	; (8002d48 <post_process+0xfc>)
 8002c52:	4f3e      	ldr	r7, [pc, #248]	; (8002d4c <post_process+0x100>)

	for(uint8_t i = 0;i < 6;i++)
	{
		possibility[i] = *(float*)&data_out_1[i*4];

		MY_PRINTF(buf,"%.2f ",possibility[i]);
 8002c54:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8002d64 <post_process+0x118>
 8002c58:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8002d54 <post_process+0x108>
	const char* labels[] = {"Downstairs","Jogging","Sitting","Standing","Upstairs","Walking"};
 8002c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 8002c5e:	ed2d 8b02 	vpush	{d8}
 8002c62:	b096      	sub	sp, #88	; 0x58
	const char* labels[] = {"Downstairs","Jogging","Sitting","Standing","Upstairs","Walking"};
 8002c64:	ac08      	add	r4, sp, #32
 8002c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c6c:	e884 0003 	stmia.w	r4, {r0, r1}
	MY_PRINTF(buf,"\r\n-----------------------------------\r\n");
 8002c70:	4937      	ldr	r1, [pc, #220]	; (8002d50 <post_process+0x104>)
 8002c72:	a80e      	add	r0, sp, #56	; 0x38
 8002c74:	f004 faa4 	bl	80071c0 <siprintf>
 8002c78:	a80e      	add	r0, sp, #56	; 0x38
 8002c7a:	f7fd fab1 	bl	80001e0 <strlen>
 8002c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c82:	b282      	uxth	r2, r0
 8002c84:	a90e      	add	r1, sp, #56	; 0x38
 8002c86:	4833      	ldr	r0, [pc, #204]	; (8002d54 <post_process+0x108>)
 8002c88:	f7ff ff7e 	bl	8002b88 <HAL_UART_Transmit>
 8002c8c:	2500      	movs	r5, #0
 8002c8e:	ae02      	add	r6, sp, #8
	uint8_t max_possibility_index = 0;
 8002c90:	462c      	mov	r4, r5
		possibility[i] = *(float*)&data_out_1[i*4];
 8002c92:	ecb7 8a01 	vldmia	r7!, {s16}
		MY_PRINTF(buf,"%.2f ",possibility[i]);
 8002c96:	ee18 0a10 	vmov	r0, s16
		possibility[i] = *(float*)&data_out_1[i*4];
 8002c9a:	eca6 8a01 	vstmia	r6!, {s16}
		MY_PRINTF(buf,"%.2f ",possibility[i]);
 8002c9e:	f7fd fc5b 	bl	8000558 <__aeabi_f2d>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	a80e      	add	r0, sp, #56	; 0x38
 8002ca8:	4651      	mov	r1, sl
 8002caa:	f004 fa89 	bl	80071c0 <siprintf>
 8002cae:	a80e      	add	r0, sp, #56	; 0x38
 8002cb0:	f7fd fa96 	bl	80001e0 <strlen>
 8002cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb8:	b282      	uxth	r2, r0
 8002cba:	a90e      	add	r1, sp, #56	; 0x38
 8002cbc:	4648      	mov	r0, r9
 8002cbe:	f7ff ff63 	bl	8002b88 <HAL_UART_Transmit>
		if(possibility[max_possibility_index]<possibility[i])
 8002cc2:	ab16      	add	r3, sp, #88	; 0x58
 8002cc4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002cc8:	ed53 7a14 	vldr	s15, [r3, #-80]	; 0xffffffb0
 8002ccc:	eeb4 8a67 	vcmp.f32	s16, s15
 8002cd0:	fa5f f885 	uxtb.w	r8, r5
 8002cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	for(uint8_t i = 0;i < 6;i++)
 8002cd8:	f105 0501 	add.w	r5, r5, #1
		if(possibility[max_possibility_index]<possibility[i])
 8002cdc:	bfc8      	it	gt
 8002cde:	4644      	movgt	r4, r8
	for(uint8_t i = 0;i < 6;i++)
 8002ce0:	2d06      	cmp	r5, #6
 8002ce2:	d1d6      	bne.n	8002c92 <post_process+0x46>
			max_possibility_index = i;

	}

	MY_PRINTF(buf,"%s %.2f%%\r\n",labels[max_possibility_index],possibility[max_possibility_index]*100.0f);
 8002ce4:	ab16      	add	r3, sp, #88	; 0x58
 8002ce6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002cea:	ed14 7a14 	vldr	s14, [r4, #-80]	; 0xffffffb0
 8002cee:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8002d58 <post_process+0x10c>
 8002cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf6:	ee17 0a90 	vmov	r0, s15
 8002cfa:	f7fd fc2d 	bl	8000558 <__aeabi_f2d>
 8002cfe:	e9cd 0100 	strd	r0, r1, [sp]
 8002d02:	4916      	ldr	r1, [pc, #88]	; (8002d5c <post_process+0x110>)
 8002d04:	f854 2c38 	ldr.w	r2, [r4, #-56]
 8002d08:	a80e      	add	r0, sp, #56	; 0x38
 8002d0a:	f004 fa59 	bl	80071c0 <siprintf>
 8002d0e:	a80e      	add	r0, sp, #56	; 0x38
 8002d10:	f7fd fa66 	bl	80001e0 <strlen>
 8002d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d18:	b282      	uxth	r2, r0
 8002d1a:	a90e      	add	r1, sp, #56	; 0x38
 8002d1c:	480d      	ldr	r0, [pc, #52]	; (8002d54 <post_process+0x108>)
 8002d1e:	f7ff ff33 	bl	8002b88 <HAL_UART_Transmit>
	MY_PRINTF(buf,"-----------------------------------\r\n");
 8002d22:	490f      	ldr	r1, [pc, #60]	; (8002d60 <post_process+0x114>)
 8002d24:	a80e      	add	r0, sp, #56	; 0x38
 8002d26:	f004 fa4b 	bl	80071c0 <siprintf>
 8002d2a:	a80e      	add	r0, sp, #56	; 0x38
 8002d2c:	f7fd fa58 	bl	80001e0 <strlen>
 8002d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d34:	b282      	uxth	r2, r0
 8002d36:	a90e      	add	r1, sp, #56	; 0x38
 8002d38:	4806      	ldr	r0, [pc, #24]	; (8002d54 <post_process+0x108>)
 8002d3a:	f7ff ff25 	bl	8002b88 <HAL_UART_Transmit>

}
 8002d3e:	b016      	add	sp, #88	; 0x58
 8002d40:	ecbd 8b02 	vpop	{d8}
 8002d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d48:	080097c0 	.word	0x080097c0
 8002d4c:	20001070 	.word	0x20001070
 8002d50:	08009839 	.word	0x08009839
 8002d54:	20000be4 	.word	0x20000be4
 8002d58:	42c80000 	.word	0x42c80000
 8002d5c:	08009867 	.word	0x08009867
 8002d60:	0800983b 	.word	0x0800983b
 8002d64:	08009861 	.word	0x08009861

08002d68 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LSM303DLHC_AccReadXYZ(buf_acc);
	ax = -buf_acc[1];
	ay = -buf_acc[0];
	az = buf_acc[2];

	if(ai_proc_flag==RESET)
 8002d6c:	4e29      	ldr	r6, [pc, #164]	; (8002e14 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d6e:	4d2a      	ldr	r5, [pc, #168]	; (8002e18 <HAL_TIM_PeriodElapsedCallback+0xb0>)
{
 8002d70:	b092      	sub	sp, #72	; 0x48
	LSM303DLHC_AccReadXYZ(buf_acc);
 8002d72:	a807      	add	r0, sp, #28
 8002d74:	f7fe f9a6 	bl	80010c4 <LSM303DLHC_AccReadXYZ>
	if(ai_proc_flag==RESET)
 8002d78:	7833      	ldrb	r3, [r6, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d140      	bne.n	8002e00 <HAL_TIM_PeriodElapsedCallback+0x98>
	ax = -buf_acc[1];
 8002d7e:	eddd 7a08 	vldr	s15, [sp, #32]
	{
		samples[index++] = ax;
 8002d82:	4a26      	ldr	r2, [pc, #152]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002d84:	882b      	ldrh	r3, [r5, #0]
	az = buf_acc[2];
 8002d86:	9809      	ldr	r0, [sp, #36]	; 0x24
	ax = -buf_acc[1];
 8002d88:	eef1 7a67 	vneg.f32	s15, s15
		samples[index++] = ax;
 8002d8c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
	ax = -buf_acc[1];
 8002d90:	ee17 7a90 	vmov	r7, s15
	ay = -buf_acc[0];
 8002d94:	eddd 7a07 	vldr	s15, [sp, #28]
		samples[index++] = ax;
 8002d98:	600f      	str	r7, [r1, #0]
 8002d9a:	1c59      	adds	r1, r3, #1
		samples[index++] = ay;
 8002d9c:	b289      	uxth	r1, r1
	ay = -buf_acc[0];
 8002d9e:	eef1 7a67 	vneg.f32	s15, s15
		samples[index++] = ay;
 8002da2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8002da6:	edc1 7a00 	vstr	s15, [r1]
		samples[index++] = az;
 8002daa:	1cd9      	adds	r1, r3, #3
		samples[index++] = ay;
 8002dac:	3302      	adds	r3, #2
		samples[index++] = az;
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	ay = -buf_acc[0];
 8002db4:	ee17 8a90 	vmov	r8, s15
		samples[index++] = az;
 8002db8:	6018      	str	r0, [r3, #0]

		MY_PRINTF(buf,"%d %.1f  %.1f  %.1f\r\n",++cnt,ax,ay,az);
 8002dba:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		samples[index++] = az;
 8002dbc:	8029      	strh	r1, [r5, #0]
		MY_PRINTF(buf,"%d %.1f  %.1f  %.1f\r\n",++cnt,ax,ay,az);
 8002dbe:	881c      	ldrh	r4, [r3, #0]
 8002dc0:	3401      	adds	r4, #1
 8002dc2:	b2a4      	uxth	r4, r4
 8002dc4:	801c      	strh	r4, [r3, #0]
 8002dc6:	f7fd fbc7 	bl	8000558 <__aeabi_f2d>
 8002dca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002dce:	4640      	mov	r0, r8
 8002dd0:	f7fd fbc2 	bl	8000558 <__aeabi_f2d>
 8002dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dd8:	4638      	mov	r0, r7
 8002dda:	f7fd fbbd 	bl	8000558 <__aeabi_f2d>
 8002dde:	4622      	mov	r2, r4
 8002de0:	e9cd 0100 	strd	r0, r1, [sp]
 8002de4:	490f      	ldr	r1, [pc, #60]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002de6:	a80a      	add	r0, sp, #40	; 0x28
 8002de8:	f004 f9ea 	bl	80071c0 <siprintf>
 8002dec:	a80a      	add	r0, sp, #40	; 0x28
 8002dee:	f7fd f9f7 	bl	80001e0 <strlen>
 8002df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002df6:	b282      	uxth	r2, r0
 8002df8:	a90a      	add	r1, sp, #40	; 0x28
 8002dfa:	480b      	ldr	r0, [pc, #44]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002dfc:	f7ff fec4 	bl	8002b88 <HAL_UART_Transmit>

	}

	if(index==270)
 8002e00:	882b      	ldrh	r3, [r5, #0]
 8002e02:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
	{
		ai_proc_flag = SET;
 8002e06:	bf04      	itt	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	7033      	strbeq	r3, [r6, #0]
	}


}
 8002e0c:	b012      	add	sp, #72	; 0x48
 8002e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e12:	bf00      	nop
 8002e14:	20000c34 	.word	0x20000c34
 8002e18:	20001088 	.word	0x20001088
 8002e1c:	200070a0 	.word	0x200070a0
 8002e20:	20000c36 	.word	0x20000c36
 8002e24:	08009873 	.word	0x08009873
 8002e28:	20000be4 	.word	0x20000be4

08002e2c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8002e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  err = ai_network_har_create_and_init(&network_har, act_addr, NULL);
 8002e2e:	4c12      	ldr	r4, [pc, #72]	; (8002e78 <MX_X_CUBE_AI_Init+0x4c>)
 8002e30:	4912      	ldr	r1, [pc, #72]	; (8002e7c <MX_X_CUBE_AI_Init+0x50>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	4620      	mov	r0, r4
 8002e36:	f000 f937 	bl	80030a8 <ai_network_har_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8002e3a:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8002e3e:	d006      	beq.n	8002e4e <MX_X_CUBE_AI_Init+0x22>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8002e40:	0a03      	lsrs	r3, r0, #8
 8002e42:	460a      	mov	r2, r1
 8002e44:	480e      	ldr	r0, [pc, #56]	; (8002e80 <MX_X_CUBE_AI_Init+0x54>)
 8002e46:	490f      	ldr	r1, [pc, #60]	; (8002e84 <MX_X_CUBE_AI_Init+0x58>)
 8002e48:	f004 f992 	bl	8007170 <iprintf>
  do {} while (1);
 8002e4c:	e7fe      	b.n	8002e4c <MX_X_CUBE_AI_Init+0x20>
  ai_input = ai_network_har_inputs_get(network_har, NULL);
 8002e4e:	6820      	ldr	r0, [r4, #0]
 8002e50:	9101      	str	r1, [sp, #4]
 8002e52:	f000 f85b 	bl	8002f0c <ai_network_har_inputs_get>
 8002e56:	4d0c      	ldr	r5, [pc, #48]	; (8002e88 <MX_X_CUBE_AI_Init+0x5c>)
  ai_output = ai_network_har_outputs_get(network_har, NULL);
 8002e58:	9901      	ldr	r1, [sp, #4]
  ai_input = ai_network_har_inputs_get(network_har, NULL);
 8002e5a:	6028      	str	r0, [r5, #0]
  ai_output = ai_network_har_outputs_get(network_har, NULL);
 8002e5c:	6820      	ldr	r0, [r4, #0]
 8002e5e:	f000 f85f 	bl	8002f20 <ai_network_har_outputs_get>
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <MX_X_CUBE_AI_Init+0x60>)
	  ai_input[idx].data = data_ins[idx];
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <MX_X_CUBE_AI_Init+0x64>)
  ai_output = ai_network_har_outputs_get(network_har, NULL);
 8002e66:	6018      	str	r0, [r3, #0]
	  ai_input[idx].data = data_ins[idx];
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
	ai_output[idx].data = data_outs[idx];
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <MX_X_CUBE_AI_Init+0x68>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6043      	str	r3, [r0, #4]
    /* USER CODE BEGIN 5 */
	ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 8002e74:	b003      	add	sp, #12
 8002e76:	bd30      	pop	{r4, r5, pc}
 8002e78:	2000108c 	.word	0x2000108c
 8002e7c:	2000000c 	.word	0x2000000c
 8002e80:	080098a8 	.word	0x080098a8
 8002e84:	08009889 	.word	0x08009889
 8002e88:	20000c2c 	.word	0x20000c2c
 8002e8c:	20000c30 	.word	0x20000c30
 8002e90:	20000010 	.word	0x20000010
 8002e94:	20000014 	.word	0x20000014

08002e98 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
    /* USER CODE BEGIN 6 */

	if(ai_proc_flag==SET)
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <MX_X_CUBE_AI_Process+0x3c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
{
 8002e9c:	b510      	push	{r4, lr}
	if(ai_proc_flag==SET)
 8002e9e:	b1c3      	cbz	r3, 8002ed2 <MX_X_CUBE_AI_Process+0x3a>
	{
		acquire_and_process_data();
 8002ea0:	f7ff fec8 	bl	8002c34 <acquire_and_process_data>
  batch = ai_network_har_run(network_har, ai_input, ai_output);
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <MX_X_CUBE_AI_Process+0x40>)
 8002ea6:	4c0d      	ldr	r4, [pc, #52]	; (8002edc <MX_X_CUBE_AI_Process+0x44>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <MX_X_CUBE_AI_Process+0x48>)
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	f000 f941 	bl	8003136 <ai_network_har_run>
  if (batch != 1) {
 8002eb4:	2801      	cmp	r0, #1
 8002eb6:	d009      	beq.n	8002ecc <MX_X_CUBE_AI_Process+0x34>
    ai_log_err(ai_network_har_get_error(network_har),
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	f000 f817 	bl	8002eec <ai_network_har_get_error>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8002ebe:	4909      	ldr	r1, [pc, #36]	; (8002ee4 <MX_X_CUBE_AI_Process+0x4c>)
 8002ec0:	0a03      	lsrs	r3, r0, #8
 8002ec2:	b2c2      	uxtb	r2, r0
 8002ec4:	4808      	ldr	r0, [pc, #32]	; (8002ee8 <MX_X_CUBE_AI_Process+0x50>)
 8002ec6:	f004 f953 	bl	8007170 <iprintf>
  do {} while (1);
 8002eca:	e7fe      	b.n	8002eca <MX_X_CUBE_AI_Process+0x32>
		ai_run();
		post_process();
 8002ecc:	f7ff febe 	bl	8002c4c <post_process>

		while(1);
 8002ed0:	e7fe      	b.n	8002ed0 <MX_X_CUBE_AI_Process+0x38>
	}


    /* USER CODE END 6 */
}
 8002ed2:	bd10      	pop	{r4, pc}
 8002ed4:	20000c34 	.word	0x20000c34
 8002ed8:	20000c30 	.word	0x20000c30
 8002edc:	2000108c 	.word	0x2000108c
 8002ee0:	20000c2c 	.word	0x20000c2c
 8002ee4:	080098da 	.word	0x080098da
 8002ee8:	080098a8 	.word	0x080098a8

08002eec <ai_network_har_get_error>:
}

AI_API_ENTRY
ai_error ai_network_har_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8002eec:	f000 ba4c 	b.w	8003388 <ai_platform_network_get_error>

08002ef0 <ai_network_har_create>:
}

AI_API_ENTRY
ai_error ai_network_har_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002ef0:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8002ef2:	2305      	movs	r3, #5
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	e9cd 3200 	strd	r3, r2, [sp]
 8002efa:	4a03      	ldr	r2, [pc, #12]	; (8002f08 <ai_network_har_create+0x18>)
 8002efc:	2301      	movs	r3, #1
 8002efe:	f000 fcb1 	bl	8003864 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002f02:	b003      	add	sp, #12
 8002f04:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f08:	20000884 	.word	0x20000884

08002f0c <ai_network_har_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_har_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8002f0c:	b910      	cbnz	r0, 8002f14 <ai_network_har_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002f0e:	4802      	ldr	r0, [pc, #8]	; (8002f18 <ai_network_har_inputs_get+0xc>)
 8002f10:	4b02      	ldr	r3, [pc, #8]	; (8002f1c <ai_network_har_inputs_get+0x10>)
 8002f12:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8002f14:	f000 bab8 	b.w	8003488 <ai_platform_inputs_get>
 8002f18:	20000884 	.word	0x20000884
 8002f1c:	a1c00100 	.word	0xa1c00100

08002f20 <ai_network_har_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_har_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8002f20:	b910      	cbnz	r0, 8002f28 <ai_network_har_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002f22:	4802      	ldr	r0, [pc, #8]	; (8002f2c <ai_network_har_outputs_get+0xc>)
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <ai_network_har_outputs_get+0x10>)
 8002f26:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8002f28:	f000 bba2 	b.w	8003670 <ai_platform_outputs_get>
 8002f2c:	20000884 	.word	0x20000884
 8002f30:	a1c00100 	.word	0xa1c00100

08002f34 <ai_network_har_init>:
}

AI_API_ENTRY
ai_bool ai_network_har_init(
  ai_handle network, const ai_network_params* params)
{
 8002f34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002f38:	4607      	mov	r7, r0
 8002f3a:	4688      	mov	r8, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8002f3c:	f000 fd72 	bl	8003a24 <ai_platform_network_init>
  if (!net_ctx) return false;
 8002f40:	4604      	mov	r4, r0
 8002f42:	2800      	cmp	r0, #0
 8002f44:	f000 8083 	beq.w	800304e <ai_network_har_init+0x11a>
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8002f48:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8002f4a:	4642      	mov	r2, r8
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	a801      	add	r0, sp, #4
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8002f50:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8002f52:	f000 f95b 	bl	800320c <ai_platform_get_weights_map>
 8002f56:	4605      	mov	r5, r0
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d07b      	beq.n	8003054 <ai_network_har_init+0x120>
    conv2d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8002f5c:	4a43      	ldr	r2, [pc, #268]	; (800306c <ai_network_har_init+0x138>)
 8002f5e:	6813      	ldr	r3, [r2, #0]
 8002f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f64:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8002f66:	9b01      	ldr	r3, [sp, #4]
    conv2d_conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8002f68:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8002f6c:	4a40      	ldr	r2, [pc, #256]	; (8003070 <ai_network_har_init+0x13c>)
 8002f6e:	6811      	ldr	r1, [r2, #0]
 8002f70:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002f74:	6011      	str	r1, [r2, #0]
    conv2d_conv2d_bias_array.data = AI_PTR(weights_map[0] + 2048);
 8002f76:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    conv2d_conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 2048);
 8002f7a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8002f7e:	4a3d      	ldr	r2, [pc, #244]	; (8003074 <ai_network_har_init+0x140>)
 8002f80:	6811      	ldr	r1, [r2, #0]
 8002f82:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002f86:	6011      	str	r1, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(weights_map[0] + 2624);
 8002f88:	f503 6124 	add.w	r1, r3, #2624	; 0xa40
 8002f8c:	6091      	str	r1, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(weights_map[0] + 2560);
 8002f8e:	f503 6120 	add.w	r1, r3, #2560	; 0xa00
 8002f92:	60d1      	str	r1, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002f94:	4a38      	ldr	r2, [pc, #224]	; (8003078 <ai_network_har_init+0x144>)
 8002f96:	6811      	ldr	r1, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(weights_map[0] + 182848);
 8002f98:	f503 3632 	add.w	r6, r3, #182272	; 0x2c800
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002f9c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002fa0:	6011      	str	r1, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(weights_map[0] + 182848);
 8002fa2:	f506 7110 	add.w	r1, r6, #576	; 0x240
    dense_dense_bias_array.data_start = AI_PTR(weights_map[0] + 182848);
 8002fa6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8002faa:	4a34      	ldr	r2, [pc, #208]	; (800307c <ai_network_har_init+0x148>)
 8002fac:	6811      	ldr	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(weights_map[0] + 183104);
 8002fae:	f506 7650 	add.w	r6, r6, #832	; 0x340
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8002fb2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002fb6:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data_start = AI_PTR(weights_map[0] + 183104);
 8002fb8:	e9c2 6602 	strd	r6, r6, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002fbc:	4a30      	ldr	r2, [pc, #192]	; (8003080 <ai_network_har_init+0x14c>)
 8002fbe:	6811      	ldr	r1, [r2, #0]
 8002fc0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002fc4:	6011      	str	r1, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(weights_map[0] + 199488);
 8002fc6:	f503 3142 	add.w	r1, r3, #198656	; 0x30800
 8002fca:	f501 7150 	add.w	r1, r1, #832	; 0x340
    dense_1_dense_bias_array.data_start = AI_PTR(weights_map[0] + 199488);
 8002fce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8002fd2:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <ai_network_har_init+0x150>)
 8002fd4:	6811      	ldr	r1, [r2, #0]
 8002fd6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002fda:	6011      	str	r1, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(weights_map[0] + 199744);
 8002fdc:	f503 3143 	add.w	r1, r3, #199680	; 0x30c00
 8002fe0:	3140      	adds	r1, #64	; 0x40
    dense_2_dense_weights_array.data_start = AI_PTR(weights_map[0] + 199744);
 8002fe2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002fe6:	4a28      	ldr	r2, [pc, #160]	; (8003088 <ai_network_har_init+0x154>)
 8002fe8:	6811      	ldr	r1, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(weights_map[0] + 201280);
 8002fea:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002fee:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    dense_2_dense_bias_array.data = AI_PTR(weights_map[0] + 201280);
 8002ff2:	f503 7310 	add.w	r3, r3, #576	; 0x240
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002ff6:	6011      	str	r1, [r2, #0]
    dense_2_dense_bias_array.data_start = AI_PTR(weights_map[0] + 201280);
 8002ff8:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8002ffc:	2300      	movs	r3, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8002ffe:	4642      	mov	r2, r8
 8003000:	2101      	movs	r1, #1
 8003002:	a801      	add	r0, sp, #4
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8003004:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8003006:	f000 f951 	bl	80032ac <ai_platform_get_activations_map>
 800300a:	4606      	mov	r6, r0
 800300c:	b340      	cbz	r0, 8003060 <ai_network_har_init+0x12c>
    conv2d_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800300e:	9b01      	ldr	r3, [sp, #4]
 8003010:	4a1e      	ldr	r2, [pc, #120]	; (800308c <ai_network_har_init+0x158>)
    conv2d_conv2d_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8003012:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_conv2d_output_array.data = AI_PTR(activations_map[0] + 2048);
 8003016:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <ai_network_har_init+0x15c>)
 8003018:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    conv2d_conv2d_output_array.data_start = AI_PTR(activations_map[0] + 2048);
 800301c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <ai_network_har_init+0x160>)
    dense_output_array.data = AI_PTR(activations_map[0] + 256);
 8003022:	491d      	ldr	r1, [pc, #116]	; (8003098 <ai_network_har_init+0x164>)
    dense_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003024:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_output_array.data = AI_PTR(activations_map[0] + 256);
 8003028:	f503 7280 	add.w	r2, r3, #256	; 0x100
    dense_output_array.data_start = AI_PTR(activations_map[0] + 256);
 800302c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_1_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8003030:	491a      	ldr	r1, [pc, #104]	; (800309c <ai_network_har_init+0x168>)
    dense_1_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003032:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 256);
 8003036:	491a      	ldr	r1, [pc, #104]	; (80030a0 <ai_network_har_init+0x16c>)
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8003038:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_2_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 800303c:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <ai_network_har_init+0x170>)
    dense_2_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800303e:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_har_configure_weights(net_ctx, params);
  ok &= network_har_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8003042:	4638      	mov	r0, r7
 8003044:	f000 fdfa 	bl	8003c3c <ai_platform_network_post_init>
 8003048:	4030      	ands	r0, r6
 800304a:	4028      	ands	r0, r5
 800304c:	b2c0      	uxtb	r0, r0

  return ok;
}
 800304e:	b002      	add	sp, #8
 8003050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003054:	2212      	movs	r2, #18
 8003056:	2130      	movs	r1, #48	; 0x30
 8003058:	4620      	mov	r0, r4
 800305a:	f000 fa0f 	bl	800347c <ai_platform_network_set_error>
  return false;
 800305e:	e7cd      	b.n	8002ffc <ai_network_har_init+0xc8>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003060:	2213      	movs	r2, #19
 8003062:	2130      	movs	r1, #48	; 0x30
 8003064:	4620      	mov	r0, r4
 8003066:	f000 fa09 	bl	800347c <ai_platform_network_set_error>
  return false;
 800306a:	e7ea      	b.n	8003042 <ai_network_har_init+0x10e>
 800306c:	200005b0 	.word	0x200005b0
 8003070:	200004b4 	.word	0x200004b4
 8003074:	20000828 	.word	0x20000828
 8003078:	200007b4 	.word	0x200007b4
 800307c:	20000650 	.word	0x20000650
 8003080:	200005dc 	.word	0x200005dc
 8003084:	2000073c 	.word	0x2000073c
 8003088:	200006c8 	.word	0x200006c8
 800308c:	20000584 	.word	0x20000584
 8003090:	20000558 	.word	0x20000558
 8003094:	200007fc 	.word	0x200007fc
 8003098:	20000874 	.word	0x20000874
 800309c:	20000624 	.word	0x20000624
 80030a0:	2000069c 	.word	0x2000069c
 80030a4:	20000710 	.word	0x20000710

080030a8 <ai_network_har_create_and_init>:
{
 80030a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030ac:	4688      	mov	r8, r1
 80030ae:	b08f      	sub	sp, #60	; 0x3c
    err = ai_network_har_create(network, AI_NETWORK_HAR_DATA_CONFIG);
 80030b0:	2100      	movs	r1, #0
{
 80030b2:	4606      	mov	r6, r0
 80030b4:	4617      	mov	r7, r2
    err = ai_network_har_create(network, AI_NETWORK_HAR_DATA_CONFIG);
 80030b6:	f7ff ff1b 	bl	8002ef0 <ai_network_har_create>
    if (err.type != AI_ERROR_NONE)
 80030ba:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_network_har_create(network, AI_NETWORK_HAR_DATA_CONFIG);
 80030be:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 80030c0:	d001      	beq.n	80030c6 <ai_network_har_create_and_init+0x1e>
    return err;
 80030c2:	4620      	mov	r0, r4
 80030c4:	e006      	b.n	80030d4 <ai_network_har_create_and_init+0x2c>
    if (ai_network_har_data_params_get(&params) != true) {
 80030c6:	4668      	mov	r0, sp
 80030c8:	f000 f838 	bl	800313c <ai_network_har_data_params_get>
 80030cc:	b928      	cbnz	r0, 80030da <ai_network_har_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 80030ce:	6830      	ldr	r0, [r6, #0]
 80030d0:	f000 f95a 	bl	8003388 <ai_platform_network_get_error>
}
 80030d4:	b00f      	add	sp, #60	; 0x3c
 80030d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 80030da:	f1b8 0f00 	cmp.w	r8, #0
 80030de:	d11a      	bne.n	8003116 <ai_network_har_create_and_init+0x6e>
    if (weights) {
 80030e0:	bb3f      	cbnz	r7, 8003132 <ai_network_har_create_and_init+0x8a>
    if (ai_network_har_init(*network, &params) != true) {
 80030e2:	6830      	ldr	r0, [r6, #0]
 80030e4:	4669      	mov	r1, sp
 80030e6:	f7ff ff25 	bl	8002f34 <ai_network_har_init>
 80030ea:	b928      	cbnz	r0, 80030f8 <ai_network_har_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 80030ec:	6830      	ldr	r0, [r6, #0]
 80030ee:	f000 f94b 	bl	8003388 <ai_platform_network_get_error>
 80030f2:	fa5f f980 	uxtb.w	r9, r0
 80030f6:	4604      	mov	r4, r0
    return err;
 80030f8:	f369 0407 	bfi	r4, r9, #0, #8
 80030fc:	e7e1      	b.n	80030c2 <ai_network_har_create_and_init+0x1a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80030fe:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8003102:	4629      	mov	r1, r5
 8003104:	a803      	add	r0, sp, #12
 8003106:	f000 f86b 	bl	80031e0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800310a:	3501      	adds	r5, #1
 800310c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003110:	42ab      	cmp	r3, r5
 8003112:	dcf4      	bgt.n	80030fe <ai_network_har_create_and_init+0x56>
 8003114:	e7e4      	b.n	80030e0 <ai_network_har_create_and_init+0x38>
 8003116:	464d      	mov	r5, r9
 8003118:	e7f8      	b.n	800310c <ai_network_har_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800311a:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800311e:	4629      	mov	r1, r5
 8003120:	a801      	add	r0, sp, #4
 8003122:	f000 f85d 	bl	80031e0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8003126:	3501      	adds	r5, #1
 8003128:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800312c:	42ab      	cmp	r3, r5
 800312e:	dcf4      	bgt.n	800311a <ai_network_har_create_and_init+0x72>
 8003130:	e7d7      	b.n	80030e2 <ai_network_har_create_and_init+0x3a>
 8003132:	2500      	movs	r5, #0
 8003134:	e7f8      	b.n	8003128 <ai_network_har_create_and_init+0x80>

08003136 <ai_network_har_run>:

AI_API_ENTRY
ai_i32 ai_network_har_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8003136:	f000 be15 	b.w	8003d64 <ai_platform_network_process>
	...

0800313c <ai_network_har_data_params_get>:
 * @ingroup network_har_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_har_data_params_get(ai_network_params* params)
{
 800313c:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 800313e:	4603      	mov	r3, r0
{
 8003140:	b085      	sub	sp, #20
  if (!params) return false;
 8003142:	b170      	cbz	r0, 8003162 <ai_network_har_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8003144:	4c08      	ldr	r4, [pc, #32]	; (8003168 <ai_network_har_data_params_get+0x2c>)
 8003146:	e894 0003 	ldmia.w	r4, {r0, r1}
 800314a:	466a      	mov	r2, sp
 800314c:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_HAR_DATA_ACTIVATIONS_COUNT, g_network_har_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003150:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8003154:	ad02      	add	r5, sp, #8
 8003156:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_HAR_DATA_WEIGHTS_COUNT, g_network_har_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800315a:	4629      	mov	r1, r5
 800315c:	4618      	mov	r0, r3
 800315e:	f000 f8f7 	bl	8003350 <ai_platform_bind_network_params>
}
 8003162:	b005      	add	sp, #20
 8003164:	bd30      	pop	{r4, r5, pc}
 8003166:	bf00      	nop
 8003168:	080097d8 	.word	0x080097d8

0800316c <ai_buffer_get_size>:
 800316c:	b358      	cbz	r0, 80031c6 <ai_buffer_get_size+0x5a>
 800316e:	b430      	push	{r4, r5}
 8003170:	6803      	ldr	r3, [r0, #0]
 8003172:	4d15      	ldr	r5, [pc, #84]	; (80031c8 <ai_buffer_get_size+0x5c>)
 8003174:	6984      	ldr	r4, [r0, #24]
 8003176:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800317a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800317e:	42ab      	cmp	r3, r5
 8003180:	6862      	ldr	r2, [r4, #4]
 8003182:	d01a      	beq.n	80031ba <ai_buffer_get_size+0x4e>
 8003184:	7d03      	ldrb	r3, [r0, #20]
 8003186:	6941      	ldr	r1, [r0, #20]
 8003188:	f1a3 0301 	sub.w	r3, r3, #1
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8003196:	428b      	cmp	r3, r1
 8003198:	da0b      	bge.n	80031b2 <ai_buffer_get_size+0x46>
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <ai_buffer_get_size+0x38>
 800319e:	2902      	cmp	r1, #2
 80031a0:	d007      	beq.n	80031b2 <ai_buffer_get_size+0x46>
 80031a2:	2302      	movs	r3, #2
 80031a4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80031a8:	3301      	adds	r3, #1
 80031aa:	428b      	cmp	r3, r1
 80031ac:	fb00 f202 	mul.w	r2, r0, r2
 80031b0:	d1f3      	bne.n	800319a <ai_buffer_get_size+0x2e>
 80031b2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80031b6:	bc30      	pop	{r4, r5}
 80031b8:	4770      	bx	lr
 80031ba:	2900      	cmp	r1, #0
 80031bc:	d0e2      	beq.n	8003184 <ai_buffer_get_size+0x18>
 80031be:	321f      	adds	r2, #31
 80031c0:	f022 021f 	bic.w	r2, r2, #31
 80031c4:	e7de      	b.n	8003184 <ai_buffer_get_size+0x18>
 80031c6:	4770      	bx	lr
 80031c8:	000400c0 	.word	0x000400c0

080031cc <ai_buffer_array_sane>:
 80031cc:	b138      	cbz	r0, 80031de <ai_buffer_array_sane+0x12>
 80031ce:	6843      	ldr	r3, [r0, #4]
 80031d0:	b123      	cbz	r3, 80031dc <ai_buffer_array_sane+0x10>
 80031d2:	8840      	ldrh	r0, [r0, #2]
 80031d4:	3000      	adds	r0, #0
 80031d6:	bf18      	it	ne
 80031d8:	2001      	movne	r0, #1
 80031da:	4770      	bx	lr
 80031dc:	4618      	mov	r0, r3
 80031de:	4770      	bx	lr

080031e0 <ai_buffer_array_item_set_address>:
 80031e0:	b120      	cbz	r0, 80031ec <ai_buffer_array_item_set_address+0xc>
 80031e2:	6843      	ldr	r3, [r0, #4]
 80031e4:	b11b      	cbz	r3, 80031ee <ai_buffer_array_item_set_address+0xe>
 80031e6:	8840      	ldrh	r0, [r0, #2]
 80031e8:	b918      	cbnz	r0, 80031f2 <ai_buffer_array_item_set_address+0x12>
 80031ea:	4770      	bx	lr
 80031ec:	4770      	bx	lr
 80031ee:	4618      	mov	r0, r3
 80031f0:	4770      	bx	lr
 80031f2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80031f6:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 80031fa:	d0f7      	beq.n	80031ec <ai_buffer_array_item_set_address+0xc>
 80031fc:	6042      	str	r2, [r0, #4]
 80031fe:	2001      	movs	r0, #1
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop

08003204 <_ai_platform_acquire_crc>:
 8003204:	2001      	movs	r0, #1
 8003206:	4770      	bx	lr

08003208 <_ai_platform_release_crc>:
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop

0800320c <ai_platform_get_weights_map>:
 800320c:	b192      	cbz	r2, 8003234 <ai_platform_get_weights_map+0x28>
 800320e:	b188      	cbz	r0, 8003234 <ai_platform_get_weights_map+0x28>
 8003210:	b181      	cbz	r1, 8003234 <ai_platform_get_weights_map+0x28>
 8003212:	b570      	push	{r4, r5, r6, lr}
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <ai_platform_get_weights_map+0x9c>)
 8003216:	6814      	ldr	r4, [r2, #0]
 8003218:	429c      	cmp	r4, r3
 800321a:	d00d      	beq.n	8003238 <ai_platform_get_weights_map+0x2c>
 800321c:	6854      	ldr	r4, [r2, #4]
 800321e:	b194      	cbz	r4, 8003246 <ai_platform_get_weights_map+0x3a>
 8003220:	6825      	ldr	r5, [r4, #0]
 8003222:	429d      	cmp	r5, r3
 8003224:	d027      	beq.n	8003276 <ai_platform_get_weights_map+0x6a>
 8003226:	6004      	str	r4, [r0, #0]
 8003228:	f1a1 0001 	sub.w	r0, r1, #1
 800322c:	fab0 f080 	clz	r0, r0
 8003230:	0940      	lsrs	r0, r0, #5
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	2000      	movs	r0, #0
 8003236:	4770      	bx	lr
 8003238:	4605      	mov	r5, r0
 800323a:	1d10      	adds	r0, r2, #4
 800323c:	4616      	mov	r6, r2
 800323e:	460c      	mov	r4, r1
 8003240:	f7ff ffc4 	bl	80031cc <ai_buffer_array_sane>
 8003244:	b908      	cbnz	r0, 800324a <ai_platform_get_weights_map+0x3e>
 8003246:	2000      	movs	r0, #0
 8003248:	bd70      	pop	{r4, r5, r6, pc}
 800324a:	88f3      	ldrh	r3, [r6, #6]
 800324c:	429c      	cmp	r4, r3
 800324e:	d1fa      	bne.n	8003246 <ai_platform_get_weights_map+0x3a>
 8003250:	2100      	movs	r1, #0
 8003252:	1f2b      	subs	r3, r5, #4
 8003254:	4608      	mov	r0, r1
 8003256:	68b2      	ldr	r2, [r6, #8]
 8003258:	440a      	add	r2, r1
 800325a:	311c      	adds	r1, #28
 800325c:	6852      	ldr	r2, [r2, #4]
 800325e:	b12a      	cbz	r2, 800326c <ai_platform_get_weights_map+0x60>
 8003260:	3001      	adds	r0, #1
 8003262:	4284      	cmp	r4, r0
 8003264:	f843 2f04 	str.w	r2, [r3, #4]!
 8003268:	d1f5      	bne.n	8003256 <ai_platform_get_weights_map+0x4a>
 800326a:	4620      	mov	r0, r4
 800326c:	1a20      	subs	r0, r4, r0
 800326e:	fab0 f080 	clz	r0, r0
 8003272:	0940      	lsrs	r0, r0, #5
 8003274:	bd70      	pop	{r4, r5, r6, pc}
 8003276:	6863      	ldr	r3, [r4, #4]
 8003278:	42ab      	cmp	r3, r5
 800327a:	f104 0404 	add.w	r4, r4, #4
 800327e:	d0e2      	beq.n	8003246 <ai_platform_get_weights_map+0x3a>
 8003280:	3804      	subs	r0, #4
 8003282:	4626      	mov	r6, r4
 8003284:	2200      	movs	r2, #0
 8003286:	e003      	b.n	8003290 <ai_platform_get_weights_map+0x84>
 8003288:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800328c:	42ab      	cmp	r3, r5
 800328e:	d0da      	beq.n	8003246 <ai_platform_get_weights_map+0x3a>
 8003290:	3201      	adds	r2, #1
 8003292:	4291      	cmp	r1, r2
 8003294:	f840 3f04 	str.w	r3, [r0, #4]!
 8003298:	d1f6      	bne.n	8003288 <ai_platform_get_weights_map+0x7c>
 800329a:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800329e:	4b02      	ldr	r3, [pc, #8]	; (80032a8 <ai_platform_get_weights_map+0x9c>)
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d1d0      	bne.n	8003246 <ai_platform_get_weights_map+0x3a>
 80032a4:	2001      	movs	r0, #1
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	a1facade 	.word	0xa1facade

080032ac <ai_platform_get_activations_map>:
 80032ac:	b192      	cbz	r2, 80032d4 <ai_platform_get_activations_map+0x28>
 80032ae:	b188      	cbz	r0, 80032d4 <ai_platform_get_activations_map+0x28>
 80032b0:	b181      	cbz	r1, 80032d4 <ai_platform_get_activations_map+0x28>
 80032b2:	b570      	push	{r4, r5, r6, lr}
 80032b4:	4b25      	ldr	r3, [pc, #148]	; (800334c <ai_platform_get_activations_map+0xa0>)
 80032b6:	6814      	ldr	r4, [r2, #0]
 80032b8:	429c      	cmp	r4, r3
 80032ba:	d00d      	beq.n	80032d8 <ai_platform_get_activations_map+0x2c>
 80032bc:	6a14      	ldr	r4, [r2, #32]
 80032be:	b19c      	cbz	r4, 80032e8 <ai_platform_get_activations_map+0x3c>
 80032c0:	6825      	ldr	r5, [r4, #0]
 80032c2:	429d      	cmp	r5, r3
 80032c4:	d028      	beq.n	8003318 <ai_platform_get_activations_map+0x6c>
 80032c6:	6004      	str	r4, [r0, #0]
 80032c8:	f1a1 0001 	sub.w	r0, r1, #1
 80032cc:	fab0 f080 	clz	r0, r0
 80032d0:	0940      	lsrs	r0, r0, #5
 80032d2:	bd70      	pop	{r4, r5, r6, pc}
 80032d4:	2000      	movs	r0, #0
 80032d6:	4770      	bx	lr
 80032d8:	4605      	mov	r5, r0
 80032da:	f102 000c 	add.w	r0, r2, #12
 80032de:	4616      	mov	r6, r2
 80032e0:	460c      	mov	r4, r1
 80032e2:	f7ff ff73 	bl	80031cc <ai_buffer_array_sane>
 80032e6:	b908      	cbnz	r0, 80032ec <ai_platform_get_activations_map+0x40>
 80032e8:	2000      	movs	r0, #0
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	89f3      	ldrh	r3, [r6, #14]
 80032ee:	429c      	cmp	r4, r3
 80032f0:	d1fa      	bne.n	80032e8 <ai_platform_get_activations_map+0x3c>
 80032f2:	2100      	movs	r1, #0
 80032f4:	1f2b      	subs	r3, r5, #4
 80032f6:	4608      	mov	r0, r1
 80032f8:	6932      	ldr	r2, [r6, #16]
 80032fa:	440a      	add	r2, r1
 80032fc:	311c      	adds	r1, #28
 80032fe:	6852      	ldr	r2, [r2, #4]
 8003300:	b12a      	cbz	r2, 800330e <ai_platform_get_activations_map+0x62>
 8003302:	3001      	adds	r0, #1
 8003304:	4284      	cmp	r4, r0
 8003306:	f843 2f04 	str.w	r2, [r3, #4]!
 800330a:	d1f5      	bne.n	80032f8 <ai_platform_get_activations_map+0x4c>
 800330c:	4620      	mov	r0, r4
 800330e:	1a20      	subs	r0, r4, r0
 8003310:	fab0 f080 	clz	r0, r0
 8003314:	0940      	lsrs	r0, r0, #5
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	6863      	ldr	r3, [r4, #4]
 800331a:	42ab      	cmp	r3, r5
 800331c:	f104 0404 	add.w	r4, r4, #4
 8003320:	d0e2      	beq.n	80032e8 <ai_platform_get_activations_map+0x3c>
 8003322:	3804      	subs	r0, #4
 8003324:	4626      	mov	r6, r4
 8003326:	2200      	movs	r2, #0
 8003328:	e003      	b.n	8003332 <ai_platform_get_activations_map+0x86>
 800332a:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800332e:	42ab      	cmp	r3, r5
 8003330:	d0da      	beq.n	80032e8 <ai_platform_get_activations_map+0x3c>
 8003332:	3201      	adds	r2, #1
 8003334:	4291      	cmp	r1, r2
 8003336:	f840 3f04 	str.w	r3, [r0, #4]!
 800333a:	d1f6      	bne.n	800332a <ai_platform_get_activations_map+0x7e>
 800333c:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8003340:	4b02      	ldr	r3, [pc, #8]	; (800334c <ai_platform_get_activations_map+0xa0>)
 8003342:	429a      	cmp	r2, r3
 8003344:	d1d0      	bne.n	80032e8 <ai_platform_get_activations_map+0x3c>
 8003346:	2001      	movs	r0, #1
 8003348:	bd70      	pop	{r4, r5, r6, pc}
 800334a:	bf00      	nop
 800334c:	a1facade 	.word	0xa1facade

08003350 <ai_platform_bind_network_params>:
 8003350:	4603      	mov	r3, r0
 8003352:	b190      	cbz	r0, 800337a <ai_platform_bind_network_params+0x2a>
 8003354:	b1a1      	cbz	r1, 8003380 <ai_platform_bind_network_params+0x30>
 8003356:	b18a      	cbz	r2, 800337c <ai_platform_bind_network_params+0x2c>
 8003358:	b410      	push	{r4}
 800335a:	4604      	mov	r4, r0
 800335c:	4809      	ldr	r0, [pc, #36]	; (8003384 <ai_platform_bind_network_params+0x34>)
 800335e:	f844 0b04 	str.w	r0, [r4], #4
 8003362:	c903      	ldmia	r1, {r0, r1}
 8003364:	e884 0003 	stmia.w	r4, {r0, r1}
 8003368:	e892 0003 	ldmia.w	r2, {r0, r1}
 800336c:	330c      	adds	r3, #12
 800336e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003372:	2001      	movs	r0, #1
 8003374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	4770      	bx	lr
 800337c:	4610      	mov	r0, r2
 800337e:	4770      	bx	lr
 8003380:	4608      	mov	r0, r1
 8003382:	4770      	bx	lr
 8003384:	a1facade 	.word	0xa1facade

08003388 <ai_platform_network_get_error>:
 8003388:	b510      	push	{r4, lr}
 800338a:	b120      	cbz	r0, 8003396 <ai_platform_network_get_error+0xe>
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <ai_platform_network_get_error+0xd0>)
 800338e:	6802      	ldr	r2, [r0, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	4604      	mov	r4, r0
 8003394:	d02e      	beq.n	80033f4 <ai_platform_network_get_error+0x6c>
 8003396:	4a31      	ldr	r2, [pc, #196]	; (800345c <ai_platform_network_get_error+0xd4>)
 8003398:	6813      	ldr	r3, [r2, #0]
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	f7ff ff30 	bl	8003204 <_ai_platform_acquire_crc>
 80033a4:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <ai_platform_network_get_error+0xd8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b0:	d00d      	beq.n	80033ce <ai_platform_network_get_error+0x46>
 80033b2:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <ai_platform_network_get_error+0xdc>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	2a00      	cmp	r2, #0
 80033bc:	d1fc      	bne.n	80033b8 <ai_platform_network_get_error+0x30>
 80033be:	4b2a      	ldr	r3, [pc, #168]	; (8003468 <ai_platform_network_get_error+0xe0>)
 80033c0:	4a2a      	ldr	r2, [pc, #168]	; (800346c <ai_platform_network_get_error+0xe4>)
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <ai_platform_network_get_error+0xe8>)
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d00d      	beq.n	80033e8 <ai_platform_network_get_error+0x60>
 80033cc:	e7fe      	b.n	80033cc <ai_platform_network_get_error+0x44>
 80033ce:	4b29      	ldr	r3, [pc, #164]	; (8003474 <ai_platform_network_get_error+0xec>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	2a00      	cmp	r2, #0
 80033d8:	d1fc      	bne.n	80033d4 <ai_platform_network_get_error+0x4c>
 80033da:	4b27      	ldr	r3, [pc, #156]	; (8003478 <ai_platform_network_get_error+0xf0>)
 80033dc:	4a23      	ldr	r2, [pc, #140]	; (800346c <ai_platform_network_get_error+0xe4>)
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <ai_platform_network_get_error+0xe8>)
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d104      	bne.n	80033f2 <ai_platform_network_get_error+0x6a>
 80033e8:	f7ff ff0e 	bl	8003208 <_ai_platform_release_crc>
 80033ec:	f241 0010 	movw	r0, #4112	; 0x1010
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	e7fe      	b.n	80033f2 <ai_platform_network_get_error+0x6a>
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <ai_platform_network_get_error+0xd4>)
 80033f6:	6813      	ldr	r3, [r2, #0]
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	f7ff ff01 	bl	8003204 <_ai_platform_acquire_crc>
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <ai_platform_network_get_error+0xd8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340e:	d00d      	beq.n	800342c <ai_platform_network_get_error+0xa4>
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <ai_platform_network_get_error+0xdc>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2a00      	cmp	r2, #0
 800341a:	d1fc      	bne.n	8003416 <ai_platform_network_get_error+0x8e>
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <ai_platform_network_get_error+0xe0>)
 800341e:	4a13      	ldr	r2, [pc, #76]	; (800346c <ai_platform_network_get_error+0xe4>)
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <ai_platform_network_get_error+0xe8>)
 8003426:	429a      	cmp	r2, r3
 8003428:	d00e      	beq.n	8003448 <ai_platform_network_get_error+0xc0>
 800342a:	e7fe      	b.n	800342a <ai_platform_network_get_error+0xa2>
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <ai_platform_network_get_error+0xec>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	2a00      	cmp	r2, #0
 8003436:	d1fc      	bne.n	8003432 <ai_platform_network_get_error+0xaa>
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <ai_platform_network_get_error+0xf0>)
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <ai_platform_network_get_error+0xe4>)
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <ai_platform_network_get_error+0xe8>)
 8003442:	429a      	cmp	r2, r3
 8003444:	d000      	beq.n	8003448 <ai_platform_network_get_error+0xc0>
 8003446:	e7fe      	b.n	8003446 <ai_platform_network_get_error+0xbe>
 8003448:	f7ff fede 	bl	8003208 <_ai_platform_release_crc>
 800344c:	f104 0010 	add.w	r0, r4, #16
 8003450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003454:	f000 bef4 	b.w	8004240 <core_get_error>
 8003458:	a1c00100 	.word	0xa1c00100
 800345c:	e0002000 	.word	0xe0002000
 8003460:	e0042000 	.word	0xe0042000
 8003464:	58024c08 	.word	0x58024c08
 8003468:	58024c00 	.word	0x58024c00
 800346c:	f407a5c2 	.word	0xf407a5c2
 8003470:	b5e8b5cd 	.word	0xb5e8b5cd
 8003474:	40023008 	.word	0x40023008
 8003478:	40023000 	.word	0x40023000

0800347c <ai_platform_network_set_error>:
 800347c:	b110      	cbz	r0, 8003484 <ai_platform_network_set_error+0x8>
 800347e:	3010      	adds	r0, #16
 8003480:	f000 bee4 	b.w	800424c <core_set_error>
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop

08003488 <ai_platform_inputs_get>:
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	b085      	sub	sp, #20
 800348e:	2800      	cmp	r0, #0
 8003490:	f000 80a1 	beq.w	80035d6 <ai_platform_inputs_get+0x14e>
 8003494:	4b6d      	ldr	r3, [pc, #436]	; (800364c <ai_platform_inputs_get+0x1c4>)
 8003496:	6802      	ldr	r2, [r0, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	4607      	mov	r7, r0
 800349c:	f040 809b 	bne.w	80035d6 <ai_platform_inputs_get+0x14e>
 80034a0:	4a6b      	ldr	r2, [pc, #428]	; (8003650 <ai_platform_inputs_get+0x1c8>)
 80034a2:	6813      	ldr	r3, [r2, #0]
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	468b      	mov	fp, r1
 80034ac:	f7ff feaa 	bl	8003204 <_ai_platform_acquire_crc>
 80034b0:	4b68      	ldr	r3, [pc, #416]	; (8003654 <ai_platform_inputs_get+0x1cc>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034bc:	d00d      	beq.n	80034da <ai_platform_inputs_get+0x52>
 80034be:	4b66      	ldr	r3, [pc, #408]	; (8003658 <ai_platform_inputs_get+0x1d0>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	2a00      	cmp	r2, #0
 80034c8:	d1fc      	bne.n	80034c4 <ai_platform_inputs_get+0x3c>
 80034ca:	4b64      	ldr	r3, [pc, #400]	; (800365c <ai_platform_inputs_get+0x1d4>)
 80034cc:	4a64      	ldr	r2, [pc, #400]	; (8003660 <ai_platform_inputs_get+0x1d8>)
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b64      	ldr	r3, [pc, #400]	; (8003664 <ai_platform_inputs_get+0x1dc>)
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d00d      	beq.n	80034f4 <ai_platform_inputs_get+0x6c>
 80034d8:	e7fe      	b.n	80034d8 <ai_platform_inputs_get+0x50>
 80034da:	4b63      	ldr	r3, [pc, #396]	; (8003668 <ai_platform_inputs_get+0x1e0>)
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	2a00      	cmp	r2, #0
 80034e4:	d1fc      	bne.n	80034e0 <ai_platform_inputs_get+0x58>
 80034e6:	4b61      	ldr	r3, [pc, #388]	; (800366c <ai_platform_inputs_get+0x1e4>)
 80034e8:	4a5d      	ldr	r2, [pc, #372]	; (8003660 <ai_platform_inputs_get+0x1d8>)
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <ai_platform_inputs_get+0x1dc>)
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d16f      	bne.n	80035d4 <ai_platform_inputs_get+0x14c>
 80034f4:	f7ff fe88 	bl	8003208 <_ai_platform_release_crc>
 80034f8:	f1bb 0f00 	cmp.w	fp, #0
 80034fc:	d002      	beq.n	8003504 <ai_platform_inputs_get+0x7c>
 80034fe:	2300      	movs	r3, #0
 8003500:	f8ab 3000 	strh.w	r3, [fp]
 8003504:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8081 	beq.w	800360e <ai_platform_inputs_get+0x186>
 800350c:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800350e:	2e00      	cmp	r6, #0
 8003510:	d07d      	beq.n	800360e <ai_platform_inputs_get+0x186>
 8003512:	8833      	ldrh	r3, [r6, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d07a      	beq.n	800360e <ai_platform_inputs_get+0x186>
 8003518:	6873      	ldr	r3, [r6, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d077      	beq.n	800360e <ai_platform_inputs_get+0x186>
 800351e:	681d      	ldr	r5, [r3, #0]
 8003520:	2d00      	cmp	r5, #0
 8003522:	d074      	beq.n	800360e <ai_platform_inputs_get+0x186>
 8003524:	f04f 0800 	mov.w	r8, #0
 8003528:	f8cd b008 	str.w	fp, [sp, #8]
 800352c:	46c1      	mov	r9, r8
 800352e:	46bb      	mov	fp, r7
 8003530:	68b0      	ldr	r0, [r6, #8]
 8003532:	69aa      	ldr	r2, [r5, #24]
 8003534:	68ab      	ldr	r3, [r5, #8]
 8003536:	6844      	ldr	r4, [r0, #4]
 8003538:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800353c:	6810      	ldr	r0, [r2, #0]
 800353e:	68ef      	ldr	r7, [r5, #12]
 8003540:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003544:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	9203      	str	r2, [sp, #12]
 800354c:	f002 fff4 	bl	8006538 <ai_array_to_buffer_fmt>
 8003550:	9a03      	ldr	r2, [sp, #12]
 8003552:	4601      	mov	r1, r0
 8003554:	69a8      	ldr	r0, [r5, #24]
 8003556:	eb0a 0302 	add.w	r3, sl, r2
 800355a:	4444      	add	r4, r8
 800355c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8003560:	b16b      	cbz	r3, 800357e <ai_platform_inputs_get+0xf6>
 8003562:	2000      	movs	r0, #0
 8003564:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8003568:	6828      	ldr	r0, [r5, #0]
 800356a:	6058      	str	r0, [r3, #4]
 800356c:	2800      	cmp	r0, #0
 800356e:	d058      	beq.n	8003622 <ai_platform_inputs_get+0x19a>
 8003570:	8840      	ldrh	r0, [r0, #2]
 8003572:	2800      	cmp	r0, #0
 8003574:	d055      	beq.n	8003622 <ai_platform_inputs_get+0x19a>
 8003576:	2001      	movs	r0, #1
 8003578:	f84a 0002 	str.w	r0, [sl, r2]
 800357c:	69a8      	ldr	r0, [r5, #24]
 800357e:	6842      	ldr	r2, [r0, #4]
 8003580:	6122      	str	r2, [r4, #16]
 8003582:	f04f 0001 	mov.w	r0, #1
 8003586:	7520      	strb	r0, [r4, #20]
 8003588:	9a01      	ldr	r2, [sp, #4]
 800358a:	6960      	ldr	r0, [r4, #20]
 800358c:	60a3      	str	r3, [r4, #8]
 800358e:	f362 201f 	bfi	r0, r2, #8, #24
 8003592:	e9c4 1e00 	strd	r1, lr, [r4]
 8003596:	e9c4 0705 	strd	r0, r7, [r4, #20]
 800359a:	2300      	movs	r3, #0
 800359c:	60e3      	str	r3, [r4, #12]
 800359e:	8830      	ldrh	r0, [r6, #0]
 80035a0:	f109 0301 	add.w	r3, r9, #1
 80035a4:	4283      	cmp	r3, r0
 80035a6:	4699      	mov	r9, r3
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	d207      	bcs.n	80035bc <ai_platform_inputs_get+0x134>
 80035ac:	6870      	ldr	r0, [r6, #4]
 80035ae:	b128      	cbz	r0, 80035bc <ai_platform_inputs_get+0x134>
 80035b0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 80035b4:	f108 081c 	add.w	r8, r8, #28
 80035b8:	2d00      	cmp	r5, #0
 80035ba:	d1b9      	bne.n	8003530 <ai_platform_inputs_get+0xa8>
 80035bc:	465f      	mov	r7, fp
 80035be:	f8dd b008 	ldr.w	fp, [sp, #8]
 80035c2:	b322      	cbz	r2, 800360e <ai_platform_inputs_get+0x186>
 80035c4:	68b3      	ldr	r3, [r6, #8]
 80035c6:	6858      	ldr	r0, [r3, #4]
 80035c8:	f1bb 0f00 	cmp.w	fp, #0
 80035cc:	d026      	beq.n	800361c <ai_platform_inputs_get+0x194>
 80035ce:	f8ab 2000 	strh.w	r2, [fp]
 80035d2:	e023      	b.n	800361c <ai_platform_inputs_get+0x194>
 80035d4:	e7fe      	b.n	80035d4 <ai_platform_inputs_get+0x14c>
 80035d6:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <ai_platform_inputs_get+0x1c8>)
 80035d8:	6813      	ldr	r3, [r2, #0]
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	f7ff fe10 	bl	8003204 <_ai_platform_acquire_crc>
 80035e4:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <ai_platform_inputs_get+0x1cc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f0:	d01a      	beq.n	8003628 <ai_platform_inputs_get+0x1a0>
 80035f2:	4b19      	ldr	r3, [pc, #100]	; (8003658 <ai_platform_inputs_get+0x1d0>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	2a00      	cmp	r2, #0
 80035fc:	d1fc      	bne.n	80035f8 <ai_platform_inputs_get+0x170>
 80035fe:	4b17      	ldr	r3, [pc, #92]	; (800365c <ai_platform_inputs_get+0x1d4>)
 8003600:	4a17      	ldr	r2, [pc, #92]	; (8003660 <ai_platform_inputs_get+0x1d8>)
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4b17      	ldr	r3, [pc, #92]	; (8003664 <ai_platform_inputs_get+0x1dc>)
 8003608:	429a      	cmp	r2, r3
 800360a:	d01b      	beq.n	8003644 <ai_platform_inputs_get+0x1bc>
 800360c:	e7fe      	b.n	800360c <ai_platform_inputs_get+0x184>
 800360e:	f107 0010 	add.w	r0, r7, #16
 8003612:	2218      	movs	r2, #24
 8003614:	2111      	movs	r1, #17
 8003616:	f000 fe19 	bl	800424c <core_set_error>
 800361a:	2000      	movs	r0, #0
 800361c:	b005      	add	sp, #20
 800361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003622:	69a8      	ldr	r0, [r5, #24]
 8003624:	2300      	movs	r3, #0
 8003626:	e7aa      	b.n	800357e <ai_platform_inputs_get+0xf6>
 8003628:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <ai_platform_inputs_get+0x1e0>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2a00      	cmp	r2, #0
 8003632:	d1fc      	bne.n	800362e <ai_platform_inputs_get+0x1a6>
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <ai_platform_inputs_get+0x1e4>)
 8003636:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <ai_platform_inputs_get+0x1d8>)
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <ai_platform_inputs_get+0x1dc>)
 800363e:	429a      	cmp	r2, r3
 8003640:	d000      	beq.n	8003644 <ai_platform_inputs_get+0x1bc>
 8003642:	e7fe      	b.n	8003642 <ai_platform_inputs_get+0x1ba>
 8003644:	f7ff fde0 	bl	8003208 <_ai_platform_release_crc>
 8003648:	2000      	movs	r0, #0
 800364a:	e7e7      	b.n	800361c <ai_platform_inputs_get+0x194>
 800364c:	a1c00100 	.word	0xa1c00100
 8003650:	e0002000 	.word	0xe0002000
 8003654:	e0042000 	.word	0xe0042000
 8003658:	58024c08 	.word	0x58024c08
 800365c:	58024c00 	.word	0x58024c00
 8003660:	f407a5c2 	.word	0xf407a5c2
 8003664:	b5e8b5cd 	.word	0xb5e8b5cd
 8003668:	40023008 	.word	0x40023008
 800366c:	40023000 	.word	0x40023000

08003670 <ai_platform_outputs_get>:
 8003670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003674:	b085      	sub	sp, #20
 8003676:	2800      	cmp	r0, #0
 8003678:	f000 80a9 	beq.w	80037ce <ai_platform_outputs_get+0x15e>
 800367c:	4b70      	ldr	r3, [pc, #448]	; (8003840 <ai_platform_outputs_get+0x1d0>)
 800367e:	6802      	ldr	r2, [r0, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	4607      	mov	r7, r0
 8003684:	f040 80a3 	bne.w	80037ce <ai_platform_outputs_get+0x15e>
 8003688:	4a6e      	ldr	r2, [pc, #440]	; (8003844 <ai_platform_outputs_get+0x1d4>)
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	468b      	mov	fp, r1
 8003694:	f7ff fdb6 	bl	8003204 <_ai_platform_acquire_crc>
 8003698:	4b6b      	ldr	r3, [pc, #428]	; (8003848 <ai_platform_outputs_get+0x1d8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a4:	d00d      	beq.n	80036c2 <ai_platform_outputs_get+0x52>
 80036a6:	4b69      	ldr	r3, [pc, #420]	; (800384c <ai_platform_outputs_get+0x1dc>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	d1fc      	bne.n	80036ac <ai_platform_outputs_get+0x3c>
 80036b2:	4b67      	ldr	r3, [pc, #412]	; (8003850 <ai_platform_outputs_get+0x1e0>)
 80036b4:	4a67      	ldr	r2, [pc, #412]	; (8003854 <ai_platform_outputs_get+0x1e4>)
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b67      	ldr	r3, [pc, #412]	; (8003858 <ai_platform_outputs_get+0x1e8>)
 80036bc:	429a      	cmp	r2, r3
 80036be:	d00d      	beq.n	80036dc <ai_platform_outputs_get+0x6c>
 80036c0:	e7fe      	b.n	80036c0 <ai_platform_outputs_get+0x50>
 80036c2:	4b66      	ldr	r3, [pc, #408]	; (800385c <ai_platform_outputs_get+0x1ec>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	2a00      	cmp	r2, #0
 80036cc:	d1fc      	bne.n	80036c8 <ai_platform_outputs_get+0x58>
 80036ce:	4b64      	ldr	r3, [pc, #400]	; (8003860 <ai_platform_outputs_get+0x1f0>)
 80036d0:	4a60      	ldr	r2, [pc, #384]	; (8003854 <ai_platform_outputs_get+0x1e4>)
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b60      	ldr	r3, [pc, #384]	; (8003858 <ai_platform_outputs_get+0x1e8>)
 80036d8:	429a      	cmp	r2, r3
 80036da:	d177      	bne.n	80037cc <ai_platform_outputs_get+0x15c>
 80036dc:	f7ff fd94 	bl	8003208 <_ai_platform_release_crc>
 80036e0:	f1bb 0f00 	cmp.w	fp, #0
 80036e4:	d002      	beq.n	80036ec <ai_platform_outputs_get+0x7c>
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8ab 3000 	strh.w	r3, [fp]
 80036ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	f240 809a 	bls.w	8003828 <ai_platform_outputs_get+0x1b8>
 80036f4:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80036f6:	f116 0f0c 	cmn.w	r6, #12
 80036fa:	f000 8095 	beq.w	8003828 <ai_platform_outputs_get+0x1b8>
 80036fe:	89b3      	ldrh	r3, [r6, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8091 	beq.w	8003828 <ai_platform_outputs_get+0x1b8>
 8003706:	6933      	ldr	r3, [r6, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 808d 	beq.w	8003828 <ai_platform_outputs_get+0x1b8>
 800370e:	681d      	ldr	r5, [r3, #0]
 8003710:	2d00      	cmp	r5, #0
 8003712:	f000 8089 	beq.w	8003828 <ai_platform_outputs_get+0x1b8>
 8003716:	f04f 0800 	mov.w	r8, #0
 800371a:	f8cd b008 	str.w	fp, [sp, #8]
 800371e:	46c1      	mov	r9, r8
 8003720:	46bb      	mov	fp, r7
 8003722:	6970      	ldr	r0, [r6, #20]
 8003724:	69aa      	ldr	r2, [r5, #24]
 8003726:	68ab      	ldr	r3, [r5, #8]
 8003728:	6844      	ldr	r4, [r0, #4]
 800372a:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800372e:	6810      	ldr	r0, [r2, #0]
 8003730:	68ef      	ldr	r7, [r5, #12]
 8003732:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003736:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	9203      	str	r2, [sp, #12]
 800373e:	f002 fefb 	bl	8006538 <ai_array_to_buffer_fmt>
 8003742:	9a03      	ldr	r2, [sp, #12]
 8003744:	4601      	mov	r1, r0
 8003746:	69a8      	ldr	r0, [r5, #24]
 8003748:	eb0a 0302 	add.w	r3, sl, r2
 800374c:	4444      	add	r4, r8
 800374e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8003752:	b16b      	cbz	r3, 8003770 <ai_platform_outputs_get+0x100>
 8003754:	2000      	movs	r0, #0
 8003756:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800375a:	6828      	ldr	r0, [r5, #0]
 800375c:	6058      	str	r0, [r3, #4]
 800375e:	2800      	cmp	r0, #0
 8003760:	d051      	beq.n	8003806 <ai_platform_outputs_get+0x196>
 8003762:	8840      	ldrh	r0, [r0, #2]
 8003764:	2800      	cmp	r0, #0
 8003766:	d04e      	beq.n	8003806 <ai_platform_outputs_get+0x196>
 8003768:	2001      	movs	r0, #1
 800376a:	f84a 0002 	str.w	r0, [sl, r2]
 800376e:	69a8      	ldr	r0, [r5, #24]
 8003770:	6842      	ldr	r2, [r0, #4]
 8003772:	6122      	str	r2, [r4, #16]
 8003774:	f04f 0001 	mov.w	r0, #1
 8003778:	7520      	strb	r0, [r4, #20]
 800377a:	9a01      	ldr	r2, [sp, #4]
 800377c:	6960      	ldr	r0, [r4, #20]
 800377e:	60a3      	str	r3, [r4, #8]
 8003780:	f362 201f 	bfi	r0, r2, #8, #24
 8003784:	e9c4 1e00 	strd	r1, lr, [r4]
 8003788:	e9c4 0705 	strd	r0, r7, [r4, #20]
 800378c:	2300      	movs	r3, #0
 800378e:	60e3      	str	r3, [r4, #12]
 8003790:	89b0      	ldrh	r0, [r6, #12]
 8003792:	f109 0301 	add.w	r3, r9, #1
 8003796:	4283      	cmp	r3, r0
 8003798:	4699      	mov	r9, r3
 800379a:	b29a      	uxth	r2, r3
 800379c:	d207      	bcs.n	80037ae <ai_platform_outputs_get+0x13e>
 800379e:	6930      	ldr	r0, [r6, #16]
 80037a0:	b128      	cbz	r0, 80037ae <ai_platform_outputs_get+0x13e>
 80037a2:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 80037a6:	f108 081c 	add.w	r8, r8, #28
 80037aa:	2d00      	cmp	r5, #0
 80037ac:	d1b9      	bne.n	8003722 <ai_platform_outputs_get+0xb2>
 80037ae:	465f      	mov	r7, fp
 80037b0:	f8dd b008 	ldr.w	fp, [sp, #8]
 80037b4:	2a00      	cmp	r2, #0
 80037b6:	d037      	beq.n	8003828 <ai_platform_outputs_get+0x1b8>
 80037b8:	6973      	ldr	r3, [r6, #20]
 80037ba:	6858      	ldr	r0, [r3, #4]
 80037bc:	f1bb 0f00 	cmp.w	fp, #0
 80037c0:	d001      	beq.n	80037c6 <ai_platform_outputs_get+0x156>
 80037c2:	f8ab 2000 	strh.w	r2, [fp]
 80037c6:	b005      	add	sp, #20
 80037c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037cc:	e7fe      	b.n	80037cc <ai_platform_outputs_get+0x15c>
 80037ce:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <ai_platform_outputs_get+0x1d4>)
 80037d0:	6813      	ldr	r3, [r2, #0]
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	f7ff fd14 	bl	8003204 <_ai_platform_acquire_crc>
 80037dc:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <ai_platform_outputs_get+0x1d8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d010      	beq.n	800380c <ai_platform_outputs_get+0x19c>
 80037ea:	4b18      	ldr	r3, [pc, #96]	; (800384c <ai_platform_outputs_get+0x1dc>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	2a00      	cmp	r2, #0
 80037f4:	d1fc      	bne.n	80037f0 <ai_platform_outputs_get+0x180>
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <ai_platform_outputs_get+0x1e0>)
 80037f8:	4a16      	ldr	r2, [pc, #88]	; (8003854 <ai_platform_outputs_get+0x1e4>)
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b16      	ldr	r3, [pc, #88]	; (8003858 <ai_platform_outputs_get+0x1e8>)
 8003800:	429a      	cmp	r2, r3
 8003802:	d019      	beq.n	8003838 <ai_platform_outputs_get+0x1c8>
 8003804:	e7fe      	b.n	8003804 <ai_platform_outputs_get+0x194>
 8003806:	69a8      	ldr	r0, [r5, #24]
 8003808:	2300      	movs	r3, #0
 800380a:	e7b1      	b.n	8003770 <ai_platform_outputs_get+0x100>
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <ai_platform_outputs_get+0x1ec>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	2a00      	cmp	r2, #0
 8003816:	d1fc      	bne.n	8003812 <ai_platform_outputs_get+0x1a2>
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <ai_platform_outputs_get+0x1f0>)
 800381a:	4a0e      	ldr	r2, [pc, #56]	; (8003854 <ai_platform_outputs_get+0x1e4>)
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <ai_platform_outputs_get+0x1e8>)
 8003822:	429a      	cmp	r2, r3
 8003824:	d008      	beq.n	8003838 <ai_platform_outputs_get+0x1c8>
 8003826:	e7fe      	b.n	8003826 <ai_platform_outputs_get+0x1b6>
 8003828:	f107 0010 	add.w	r0, r7, #16
 800382c:	2218      	movs	r2, #24
 800382e:	2111      	movs	r1, #17
 8003830:	f000 fd0c 	bl	800424c <core_set_error>
 8003834:	2000      	movs	r0, #0
 8003836:	e7c6      	b.n	80037c6 <ai_platform_outputs_get+0x156>
 8003838:	f7ff fce6 	bl	8003208 <_ai_platform_release_crc>
 800383c:	2000      	movs	r0, #0
 800383e:	e7c2      	b.n	80037c6 <ai_platform_outputs_get+0x156>
 8003840:	a1c00100 	.word	0xa1c00100
 8003844:	e0002000 	.word	0xe0002000
 8003848:	e0042000 	.word	0xe0042000
 800384c:	58024c08 	.word	0x58024c08
 8003850:	58024c00 	.word	0x58024c00
 8003854:	f407a5c2 	.word	0xf407a5c2
 8003858:	b5e8b5cd 	.word	0xb5e8b5cd
 800385c:	40023008 	.word	0x40023008
 8003860:	40023000 	.word	0x40023000

08003864 <ai_platform_network_create>:
 8003864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003868:	b083      	sub	sp, #12
 800386a:	4606      	mov	r6, r0
 800386c:	4615      	mov	r5, r2
 800386e:	461f      	mov	r7, r3
 8003870:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003874:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003878:	f7ff fcc4 	bl	8003204 <_ai_platform_acquire_crc>
 800387c:	b178      	cbz	r0, 800389e <ai_platform_network_create+0x3a>
 800387e:	4b5f      	ldr	r3, [pc, #380]	; (80039fc <ai_platform_network_create+0x198>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	4602      	mov	r2, r0
 800388c:	d00d      	beq.n	80038aa <ai_platform_network_create+0x46>
 800388e:	4b5c      	ldr	r3, [pc, #368]	; (8003a00 <ai_platform_network_create+0x19c>)
 8003890:	2118      	movs	r1, #24
 8003892:	6019      	str	r1, [r3, #0]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	2918      	cmp	r1, #24
 8003898:	d01a      	beq.n	80038d0 <ai_platform_network_create+0x6c>
 800389a:	f7ff fcb5 	bl	8003208 <_ai_platform_release_crc>
 800389e:	f244 1333 	movw	r3, #16691	; 0x4133
 80038a2:	4618      	mov	r0, r3
 80038a4:	b003      	add	sp, #12
 80038a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038aa:	4b56      	ldr	r3, [pc, #344]	; (8003a04 <ai_platform_network_create+0x1a0>)
 80038ac:	2101      	movs	r1, #1
 80038ae:	6019      	str	r1, [r3, #0]
 80038b0:	2114      	movs	r1, #20
 80038b2:	e001      	b.n	80038b8 <ai_platform_network_create+0x54>
 80038b4:	3901      	subs	r1, #1
 80038b6:	d002      	beq.n	80038be <ai_platform_network_create+0x5a>
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d1fa      	bne.n	80038b4 <ai_platform_network_create+0x50>
 80038be:	4b51      	ldr	r3, [pc, #324]	; (8003a04 <ai_platform_network_create+0x1a0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	b91b      	cbnz	r3, 80038cc <ai_platform_network_create+0x68>
 80038c4:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <ai_platform_network_create+0x1a4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3301      	adds	r3, #1
 80038ca:	d006      	beq.n	80038da <ai_platform_network_create+0x76>
 80038cc:	4610      	mov	r0, r2
 80038ce:	e7e4      	b.n	800389a <ai_platform_network_create+0x36>
 80038d0:	2101      	movs	r1, #1
 80038d2:	6019      	str	r1, [r3, #0]
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	2900      	cmp	r1, #0
 80038d8:	d1fc      	bne.n	80038d4 <ai_platform_network_create+0x70>
 80038da:	4610      	mov	r0, r2
 80038dc:	f7ff fc94 	bl	8003208 <_ai_platform_release_crc>
 80038e0:	4a4a      	ldr	r2, [pc, #296]	; (8003a0c <ai_platform_network_create+0x1a8>)
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	f7ff fc8b 	bl	8003204 <_ai_platform_acquire_crc>
 80038ee:	4b43      	ldr	r3, [pc, #268]	; (80039fc <ai_platform_network_create+0x198>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fa:	d00d      	beq.n	8003918 <ai_platform_network_create+0xb4>
 80038fc:	4b40      	ldr	r3, [pc, #256]	; (8003a00 <ai_platform_network_create+0x19c>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	2a00      	cmp	r2, #0
 8003906:	d1fc      	bne.n	8003902 <ai_platform_network_create+0x9e>
 8003908:	4b41      	ldr	r3, [pc, #260]	; (8003a10 <ai_platform_network_create+0x1ac>)
 800390a:	4a42      	ldr	r2, [pc, #264]	; (8003a14 <ai_platform_network_create+0x1b0>)
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <ai_platform_network_create+0x1b4>)
 8003912:	429a      	cmp	r2, r3
 8003914:	d00e      	beq.n	8003934 <ai_platform_network_create+0xd0>
 8003916:	e7fe      	b.n	8003916 <ai_platform_network_create+0xb2>
 8003918:	4b3a      	ldr	r3, [pc, #232]	; (8003a04 <ai_platform_network_create+0x1a0>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	2a00      	cmp	r2, #0
 8003922:	d1fc      	bne.n	800391e <ai_platform_network_create+0xba>
 8003924:	4b38      	ldr	r3, [pc, #224]	; (8003a08 <ai_platform_network_create+0x1a4>)
 8003926:	4a3b      	ldr	r2, [pc, #236]	; (8003a14 <ai_platform_network_create+0x1b0>)
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b3a      	ldr	r3, [pc, #232]	; (8003a18 <ai_platform_network_create+0x1b4>)
 800392e:	429a      	cmp	r2, r3
 8003930:	d000      	beq.n	8003934 <ai_platform_network_create+0xd0>
 8003932:	e7fe      	b.n	8003932 <ai_platform_network_create+0xce>
 8003934:	f7ff fc68 	bl	8003208 <_ai_platform_release_crc>
 8003938:	b1ae      	cbz	r6, 8003966 <ai_platform_network_create+0x102>
 800393a:	4b38      	ldr	r3, [pc, #224]	; (8003a1c <ai_platform_network_create+0x1b8>)
 800393c:	602b      	str	r3, [r5, #0]
 800393e:	6035      	str	r5, [r6, #0]
 8003940:	f000 fc7c 	bl	800423c <core_init>
 8003944:	b990      	cbnz	r0, 800396c <ai_platform_network_create+0x108>
 8003946:	2430      	movs	r4, #48	; 0x30
 8003948:	2300      	movs	r3, #0
 800394a:	6033      	str	r3, [r6, #0]
 800394c:	2610      	movs	r6, #16
 800394e:	464a      	mov	r2, r9
 8003950:	4641      	mov	r1, r8
 8003952:	4638      	mov	r0, r7
 8003954:	f002 fdd6 	bl	8006504 <ai_version_get>
 8003958:	2300      	movs	r3, #0
 800395a:	f364 0307 	bfi	r3, r4, #0, #8
 800395e:	6468      	str	r0, [r5, #68]	; 0x44
 8003960:	f366 231f 	bfi	r3, r6, #8, #24
 8003964:	e79d      	b.n	80038a2 <ai_platform_network_create+0x3e>
 8003966:	f241 0310 	movw	r3, #4112	; 0x1010
 800396a:	e79a      	b.n	80038a2 <ai_platform_network_create+0x3e>
 800396c:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <ai_platform_network_create+0x1a8>)
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	f7ff fc45 	bl	8003204 <_ai_platform_acquire_crc>
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <ai_platform_network_create+0x198>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003986:	d00d      	beq.n	80039a4 <ai_platform_network_create+0x140>
 8003988:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <ai_platform_network_create+0x19c>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2a00      	cmp	r2, #0
 8003992:	d1fc      	bne.n	800398e <ai_platform_network_create+0x12a>
 8003994:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <ai_platform_network_create+0x1ac>)
 8003996:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <ai_platform_network_create+0x1b0>)
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <ai_platform_network_create+0x1b4>)
 800399e:	429a      	cmp	r2, r3
 80039a0:	d00e      	beq.n	80039c0 <ai_platform_network_create+0x15c>
 80039a2:	e7fe      	b.n	80039a2 <ai_platform_network_create+0x13e>
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <ai_platform_network_create+0x1a0>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	2a00      	cmp	r2, #0
 80039ae:	d1fc      	bne.n	80039aa <ai_platform_network_create+0x146>
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <ai_platform_network_create+0x1a4>)
 80039b2:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <ai_platform_network_create+0x1b0>)
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <ai_platform_network_create+0x1b4>)
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d000      	beq.n	80039c0 <ai_platform_network_create+0x15c>
 80039be:	e7fe      	b.n	80039be <ai_platform_network_create+0x15a>
 80039c0:	f7ff fc22 	bl	8003208 <_ai_platform_release_crc>
 80039c4:	2200      	movs	r2, #0
 80039c6:	4641      	mov	r1, r8
 80039c8:	4638      	mov	r0, r7
 80039ca:	f002 fd9b 	bl	8006504 <ai_version_get>
 80039ce:	2200      	movs	r2, #0
 80039d0:	4604      	mov	r4, r0
 80039d2:	2105      	movs	r1, #5
 80039d4:	2001      	movs	r0, #1
 80039d6:	f002 fd95 	bl	8006504 <ai_version_get>
 80039da:	4284      	cmp	r4, r0
 80039dc:	d001      	beq.n	80039e2 <ai_platform_network_create+0x17e>
 80039de:	2401      	movs	r4, #1
 80039e0:	e7b2      	b.n	8003948 <ai_platform_network_create+0xe4>
 80039e2:	a802      	add	r0, sp, #8
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <ai_platform_network_create+0x1bc>)
 80039e6:	f840 3d04 	str.w	r3, [r0, #-4]!
 80039ea:	f002 fce7 	bl	80063bc <ai_check_custom_types>
 80039ee:	b110      	cbz	r0, 80039f6 <ai_platform_network_create+0x192>
 80039f0:	2600      	movs	r6, #0
 80039f2:	4634      	mov	r4, r6
 80039f4:	e7ab      	b.n	800394e <ai_platform_network_create+0xea>
 80039f6:	2402      	movs	r4, #2
 80039f8:	e7a6      	b.n	8003948 <ai_platform_network_create+0xe4>
 80039fa:	bf00      	nop
 80039fc:	e0042000 	.word	0xe0042000
 8003a00:	58024c08 	.word	0x58024c08
 8003a04:	40023008 	.word	0x40023008
 8003a08:	40023000 	.word	0x40023000
 8003a0c:	e0002000 	.word	0xe0002000
 8003a10:	58024c00 	.word	0x58024c00
 8003a14:	f407a5c2 	.word	0xf407a5c2
 8003a18:	b5e8b5cd 	.word	0xb5e8b5cd
 8003a1c:	a1c00100 	.word	0xa1c00100
 8003a20:	84048403 	.word	0x84048403

08003a24 <ai_platform_network_init>:
 8003a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d04b      	beq.n	8003ac4 <ai_platform_network_init+0xa0>
 8003a2c:	4b79      	ldr	r3, [pc, #484]	; (8003c14 <ai_platform_network_init+0x1f0>)
 8003a2e:	6802      	ldr	r2, [r0, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	4604      	mov	r4, r0
 8003a34:	d146      	bne.n	8003ac4 <ai_platform_network_init+0xa0>
 8003a36:	4a78      	ldr	r2, [pc, #480]	; (8003c18 <ai_platform_network_init+0x1f4>)
 8003a38:	6813      	ldr	r3, [r2, #0]
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	460e      	mov	r6, r1
 8003a42:	f7ff fbdf 	bl	8003204 <_ai_platform_acquire_crc>
 8003a46:	4b75      	ldr	r3, [pc, #468]	; (8003c1c <ai_platform_network_init+0x1f8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a52:	d00d      	beq.n	8003a70 <ai_platform_network_init+0x4c>
 8003a54:	4b72      	ldr	r3, [pc, #456]	; (8003c20 <ai_platform_network_init+0x1fc>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2a00      	cmp	r2, #0
 8003a5e:	d1fc      	bne.n	8003a5a <ai_platform_network_init+0x36>
 8003a60:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <ai_platform_network_init+0x200>)
 8003a62:	4a71      	ldr	r2, [pc, #452]	; (8003c28 <ai_platform_network_init+0x204>)
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <ai_platform_network_init+0x208>)
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d00d      	beq.n	8003a8a <ai_platform_network_init+0x66>
 8003a6e:	e7fe      	b.n	8003a6e <ai_platform_network_init+0x4a>
 8003a70:	4b6f      	ldr	r3, [pc, #444]	; (8003c30 <ai_platform_network_init+0x20c>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	2a00      	cmp	r2, #0
 8003a7a:	d1fc      	bne.n	8003a76 <ai_platform_network_init+0x52>
 8003a7c:	4b6d      	ldr	r3, [pc, #436]	; (8003c34 <ai_platform_network_init+0x210>)
 8003a7e:	4a6a      	ldr	r2, [pc, #424]	; (8003c28 <ai_platform_network_init+0x204>)
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b69      	ldr	r3, [pc, #420]	; (8003c2c <ai_platform_network_init+0x208>)
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d11b      	bne.n	8003ac2 <ai_platform_network_init+0x9e>
 8003a8a:	f7ff fbbd 	bl	8003208 <_ai_platform_release_crc>
 8003a8e:	2e00      	cmp	r6, #0
 8003a90:	d034      	beq.n	8003afc <ai_platform_network_init+0xd8>
 8003a92:	4b69      	ldr	r3, [pc, #420]	; (8003c38 <ai_platform_network_init+0x214>)
 8003a94:	6832      	ldr	r2, [r6, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d149      	bne.n	8003b2e <ai_platform_network_init+0x10a>
 8003a9a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8003a9e:	6930      	ldr	r0, [r6, #16]
 8003aa0:	89b3      	ldrh	r3, [r6, #12]
 8003aa2:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8003aa6:	62a0      	str	r0, [r4, #40]	; 0x28
 8003aa8:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8003aac:	2203      	movs	r2, #3
 8003aae:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8003ab2:	84a3      	strh	r3, [r4, #36]	; 0x24
 8003ab4:	60e2      	str	r2, [r4, #12]
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f002 fcaa 	bl	8006410 <ai_layers_init_all>
 8003abc:	4620      	mov	r0, r4
 8003abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ac2:	e7fe      	b.n	8003ac2 <ai_platform_network_init+0x9e>
 8003ac4:	4a54      	ldr	r2, [pc, #336]	; (8003c18 <ai_platform_network_init+0x1f4>)
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	f7ff fb99 	bl	8003204 <_ai_platform_acquire_crc>
 8003ad2:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <ai_platform_network_init+0x1f8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ade:	d015      	beq.n	8003b0c <ai_platform_network_init+0xe8>
 8003ae0:	4b4f      	ldr	r3, [pc, #316]	; (8003c20 <ai_platform_network_init+0x1fc>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	2a00      	cmp	r2, #0
 8003aea:	d1fc      	bne.n	8003ae6 <ai_platform_network_init+0xc2>
 8003aec:	4b4d      	ldr	r3, [pc, #308]	; (8003c24 <ai_platform_network_init+0x200>)
 8003aee:	4a4e      	ldr	r2, [pc, #312]	; (8003c28 <ai_platform_network_init+0x204>)
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b4d      	ldr	r3, [pc, #308]	; (8003c2c <ai_platform_network_init+0x208>)
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d015      	beq.n	8003b26 <ai_platform_network_init+0x102>
 8003afa:	e7fe      	b.n	8003afa <ai_platform_network_init+0xd6>
 8003afc:	f104 0010 	add.w	r0, r4, #16
 8003b00:	2211      	movs	r2, #17
 8003b02:	2110      	movs	r1, #16
 8003b04:	4634      	mov	r4, r6
 8003b06:	f000 fba1 	bl	800424c <core_set_error>
 8003b0a:	e7d7      	b.n	8003abc <ai_platform_network_init+0x98>
 8003b0c:	4b48      	ldr	r3, [pc, #288]	; (8003c30 <ai_platform_network_init+0x20c>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	2a00      	cmp	r2, #0
 8003b16:	d1fc      	bne.n	8003b12 <ai_platform_network_init+0xee>
 8003b18:	4b46      	ldr	r3, [pc, #280]	; (8003c34 <ai_platform_network_init+0x210>)
 8003b1a:	4a43      	ldr	r2, [pc, #268]	; (8003c28 <ai_platform_network_init+0x204>)
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <ai_platform_network_init+0x208>)
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d16d      	bne.n	8003c02 <ai_platform_network_init+0x1de>
 8003b26:	f7ff fb6f 	bl	8003208 <_ai_platform_release_crc>
 8003b2a:	2400      	movs	r4, #0
 8003b2c:	e7c6      	b.n	8003abc <ai_platform_network_init+0x98>
 8003b2e:	4630      	mov	r0, r6
 8003b30:	2101      	movs	r1, #1
 8003b32:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8003b36:	f7ff fb19 	bl	800316c <ai_buffer_get_size>
 8003b3a:	4635      	mov	r5, r6
 8003b3c:	f106 071c 	add.w	r7, r6, #28
 8003b40:	2101      	movs	r1, #1
 8003b42:	4606      	mov	r6, r0
 8003b44:	4638      	mov	r0, r7
 8003b46:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8003b4a:	f7ff fb0f 	bl	800316c <ai_buffer_get_size>
 8003b4e:	2e00      	cmp	r6, #0
 8003b50:	bf0a      	itet	eq
 8003b52:	46b6      	moveq	lr, r6
 8003b54:	f04f 0e01 	movne.w	lr, #1
 8003b58:	4635      	moveq	r5, r6
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	d14b      	bne.n	8003bf6 <ai_platform_network_init+0x1d2>
 8003b5e:	4607      	mov	r7, r0
 8003b60:	4684      	mov	ip, r0
 8003b62:	f1b8 0f00 	cmp.w	r8, #0
 8003b66:	d023      	beq.n	8003bb0 <ai_platform_network_init+0x18c>
 8003b68:	8be3      	ldrh	r3, [r4, #30]
 8003b6a:	4573      	cmp	r3, lr
 8003b6c:	d207      	bcs.n	8003b7e <ai_platform_network_init+0x15a>
 8003b6e:	f104 0010 	add.w	r0, r4, #16
 8003b72:	2212      	movs	r2, #18
 8003b74:	2116      	movs	r1, #22
 8003b76:	f000 fb69 	bl	800424c <core_set_error>
 8003b7a:	2400      	movs	r4, #0
 8003b7c:	e79e      	b.n	8003abc <ai_platform_network_init+0x98>
 8003b7e:	f1be 0f00 	cmp.w	lr, #0
 8003b82:	d006      	beq.n	8003b92 <ai_platform_network_init+0x16e>
 8003b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b86:	6a26      	ldr	r6, [r4, #32]
 8003b88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003b8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b8e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003b92:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003b94:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8003b98:	2600      	movs	r6, #0
 8003b9a:	4563      	cmp	r3, ip
 8003b9c:	83a6      	strh	r6, [r4, #28]
 8003b9e:	d211      	bcs.n	8003bc4 <ai_platform_network_init+0x1a0>
 8003ba0:	f104 0010 	add.w	r0, r4, #16
 8003ba4:	2213      	movs	r2, #19
 8003ba6:	2116      	movs	r1, #22
 8003ba8:	f000 fb50 	bl	800424c <core_set_error>
 8003bac:	4634      	mov	r4, r6
 8003bae:	e785      	b.n	8003abc <ai_platform_network_init+0x98>
 8003bb0:	2e00      	cmp	r6, #0
 8003bb2:	d0d9      	beq.n	8003b68 <ai_platform_network_init+0x144>
 8003bb4:	f104 0010 	add.w	r0, r4, #16
 8003bb8:	2212      	movs	r2, #18
 8003bba:	2110      	movs	r1, #16
 8003bbc:	4644      	mov	r4, r8
 8003bbe:	f000 fb45 	bl	800424c <core_set_error>
 8003bc2:	e77b      	b.n	8003abc <ai_platform_network_init+0x98>
 8003bc4:	f1bc 0f00 	cmp.w	ip, #0
 8003bc8:	d013      	beq.n	8003bf2 <ai_platform_network_init+0x1ce>
 8003bca:	f04f 081c 	mov.w	r8, #28
 8003bce:	fb08 f80c 	mul.w	r8, r8, ip
 8003bd2:	eb07 0e06 	add.w	lr, r7, r6
 8003bd6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003bda:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003bdc:	4435      	add	r5, r6
 8003bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003be4:	361c      	adds	r6, #28
 8003be6:	4546      	cmp	r6, r8
 8003be8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003bec:	d1f1      	bne.n	8003bd2 <ai_platform_network_init+0x1ae>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e75c      	b.n	8003aac <ai_platform_network_init+0x88>
 8003bf2:	4663      	mov	r3, ip
 8003bf4:	e75a      	b.n	8003aac <ai_platform_network_init+0x88>
 8003bf6:	f1b9 0f00 	cmp.w	r9, #0
 8003bfa:	d003      	beq.n	8003c04 <ai_platform_network_init+0x1e0>
 8003bfc:	f04f 0c01 	mov.w	ip, #1
 8003c00:	e7af      	b.n	8003b62 <ai_platform_network_init+0x13e>
 8003c02:	e7fe      	b.n	8003c02 <ai_platform_network_init+0x1de>
 8003c04:	f104 0010 	add.w	r0, r4, #16
 8003c08:	2213      	movs	r2, #19
 8003c0a:	2110      	movs	r1, #16
 8003c0c:	464c      	mov	r4, r9
 8003c0e:	f000 fb1d 	bl	800424c <core_set_error>
 8003c12:	e753      	b.n	8003abc <ai_platform_network_init+0x98>
 8003c14:	a1c00100 	.word	0xa1c00100
 8003c18:	e0002000 	.word	0xe0002000
 8003c1c:	e0042000 	.word	0xe0042000
 8003c20:	58024c08 	.word	0x58024c08
 8003c24:	58024c00 	.word	0x58024c00
 8003c28:	f407a5c2 	.word	0xf407a5c2
 8003c2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003c30:	40023008 	.word	0x40023008
 8003c34:	40023000 	.word	0x40023000
 8003c38:	a1facade 	.word	0xa1facade

08003c3c <ai_platform_network_post_init>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	b120      	cbz	r0, 8003c4a <ai_platform_network_post_init+0xe>
 8003c40:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <ai_platform_network_post_init+0x104>)
 8003c42:	6802      	ldr	r2, [r0, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	4604      	mov	r4, r0
 8003c48:	d02d      	beq.n	8003ca6 <ai_platform_network_post_init+0x6a>
 8003c4a:	4a3e      	ldr	r2, [pc, #248]	; (8003d44 <ai_platform_network_post_init+0x108>)
 8003c4c:	6813      	ldr	r3, [r2, #0]
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	f7ff fad6 	bl	8003204 <_ai_platform_acquire_crc>
 8003c58:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <ai_platform_network_post_init+0x10c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c64:	d00d      	beq.n	8003c82 <ai_platform_network_post_init+0x46>
 8003c66:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <ai_platform_network_post_init+0x110>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	2a00      	cmp	r2, #0
 8003c70:	d1fc      	bne.n	8003c6c <ai_platform_network_post_init+0x30>
 8003c72:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <ai_platform_network_post_init+0x114>)
 8003c74:	4a37      	ldr	r2, [pc, #220]	; (8003d54 <ai_platform_network_post_init+0x118>)
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <ai_platform_network_post_init+0x11c>)
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d00d      	beq.n	8003c9c <ai_platform_network_post_init+0x60>
 8003c80:	e7fe      	b.n	8003c80 <ai_platform_network_post_init+0x44>
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <ai_platform_network_post_init+0x120>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	2a00      	cmp	r2, #0
 8003c8c:	d1fc      	bne.n	8003c88 <ai_platform_network_post_init+0x4c>
 8003c8e:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <ai_platform_network_post_init+0x124>)
 8003c90:	4a30      	ldr	r2, [pc, #192]	; (8003d54 <ai_platform_network_post_init+0x118>)
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4b30      	ldr	r3, [pc, #192]	; (8003d58 <ai_platform_network_post_init+0x11c>)
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d103      	bne.n	8003ca4 <ai_platform_network_post_init+0x68>
 8003c9c:	f7ff fab4 	bl	8003208 <_ai_platform_release_crc>
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	e7fe      	b.n	8003ca4 <ai_platform_network_post_init+0x68>
 8003ca6:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <ai_platform_network_post_init+0x108>)
 8003ca8:	6813      	ldr	r3, [r2, #0]
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	f7ff faa8 	bl	8003204 <_ai_platform_acquire_crc>
 8003cb4:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <ai_platform_network_post_init+0x10c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc0:	d00d      	beq.n	8003cde <ai_platform_network_post_init+0xa2>
 8003cc2:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <ai_platform_network_post_init+0x110>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	2a00      	cmp	r2, #0
 8003ccc:	d1fc      	bne.n	8003cc8 <ai_platform_network_post_init+0x8c>
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <ai_platform_network_post_init+0x114>)
 8003cd0:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <ai_platform_network_post_init+0x118>)
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <ai_platform_network_post_init+0x11c>)
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d00e      	beq.n	8003cfa <ai_platform_network_post_init+0xbe>
 8003cdc:	e7fe      	b.n	8003cdc <ai_platform_network_post_init+0xa0>
 8003cde:	4b1f      	ldr	r3, [pc, #124]	; (8003d5c <ai_platform_network_post_init+0x120>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	d1fc      	bne.n	8003ce4 <ai_platform_network_post_init+0xa8>
 8003cea:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <ai_platform_network_post_init+0x124>)
 8003cec:	4a19      	ldr	r2, [pc, #100]	; (8003d54 <ai_platform_network_post_init+0x118>)
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <ai_platform_network_post_init+0x11c>)
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d000      	beq.n	8003cfa <ai_platform_network_post_init+0xbe>
 8003cf8:	e7fe      	b.n	8003cf8 <ai_platform_network_post_init+0xbc>
 8003cfa:	f7ff fa85 	bl	8003208 <_ai_platform_release_crc>
 8003cfe:	68e3      	ldr	r3, [r4, #12]
 8003d00:	f013 0502 	ands.w	r5, r3, #2
 8003d04:	d011      	beq.n	8003d2a <ai_platform_network_post_init+0xee>
 8003d06:	4620      	mov	r0, r4
 8003d08:	f002 fb96 	bl	8006438 <ai_layers_post_init_all>
 8003d0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d0e:	b1a3      	cbz	r3, 8003d3a <ai_platform_network_post_init+0xfe>
 8003d10:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003d12:	b195      	cbz	r5, 8003d3a <ai_platform_network_post_init+0xfe>
 8003d14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d16:	4629      	mov	r1, r5
 8003d18:	2000      	movs	r0, #0
 8003d1a:	4798      	blx	r3
 8003d1c:	692b      	ldr	r3, [r5, #16]
 8003d1e:	42ab      	cmp	r3, r5
 8003d20:	d00b      	beq.n	8003d3a <ai_platform_network_post_init+0xfe>
 8003d22:	461d      	mov	r5, r3
 8003d24:	b14b      	cbz	r3, 8003d3a <ai_platform_network_post_init+0xfe>
 8003d26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d28:	e7f4      	b.n	8003d14 <ai_platform_network_post_init+0xd8>
 8003d2a:	f104 0010 	add.w	r0, r4, #16
 8003d2e:	2210      	movs	r2, #16
 8003d30:	2111      	movs	r1, #17
 8003d32:	f000 fa8b 	bl	800424c <core_set_error>
 8003d36:	4628      	mov	r0, r5
 8003d38:	bd38      	pop	{r3, r4, r5, pc}
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	bd38      	pop	{r3, r4, r5, pc}
 8003d3e:	bf00      	nop
 8003d40:	a1c00100 	.word	0xa1c00100
 8003d44:	e0002000 	.word	0xe0002000
 8003d48:	e0042000 	.word	0xe0042000
 8003d4c:	58024c08 	.word	0x58024c08
 8003d50:	58024c00 	.word	0x58024c00
 8003d54:	f407a5c2 	.word	0xf407a5c2
 8003d58:	b5e8b5cd 	.word	0xb5e8b5cd
 8003d5c:	40023008 	.word	0x40023008
 8003d60:	40023000 	.word	0x40023000

08003d64 <ai_platform_network_process>:
 8003d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d68:	b085      	sub	sp, #20
 8003d6a:	460d      	mov	r5, r1
 8003d6c:	9202      	str	r2, [sp, #8]
 8003d6e:	4604      	mov	r4, r0
 8003d70:	b120      	cbz	r0, 8003d7c <ai_platform_network_process+0x18>
 8003d72:	4b73      	ldr	r3, [pc, #460]	; (8003f40 <ai_platform_network_process+0x1dc>)
 8003d74:	6802      	ldr	r2, [r0, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	bf18      	it	ne
 8003d7a:	2400      	movne	r4, #0
 8003d7c:	4a71      	ldr	r2, [pc, #452]	; (8003f44 <ai_platform_network_process+0x1e0>)
 8003d7e:	6813      	ldr	r3, [r2, #0]
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	f7ff fa3d 	bl	8003204 <_ai_platform_acquire_crc>
 8003d8a:	4b6f      	ldr	r3, [pc, #444]	; (8003f48 <ai_platform_network_process+0x1e4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d00d      	beq.n	8003db4 <ai_platform_network_process+0x50>
 8003d98:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <ai_platform_network_process+0x1e8>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2a00      	cmp	r2, #0
 8003da2:	d1fc      	bne.n	8003d9e <ai_platform_network_process+0x3a>
 8003da4:	4b6a      	ldr	r3, [pc, #424]	; (8003f50 <ai_platform_network_process+0x1ec>)
 8003da6:	4a6b      	ldr	r2, [pc, #428]	; (8003f54 <ai_platform_network_process+0x1f0>)
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b6a      	ldr	r3, [pc, #424]	; (8003f58 <ai_platform_network_process+0x1f4>)
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d00e      	beq.n	8003dd0 <ai_platform_network_process+0x6c>
 8003db2:	e7fe      	b.n	8003db2 <ai_platform_network_process+0x4e>
 8003db4:	4b69      	ldr	r3, [pc, #420]	; (8003f5c <ai_platform_network_process+0x1f8>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	2a00      	cmp	r2, #0
 8003dbe:	d1fc      	bne.n	8003dba <ai_platform_network_process+0x56>
 8003dc0:	4b67      	ldr	r3, [pc, #412]	; (8003f60 <ai_platform_network_process+0x1fc>)
 8003dc2:	4a64      	ldr	r2, [pc, #400]	; (8003f54 <ai_platform_network_process+0x1f0>)
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b63      	ldr	r3, [pc, #396]	; (8003f58 <ai_platform_network_process+0x1f4>)
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d000      	beq.n	8003dd0 <ai_platform_network_process+0x6c>
 8003dce:	e7fe      	b.n	8003dce <ai_platform_network_process+0x6a>
 8003dd0:	f7ff fa1a 	bl	8003208 <_ai_platform_release_crc>
 8003dd4:	2c00      	cmp	r4, #0
 8003dd6:	f000 8089 	beq.w	8003eec <ai_platform_network_process+0x188>
 8003dda:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8003ddc:	2f00      	cmp	r7, #0
 8003dde:	f040 822b 	bne.w	8004238 <ai_platform_network_process+0x4d4>
 8003de2:	68e3      	ldr	r3, [r4, #12]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2600      	movs	r6, #0
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	6166      	str	r6, [r4, #20]
 8003dee:	f040 821b 	bne.w	8004228 <ai_platform_network_process+0x4c4>
 8003df2:	2d00      	cmp	r5, #0
 8003df4:	f000 809c 	beq.w	8003f30 <ai_platform_network_process+0x1cc>
 8003df8:	2f00      	cmp	r7, #0
 8003dfa:	f000 8099 	beq.w	8003f30 <ai_platform_network_process+0x1cc>
 8003dfe:	883b      	ldrh	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8095 	beq.w	8003f30 <ai_platform_network_process+0x1cc>
 8003e06:	69aa      	ldr	r2, [r5, #24]
 8003e08:	9401      	str	r4, [sp, #4]
 8003e0a:	f8d2 8000 	ldr.w	r8, [r2]
 8003e0e:	429e      	cmp	r6, r3
 8003e10:	f080 80a8 	bcs.w	8003f64 <ai_platform_network_process+0x200>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80a4 	beq.w	8003f64 <ai_platform_network_process+0x200>
 8003e1c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8003e20:	2c00      	cmp	r4, #0
 8003e22:	f000 809f 	beq.w	8003f64 <ai_platform_network_process+0x200>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f8d3 b000 	ldr.w	fp, [r3]
 8003e2c:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8003e30:	eb1b 0a09 	adds.w	sl, fp, r9
 8003e34:	d07b      	beq.n	8003f2e <ai_platform_network_process+0x1ca>
 8003e36:	69a3      	ldr	r3, [r4, #24]
 8003e38:	2101      	movs	r1, #1
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	9303      	str	r3, [sp, #12]
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f7ff f994 	bl	800316c <ai_buffer_get_size>
 8003e44:	9b03      	ldr	r3, [sp, #12]
 8003e46:	4283      	cmp	r3, r0
 8003e48:	d368      	bcc.n	8003f1c <ai_platform_network_process+0x1b8>
 8003e4a:	68e0      	ldr	r0, [r4, #12]
 8003e4c:	69a9      	ldr	r1, [r5, #24]
 8003e4e:	68c2      	ldr	r2, [r0, #12]
 8003e50:	68cb      	ldr	r3, [r1, #12]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d162      	bne.n	8003f1c <ai_platform_network_process+0x1b8>
 8003e56:	6882      	ldr	r2, [r0, #8]
 8003e58:	688b      	ldr	r3, [r1, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d15e      	bne.n	8003f1c <ai_platform_network_process+0x1b8>
 8003e5e:	6842      	ldr	r2, [r0, #4]
 8003e60:	684b      	ldr	r3, [r1, #4]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d15a      	bne.n	8003f1c <ai_platform_network_process+0x1b8>
 8003e66:	69a3      	ldr	r3, [r4, #24]
 8003e68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e6c:	f002 fbde 	bl	800662c <ai_array_get_data_byte_size>
 8003e70:	9003      	str	r0, [sp, #12]
 8003e72:	4620      	mov	r0, r4
 8003e74:	f002 fb4c 	bl	8006510 <get_tensor_byte_size>
 8003e78:	9b03      	ldr	r3, [sp, #12]
 8003e7a:	4283      	cmp	r3, r0
 8003e7c:	d34e      	bcc.n	8003f1c <ai_platform_network_process+0x1b8>
 8003e7e:	69a3      	ldr	r3, [r4, #24]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	f002 fb59 	bl	8006538 <ai_array_to_buffer_fmt>
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	4043      	eors	r3, r0
 8003e8a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8003e8e:	d13c      	bne.n	8003f0a <ai_platform_network_process+0x1a6>
 8003e90:	686b      	ldr	r3, [r5, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d04b      	beq.n	8003f2e <ai_platform_network_process+0x1ca>
 8003e96:	69ab      	ldr	r3, [r5, #24]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	b362      	cbz	r2, 8003ef6 <ai_platform_network_process+0x192>
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	9203      	str	r2, [sp, #12]
 8003ea0:	f002 fb36 	bl	8006510 <get_tensor_byte_size>
 8003ea4:	f8ca 0008 	str.w	r0, [sl, #8]
 8003ea8:	69ab      	ldr	r3, [r5, #24]
 8003eaa:	9a03      	ldr	r2, [sp, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	fb03 f000 	mul.w	r0, r3, r0
 8003eb2:	f8ca 000c 	str.w	r0, [sl, #12]
 8003eb6:	6869      	ldr	r1, [r5, #4]
 8003eb8:	f8ca 1004 	str.w	r1, [sl, #4]
 8003ebc:	686b      	ldr	r3, [r5, #4]
 8003ebe:	4403      	add	r3, r0
 8003ec0:	f84b 3009 	str.w	r3, [fp, r9]
 8003ec4:	69a0      	ldr	r0, [r4, #24]
 8003ec6:	6803      	ldr	r3, [r0, #0]
 8003ec8:	4590      	cmp	r8, r2
 8003eca:	bf38      	it	cc
 8003ecc:	4690      	movcc	r8, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	d408      	bmi.n	8003ee4 <ai_platform_network_process+0x180>
 8003ed2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	4419      	add	r1, r3
 8003eda:	6081      	str	r1, [r0, #8]
 8003edc:	69a3      	ldr	r3, [r4, #24]
 8003ede:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003ee2:	60da      	str	r2, [r3, #12]
 8003ee4:	883b      	ldrh	r3, [r7, #0]
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	351c      	adds	r5, #28
 8003eea:	e790      	b.n	8003e0e <ai_platform_network_process+0xaa>
 8003eec:	4623      	mov	r3, r4
 8003eee:	4618      	mov	r0, r3
 8003ef0:	b005      	add	sp, #20
 8003ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef6:	9c01      	ldr	r4, [sp, #4]
 8003ef8:	4692      	mov	sl, r2
 8003efa:	f104 0010 	add.w	r0, r4, #16
 8003efe:	2221      	movs	r2, #33	; 0x21
 8003f00:	2112      	movs	r1, #18
 8003f02:	f000 f9a3 	bl	800424c <core_set_error>
 8003f06:	4653      	mov	r3, sl
 8003f08:	e7f1      	b.n	8003eee <ai_platform_network_process+0x18a>
 8003f0a:	9c01      	ldr	r4, [sp, #4]
 8003f0c:	2219      	movs	r2, #25
 8003f0e:	f104 0010 	add.w	r0, r4, #16
 8003f12:	2112      	movs	r1, #18
 8003f14:	f000 f99a 	bl	800424c <core_set_error>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e7e8      	b.n	8003eee <ai_platform_network_process+0x18a>
 8003f1c:	9c01      	ldr	r4, [sp, #4]
 8003f1e:	2218      	movs	r2, #24
 8003f20:	f104 0010 	add.w	r0, r4, #16
 8003f24:	2112      	movs	r1, #18
 8003f26:	f000 f991 	bl	800424c <core_set_error>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e7df      	b.n	8003eee <ai_platform_network_process+0x18a>
 8003f2e:	9c01      	ldr	r4, [sp, #4]
 8003f30:	f104 0010 	add.w	r0, r4, #16
 8003f34:	2217      	movs	r2, #23
 8003f36:	2112      	movs	r1, #18
 8003f38:	f000 f988 	bl	800424c <core_set_error>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e7d6      	b.n	8003eee <ai_platform_network_process+0x18a>
 8003f40:	a1c00100 	.word	0xa1c00100
 8003f44:	e0002000 	.word	0xe0002000
 8003f48:	e0042000 	.word	0xe0042000
 8003f4c:	58024c08 	.word	0x58024c08
 8003f50:	58024c00 	.word	0x58024c00
 8003f54:	f407a5c2 	.word	0xf407a5c2
 8003f58:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f5c:	40023008 	.word	0x40023008
 8003f60:	40023000 	.word	0x40023000
 8003f64:	9c01      	ldr	r4, [sp, #4]
 8003f66:	9a02      	ldr	r2, [sp, #8]
 8003f68:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8003f6a:	2a00      	cmp	r2, #0
 8003f6c:	f000 80ab 	beq.w	80040c6 <ai_platform_network_process+0x362>
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	f240 809e 	bls.w	80040b2 <ai_platform_network_process+0x34e>
 8003f76:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8003f7a:	f119 0f0c 	cmn.w	r9, #12
 8003f7e:	f000 8098 	beq.w	80040b2 <ai_platform_network_process+0x34e>
 8003f82:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8093 	beq.w	80040b2 <ai_platform_network_process+0x34e>
 8003f8c:	9d02      	ldr	r5, [sp, #8]
 8003f8e:	9401      	str	r4, [sp, #4]
 8003f90:	2700      	movs	r7, #0
 8003f92:	429f      	cmp	r7, r3
 8003f94:	f080 8095 	bcs.w	80040c2 <ai_platform_network_process+0x35e>
 8003f98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8090 	beq.w	80040c2 <ai_platform_network_process+0x35e>
 8003fa2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8003fa6:	2c00      	cmp	r4, #0
 8003fa8:	f000 808b 	beq.w	80040c2 <ai_platform_network_process+0x35e>
 8003fac:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003fb0:	f8d3 b000 	ldr.w	fp, [r3]
 8003fb4:	013e      	lsls	r6, r7, #4
 8003fb6:	eb1b 0a06 	adds.w	sl, fp, r6
 8003fba:	f000 812c 	beq.w	8004216 <ai_platform_network_process+0x4b2>
 8003fbe:	69a3      	ldr	r3, [r4, #24]
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	9302      	str	r3, [sp, #8]
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f7ff f8d0 	bl	800316c <ai_buffer_get_size>
 8003fcc:	9b02      	ldr	r3, [sp, #8]
 8003fce:	4283      	cmp	r3, r0
 8003fd0:	d36e      	bcc.n	80040b0 <ai_platform_network_process+0x34c>
 8003fd2:	68e0      	ldr	r0, [r4, #12]
 8003fd4:	69a9      	ldr	r1, [r5, #24]
 8003fd6:	68c2      	ldr	r2, [r0, #12]
 8003fd8:	68cb      	ldr	r3, [r1, #12]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d168      	bne.n	80040b0 <ai_platform_network_process+0x34c>
 8003fde:	6882      	ldr	r2, [r0, #8]
 8003fe0:	688b      	ldr	r3, [r1, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d164      	bne.n	80040b0 <ai_platform_network_process+0x34c>
 8003fe6:	6842      	ldr	r2, [r0, #4]
 8003fe8:	684b      	ldr	r3, [r1, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d160      	bne.n	80040b0 <ai_platform_network_process+0x34c>
 8003fee:	69a3      	ldr	r3, [r4, #24]
 8003ff0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ff4:	f002 fb1a 	bl	800662c <ai_array_get_data_byte_size>
 8003ff8:	9002      	str	r0, [sp, #8]
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f002 fa88 	bl	8006510 <get_tensor_byte_size>
 8004000:	9b02      	ldr	r3, [sp, #8]
 8004002:	4283      	cmp	r3, r0
 8004004:	d354      	bcc.n	80040b0 <ai_platform_network_process+0x34c>
 8004006:	69a3      	ldr	r3, [r4, #24]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	f002 fa95 	bl	8006538 <ai_array_to_buffer_fmt>
 800400e:	682b      	ldr	r3, [r5, #0]
 8004010:	4043      	eors	r3, r0
 8004012:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004016:	d142      	bne.n	800409e <ai_platform_network_process+0x33a>
 8004018:	686b      	ldr	r3, [r5, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d035      	beq.n	800408a <ai_platform_network_process+0x326>
 800401e:	69ab      	ldr	r3, [r5, #24]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	b342      	cbz	r2, 8004076 <ai_platform_network_process+0x312>
 8004024:	4620      	mov	r0, r4
 8004026:	9202      	str	r2, [sp, #8]
 8004028:	f002 fa72 	bl	8006510 <get_tensor_byte_size>
 800402c:	f8ca 0008 	str.w	r0, [sl, #8]
 8004030:	69ab      	ldr	r3, [r5, #24]
 8004032:	9a02      	ldr	r2, [sp, #8]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	fb03 f000 	mul.w	r0, r3, r0
 800403a:	f8ca 000c 	str.w	r0, [sl, #12]
 800403e:	6869      	ldr	r1, [r5, #4]
 8004040:	f8ca 1004 	str.w	r1, [sl, #4]
 8004044:	686b      	ldr	r3, [r5, #4]
 8004046:	4403      	add	r3, r0
 8004048:	f84b 3006 	str.w	r3, [fp, r6]
 800404c:	69a0      	ldr	r0, [r4, #24]
 800404e:	6803      	ldr	r3, [r0, #0]
 8004050:	4590      	cmp	r8, r2
 8004052:	bf38      	it	cc
 8004054:	4690      	movcc	r8, r2
 8004056:	009e      	lsls	r6, r3, #2
 8004058:	d408      	bmi.n	800406c <ai_platform_network_process+0x308>
 800405a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	4419      	add	r1, r3
 8004062:	6081      	str	r1, [r0, #8]
 8004064:	69a3      	ldr	r3, [r4, #24]
 8004066:	f8da 2004 	ldr.w	r2, [sl, #4]
 800406a:	60da      	str	r2, [r3, #12]
 800406c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004070:	3701      	adds	r7, #1
 8004072:	351c      	adds	r5, #28
 8004074:	e78d      	b.n	8003f92 <ai_platform_network_process+0x22e>
 8004076:	9c01      	ldr	r4, [sp, #4]
 8004078:	4692      	mov	sl, r2
 800407a:	f104 0010 	add.w	r0, r4, #16
 800407e:	2221      	movs	r2, #33	; 0x21
 8004080:	2113      	movs	r1, #19
 8004082:	f000 f8e3 	bl	800424c <core_set_error>
 8004086:	4653      	mov	r3, sl
 8004088:	e731      	b.n	8003eee <ai_platform_network_process+0x18a>
 800408a:	9c01      	ldr	r4, [sp, #4]
 800408c:	469a      	mov	sl, r3
 800408e:	f104 0010 	add.w	r0, r4, #16
 8004092:	2217      	movs	r2, #23
 8004094:	2113      	movs	r1, #19
 8004096:	f000 f8d9 	bl	800424c <core_set_error>
 800409a:	4653      	mov	r3, sl
 800409c:	e727      	b.n	8003eee <ai_platform_network_process+0x18a>
 800409e:	9c01      	ldr	r4, [sp, #4]
 80040a0:	2219      	movs	r2, #25
 80040a2:	f104 0010 	add.w	r0, r4, #16
 80040a6:	2113      	movs	r1, #19
 80040a8:	f000 f8d0 	bl	800424c <core_set_error>
 80040ac:	2300      	movs	r3, #0
 80040ae:	e71e      	b.n	8003eee <ai_platform_network_process+0x18a>
 80040b0:	9c01      	ldr	r4, [sp, #4]
 80040b2:	f104 0010 	add.w	r0, r4, #16
 80040b6:	2218      	movs	r2, #24
 80040b8:	2113      	movs	r1, #19
 80040ba:	f000 f8c7 	bl	800424c <core_set_error>
 80040be:	2300      	movs	r3, #0
 80040c0:	e715      	b.n	8003eee <ai_platform_network_process+0x18a>
 80040c2:	9c01      	ldr	r4, [sp, #4]
 80040c4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80040c6:	f8a4 8014 	strh.w	r8, [r4, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80a0 	beq.w	8004210 <ai_platform_network_process+0x4ac>
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80040d4:	f240 809a 	bls.w	800420c <ai_platform_network_process+0x4a8>
 80040d8:	f105 070c 	add.w	r7, r5, #12
 80040dc:	8ae3      	ldrh	r3, [r4, #22]
 80040de:	8aa2      	ldrh	r2, [r4, #20]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	f67f af04 	bls.w	8003eee <ai_platform_network_process+0x18a>
 80040e6:	46a3      	mov	fp, r4
 80040e8:	2d00      	cmp	r5, #0
 80040ea:	d036      	beq.n	800415a <ai_platform_network_process+0x3f6>
 80040ec:	882b      	ldrh	r3, [r5, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d033      	beq.n	800415a <ai_platform_network_process+0x3f6>
 80040f2:	686b      	ldr	r3, [r5, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d030      	beq.n	800415a <ai_platform_network_process+0x3f6>
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f04f 0800 	mov.w	r8, #0
 80040fe:	b9db      	cbnz	r3, 8004138 <ai_platform_network_process+0x3d4>
 8004100:	e02b      	b.n	800415a <ai_platform_network_process+0x3f6>
 8004102:	68d4      	ldr	r4, [r2, #12]
 8004104:	1b00      	subs	r0, r0, r4
 8004106:	4401      	add	r1, r0
 8004108:	6091      	str	r1, [r2, #8]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	6872      	ldr	r2, [r6, #4]
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8004114:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004118:	440b      	add	r3, r1
 800411a:	4293      	cmp	r3, r2
 800411c:	bf24      	itt	cs
 800411e:	68f3      	ldrcs	r3, [r6, #12]
 8004120:	1ad3      	subcs	r3, r2, r3
 8004122:	6073      	str	r3, [r6, #4]
 8004124:	882b      	ldrh	r3, [r5, #0]
 8004126:	f108 0801 	add.w	r8, r8, #1
 800412a:	4598      	cmp	r8, r3
 800412c:	d215      	bcs.n	800415a <ai_platform_network_process+0x3f6>
 800412e:	686b      	ldr	r3, [r5, #4]
 8004130:	b19b      	cbz	r3, 800415a <ai_platform_network_process+0x3f6>
 8004132:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004136:	b183      	cbz	r3, 800415a <ai_platform_network_process+0x3f6>
 8004138:	68a9      	ldr	r1, [r5, #8]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	f8d1 a000 	ldr.w	sl, [r1]
 8004140:	6814      	ldr	r4, [r2, #0]
 8004142:	6890      	ldr	r0, [r2, #8]
 8004144:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004148:	eb0a 0609 	add.w	r6, sl, r9
 800414c:	00a4      	lsls	r4, r4, #2
 800414e:	6871      	ldr	r1, [r6, #4]
 8004150:	d5d7      	bpl.n	8004102 <ai_platform_network_process+0x39e>
 8004152:	68b2      	ldr	r2, [r6, #8]
 8004154:	f002 faac 	bl	80066b0 <memcpy>
 8004158:	e7da      	b.n	8004110 <ai_platform_network_process+0x3ac>
 800415a:	4658      	mov	r0, fp
 800415c:	f002 f984 	bl	8006468 <ai_layers_forward_all>
 8004160:	2f00      	cmp	r7, #0
 8004162:	d047      	beq.n	80041f4 <ai_platform_network_process+0x490>
 8004164:	883b      	ldrh	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d044      	beq.n	80041f4 <ai_platform_network_process+0x490>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d041      	beq.n	80041f4 <ai_platform_network_process+0x490>
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	2800      	cmp	r0, #0
 8004174:	d03e      	beq.n	80041f4 <ai_platform_network_process+0x490>
 8004176:	f04f 0800 	mov.w	r8, #0
 800417a:	e019      	b.n	80041b0 <ai_platform_network_process+0x44c>
 800417c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004180:	4293      	cmp	r3, r2
 8004182:	bf24      	itt	cs
 8004184:	68f3      	ldrcs	r3, [r6, #12]
 8004186:	1ad3      	subcs	r3, r2, r3
 8004188:	6073      	str	r3, [r6, #4]
 800418a:	6981      	ldr	r1, [r0, #24]
 800418c:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8004190:	1b12      	subs	r2, r2, r4
 8004192:	4413      	add	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
 8004196:	6983      	ldr	r3, [r0, #24]
 8004198:	6872      	ldr	r2, [r6, #4]
 800419a:	60da      	str	r2, [r3, #12]
 800419c:	883b      	ldrh	r3, [r7, #0]
 800419e:	f108 0801 	add.w	r8, r8, #1
 80041a2:	4598      	cmp	r8, r3
 80041a4:	d226      	bcs.n	80041f4 <ai_platform_network_process+0x490>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	b323      	cbz	r3, 80041f4 <ai_platform_network_process+0x490>
 80041aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80041ae:	b308      	cbz	r0, 80041f4 <ai_platform_network_process+0x490>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	6981      	ldr	r1, [r0, #24]
 80041b4:	f8d3 a000 	ldr.w	sl, [r3]
 80041b8:	680c      	ldr	r4, [r1, #0]
 80041ba:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80041be:	eb0a 0609 	add.w	r6, sl, r9
 80041c2:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80041c6:	00a4      	lsls	r4, r4, #2
 80041c8:	eb0c 0302 	add.w	r3, ip, r2
 80041cc:	d5d6      	bpl.n	800417c <ai_platform_network_process+0x418>
 80041ce:	6889      	ldr	r1, [r1, #8]
 80041d0:	4660      	mov	r0, ip
 80041d2:	f002 fa6d 	bl	80066b0 <memcpy>
 80041d6:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80041da:	f85a 2009 	ldr.w	r2, [sl, r9]
 80041de:	440b      	add	r3, r1
 80041e0:	4293      	cmp	r3, r2
 80041e2:	bf24      	itt	cs
 80041e4:	68f3      	ldrcs	r3, [r6, #12]
 80041e6:	1ad3      	subcs	r3, r2, r3
 80041e8:	6073      	str	r3, [r6, #4]
 80041ea:	883b      	ldrh	r3, [r7, #0]
 80041ec:	f108 0801 	add.w	r8, r8, #1
 80041f0:	4598      	cmp	r8, r3
 80041f2:	d3d8      	bcc.n	80041a6 <ai_platform_network_process+0x442>
 80041f4:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 80041f8:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 80041fc:	3301      	adds	r3, #1
 80041fe:	b29b      	uxth	r3, r3
 8004200:	429a      	cmp	r2, r3
 8004202:	f8ab 3016 	strh.w	r3, [fp, #22]
 8004206:	f63f af6f 	bhi.w	80040e8 <ai_platform_network_process+0x384>
 800420a:	e670      	b.n	8003eee <ai_platform_network_process+0x18a>
 800420c:	2700      	movs	r7, #0
 800420e:	e765      	b.n	80040dc <ai_platform_network_process+0x378>
 8004210:	461d      	mov	r5, r3
 8004212:	461f      	mov	r7, r3
 8004214:	e762      	b.n	80040dc <ai_platform_network_process+0x378>
 8004216:	9c01      	ldr	r4, [sp, #4]
 8004218:	2217      	movs	r2, #23
 800421a:	f104 0010 	add.w	r0, r4, #16
 800421e:	2113      	movs	r1, #19
 8004220:	f000 f814 	bl	800424c <core_set_error>
 8004224:	4653      	mov	r3, sl
 8004226:	e662      	b.n	8003eee <ai_platform_network_process+0x18a>
 8004228:	f104 0010 	add.w	r0, r4, #16
 800422c:	2230      	movs	r2, #48	; 0x30
 800422e:	2111      	movs	r1, #17
 8004230:	f000 f80c 	bl	800424c <core_set_error>
 8004234:	4633      	mov	r3, r6
 8004236:	e65a      	b.n	8003eee <ai_platform_network_process+0x18a>
 8004238:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800423a:	e5d2      	b.n	8003de2 <ai_platform_network_process+0x7e>

0800423c <core_init>:
 800423c:	2001      	movs	r0, #1
 800423e:	4770      	bx	lr

08004240 <core_get_error>:
 8004240:	4603      	mov	r3, r0
 8004242:	2200      	movs	r2, #0
 8004244:	6800      	ldr	r0, [r0, #0]
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop

0800424c <core_set_error>:
 800424c:	7803      	ldrb	r3, [r0, #0]
 800424e:	b933      	cbnz	r3, 800425e <core_set_error+0x12>
 8004250:	7001      	strb	r1, [r0, #0]
 8004252:	6803      	ldr	r3, [r0, #0]
 8004254:	f362 231f 	bfi	r3, r2, #8, #24
 8004258:	6003      	str	r3, [r0, #0]
 800425a:	2001      	movs	r0, #1
 800425c:	4770      	bx	lr
 800425e:	2000      	movs	r0, #0
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop

08004264 <func_dummy>:
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop

08004268 <ai_dict_decompress_f32>:
 8004268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800426c:	9f08      	ldr	r7, [sp, #32]
 800426e:	2b04      	cmp	r3, #4
 8004270:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004274:	d00e      	beq.n	8004294 <ai_dict_decompress_f32+0x2c>
 8004276:	2b08      	cmp	r3, #8
 8004278:	d10a      	bne.n	8004290 <ai_dict_decompress_f32+0x28>
 800427a:	42b8      	cmp	r0, r7
 800427c:	d208      	bcs.n	8004290 <ai_dict_decompress_f32+0x28>
 800427e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004282:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f840 3b04 	str.w	r3, [r0], #4
 800428c:	4287      	cmp	r7, r0
 800428e:	d8f6      	bhi.n	800427e <ai_dict_decompress_f32+0x16>
 8004290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004294:	9b07      	ldr	r3, [sp, #28]
 8004296:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800429a:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800429e:	f10c 38ff 	add.w	r8, ip, #4294967295
 80042a2:	f003 0e01 	and.w	lr, r3, #1
 80042a6:	42b8      	cmp	r0, r7
 80042a8:	d2f2      	bcs.n	8004290 <ai_dict_decompress_f32+0x28>
 80042aa:	f1bc 0f00 	cmp.w	ip, #0
 80042ae:	d01a      	beq.n	80042e6 <ai_dict_decompress_f32+0x7e>
 80042b0:	f100 0508 	add.w	r5, r0, #8
 80042b4:	1e4c      	subs	r4, r1, #1
 80042b6:	eb01 0608 	add.w	r6, r1, r8
 80042ba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80042c4:	42a6      	cmp	r6, r4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f845 3c08 	str.w	r3, [r5, #-8]
 80042cc:	7823      	ldrb	r3, [r4, #0]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80042d6:	f105 0508 	add.w	r5, r5, #8
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f845 3c0c 	str.w	r3, [r5, #-12]
 80042e0:	d1eb      	bne.n	80042ba <ai_dict_decompress_f32+0x52>
 80042e2:	4461      	add	r1, ip
 80042e4:	4448      	add	r0, r9
 80042e6:	f1be 0f00 	cmp.w	lr, #0
 80042ea:	d103      	bne.n	80042f4 <ai_dict_decompress_f32+0x8c>
 80042ec:	4287      	cmp	r7, r0
 80042ee:	d8dc      	bhi.n	80042aa <ai_dict_decompress_f32+0x42>
 80042f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042f4:	780b      	ldrb	r3, [r1, #0]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80042fc:	3101      	adds	r1, #1
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6003      	str	r3, [r0, #0]
 8004302:	3004      	adds	r0, #4
 8004304:	e7cf      	b.n	80042a6 <ai_dict_decompress_f32+0x3e>
 8004306:	bf00      	nop

08004308 <forward_conv2d_nl_pool>:
 8004308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430c:	ed2d 8b10 	vpush	{d8-d15}
 8004310:	b0e1      	sub	sp, #388	; 0x184
 8004312:	6983      	ldr	r3, [r0, #24]
 8004314:	881e      	ldrh	r6, [r3, #0]
 8004316:	af0a      	add	r7, sp, #40	; 0x28
 8004318:	2e00      	cmp	r6, #0
 800431a:	f000 859b 	beq.w	8004e54 <forward_conv2d_nl_pool+0xb4c>
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	684a      	ldr	r2, [r1, #4]
 8004322:	2a00      	cmp	r2, #0
 8004324:	f000 8593 	beq.w	8004e4e <forward_conv2d_nl_pool+0xb46>
 8004328:	f8d2 c000 	ldr.w	ip, [r2]
 800432c:	2e01      	cmp	r6, #1
 800432e:	f240 858b 	bls.w	8004e48 <forward_conv2d_nl_pool+0xb40>
 8004332:	690a      	ldr	r2, [r1, #16]
 8004334:	2a00      	cmp	r2, #0
 8004336:	f000 8582 	beq.w	8004e3e <forward_conv2d_nl_pool+0xb36>
 800433a:	f8d2 9000 	ldr.w	r9, [r2]
 800433e:	2e02      	cmp	r6, #2
 8004340:	f000 8582 	beq.w	8004e48 <forward_conv2d_nl_pool+0xb40>
 8004344:	69cd      	ldr	r5, [r1, #28]
 8004346:	2d00      	cmp	r5, #0
 8004348:	f000 8571 	beq.w	8004e2e <forward_conv2d_nl_pool+0xb26>
 800434c:	682a      	ldr	r2, [r5, #0]
 800434e:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8004352:	f111 0218 	adds.w	r2, r1, #24
 8004356:	d004      	beq.n	8004362 <forward_conv2d_nl_pool+0x5a>
 8004358:	8b0a      	ldrh	r2, [r1, #24]
 800435a:	2a01      	cmp	r2, #1
 800435c:	f240 857c 	bls.w	8004e58 <forward_conv2d_nl_pool+0xb50>
 8004360:	686a      	ldr	r2, [r5, #4]
 8004362:	68a9      	ldr	r1, [r5, #8]
 8004364:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004366:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800436a:	f8dc b018 	ldr.w	fp, [ip, #24]
 800436e:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 8004372:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8004376:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800437a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800437e:	f8db 4008 	ldr.w	r4, [fp, #8]
 8004382:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8004386:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800438a:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800438e:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 8004392:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8004396:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800439a:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800439e:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 80043a2:	f8de 4004 	ldr.w	r4, [lr, #4]
 80043a6:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 80043aa:	f8de 400c 	ldr.w	r4, [lr, #12]
 80043ae:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80043b2:	f8de 4008 	ldr.w	r4, [lr, #8]
 80043b6:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 80043ba:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80043be:	6824      	ldr	r4, [r4, #0]
 80043c0:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 80043c4:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80043c8:	6864      	ldr	r4, [r4, #4]
 80043ca:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80043ce:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80043d2:	68a5      	ldr	r5, [r4, #8]
 80043d4:	f8da 4004 	ldr.w	r4, [sl, #4]
 80043d8:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 80043dc:	f8da 4008 	ldr.w	r4, [sl, #8]
 80043e0:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80043e4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80043e6:	6824      	ldr	r4, [r4, #0]
 80043e8:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 80043ec:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80043ee:	6864      	ldr	r4, [r4, #4]
 80043f0:	643c      	str	r4, [r7, #64]	; 0x40
 80043f2:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80043f6:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 80043fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80043fc:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8004400:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004402:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8004406:	69c4      	ldr	r4, [r0, #28]
 8004408:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 800440c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800440e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004410:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004412:	647c      	str	r4, [r7, #68]	; 0x44
 8004414:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004416:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800441a:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 800441e:	2a00      	cmp	r2, #0
 8004420:	f000 84f8 	beq.w	8004e14 <forward_conv2d_nl_pool+0xb0c>
 8004424:	6992      	ldr	r2, [r2, #24]
 8004426:	6892      	ldr	r2, [r2, #8]
 8004428:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800442c:	4680      	mov	r8, r0
 800442e:	6a00      	ldr	r0, [r0, #32]
 8004430:	2900      	cmp	r1, #0
 8004432:	f000 84e4 	beq.w	8004dfe <forward_conv2d_nl_pool+0xaf6>
 8004436:	698a      	ldr	r2, [r1, #24]
 8004438:	2a00      	cmp	r2, #0
 800443a:	f000 8533 	beq.w	8004ea4 <forward_conv2d_nl_pool+0xb9c>
 800443e:	694b      	ldr	r3, [r1, #20]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004446:	e9d2 0100 	ldrd	r0, r1, [r2]
 800444a:	6893      	ldr	r3, [r2, #8]
 800444c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004450:	f002 f8c8 	bl	80065e4 <ai_array_get_byte_size>
 8004454:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8004458:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800445c:	881e      	ldrh	r6, [r3, #0]
 800445e:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8004462:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8004466:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 800446a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800446c:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8004470:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8004474:	fa11 f585 	uxtah	r5, r1, r5
 8004478:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800447c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004480:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8004484:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8004488:	3901      	subs	r1, #1
 800448a:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800448e:	eb05 0e00 	add.w	lr, r5, r0
 8004492:	fa1f f28a 	uxth.w	r2, sl
 8004496:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800449a:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800449e:	f8dc 4000 	ldr.w	r4, [ip]
 80044a2:	f8dc 1000 	ldr.w	r1, [ip]
 80044a6:	3a01      	subs	r2, #1
 80044a8:	fb00 5002 	mla	r0, r0, r2, r5
 80044ac:	fa1f f28b 	uxth.w	r2, fp
 80044b0:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 80044b4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80044b8:	f3c1 5141 	ubfx	r1, r1, #21, #2
 80044bc:	1e50      	subs	r0, r2, #1
 80044be:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80044c2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80044c6:	fa44 f101 	asr.w	r1, r4, r1
 80044ca:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80044ce:	f8dc 4000 	ldr.w	r4, [ip]
 80044d2:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80044d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80044da:	f3c4 4543 	ubfx	r5, r4, #17, #4
 80044de:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80044e2:	ebae 0202 	sub.w	r2, lr, r2
 80044e6:	fa1f fe81 	uxth.w	lr, r1
 80044ea:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80044ee:	fbb2 f2f1 	udiv	r2, r2, r1
 80044f2:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80044f6:	3c01      	subs	r4, #1
 80044f8:	fb04 1100 	mla	r1, r4, r0, r1
 80044fc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004500:	1c51      	adds	r1, r2, #1
 8004502:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004506:	487c      	ldr	r0, [pc, #496]	; (80046f8 <forward_conv2d_nl_pool+0x3f0>)
 8004508:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800450c:	4611      	mov	r1, r2
 800450e:	2a00      	cmp	r2, #0
 8004510:	bf08      	it	eq
 8004512:	4601      	moveq	r1, r0
 8004514:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8004518:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800451c:	2d04      	cmp	r5, #4
 800451e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004522:	f000 849e 	beq.w	8004e62 <forward_conv2d_nl_pool+0xb5a>
 8004526:	2d08      	cmp	r5, #8
 8004528:	f000 849b 	beq.w	8004e62 <forward_conv2d_nl_pool+0xb5a>
 800452c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8004530:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004534:	2e03      	cmp	r6, #3
 8004536:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800453a:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800453e:	f240 8483 	bls.w	8004e48 <forward_conv2d_nl_pool+0xb40>
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8489 	beq.w	8004e5e <forward_conv2d_nl_pool+0xb56>
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800455a:	6899      	ldr	r1, [r3, #8]
 800455c:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8004560:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8004564:	6896      	ldr	r6, [r2, #8]
 8004566:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800456a:	4249      	negs	r1, r1
 800456c:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8004570:	2800      	cmp	r0, #0
 8004572:	f000 82dd 	beq.w	8004b30 <forward_conv2d_nl_pool+0x828>
 8004576:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800457a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800457e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004582:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 8004586:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 80046fc <forward_conv2d_nl_pool+0x3f4>
 800458a:	fb03 f200 	mul.w	r2, r3, r0
 800458e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004592:	008c      	lsls	r4, r1, #2
 8004594:	fb04 f000 	mul.w	r0, r4, r0
 8004598:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 800459c:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80045a0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80045a4:	fb01 fc02 	mul.w	ip, r1, r2
 80045a8:	00a2      	lsls	r2, r4, #2
 80045aa:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 80045ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045b2:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 80045b6:	00ab      	lsls	r3, r5, #2
 80045b8:	4694      	mov	ip, r2
 80045ba:	fb0c f204 	mul.w	r2, ip, r4
 80045be:	fb04 f303 	mul.w	r3, r4, r3
 80045c2:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80045c6:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80045ca:	00a4      	lsls	r4, r4, #2
 80045cc:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80045d0:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 80045d4:	f04f 0c00 	mov.w	ip, #0
 80045d8:	fa0f f58b 	sxth.w	r5, fp
 80045dc:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 80045e0:	46a4      	mov	ip, r4
 80045e2:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 80045e6:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 80045ea:	fa0f f58a 	sxth.w	r5, sl
 80045ee:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 80045f2:	fb0c fc04 	mul.w	ip, ip, r4
 80045f6:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 80045fa:	fb06 fc03 	mul.w	ip, r6, r3
 80045fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004602:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8004606:	4240      	negs	r0, r0
 8004608:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 800460c:	469c      	mov	ip, r3
 800460e:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8004612:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004616:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800461a:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 800461e:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 8004622:	fb00 f303 	mul.w	r3, r0, r3
 8004626:	460d      	mov	r5, r1
 8004628:	fb0c fc04 	mul.w	ip, ip, r4
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
 800462e:	fb04 f305 	mul.w	r3, r4, r5
 8004632:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8004636:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004640:	46a6      	mov	lr, r4
 8004642:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8004646:	fb05 f503 	mul.w	r5, r5, r3
 800464a:	667d      	str	r5, [r7, #100]	; 0x64
 800464c:	4625      	mov	r5, r4
 800464e:	fb05 f503 	mul.w	r5, r5, r3
 8004652:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004656:	66bd      	str	r5, [r7, #104]	; 0x68
 8004658:	fb00 f101 	mul.w	r1, r0, r1
 800465c:	fb03 f306 	mul.w	r3, r3, r6
 8004660:	657b      	str	r3, [r7, #84]	; 0x54
 8004662:	008b      	lsls	r3, r1, #2
 8004664:	633b      	str	r3, [r7, #48]	; 0x30
 8004666:	0093      	lsls	r3, r2, #2
 8004668:	64fb      	str	r3, [r7, #76]	; 0x4c
 800466a:	0083      	lsls	r3, r0, #2
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004672:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8004676:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800467a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800467e:	2400      	movs	r4, #0
 8004680:	63bb      	str	r3, [r7, #56]	; 0x38
 8004682:	4603      	mov	r3, r0
 8004684:	fb03 f301 	mul.w	r3, r3, r1
 8004688:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 800468c:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8004690:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004694:	00d1      	lsls	r1, r2, #3
 8004696:	0113      	lsls	r3, r2, #4
 8004698:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800469c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80046a0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80046a4:	fb00 f004 	mul.w	r0, r0, r4
 80046a8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80046ac:	66f8      	str	r0, [r7, #108]	; 0x6c
 80046ae:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80046b2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80046b6:	469a      	mov	sl, r3
 80046b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f340 81d0 	ble.w	8004a62 <forward_conv2d_nl_pool+0x75a>
 80046c2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80046c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80046ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046ce:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80046d2:	2900      	cmp	r1, #0
 80046d4:	441a      	add	r2, r3
 80046d6:	bfb4      	ite	lt
 80046d8:	2100      	movlt	r1, #0
 80046da:	2300      	movge	r3, #0
 80046dc:	4282      	cmp	r2, r0
 80046de:	bf28      	it	cs
 80046e0:	4602      	movcs	r2, r0
 80046e2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80046e6:	2801      	cmp	r0, #1
 80046e8:	f000 83f6 	beq.w	8004ed8 <forward_conv2d_nl_pool+0xbd0>
 80046ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80046f0:	4281      	cmp	r1, r0
 80046f2:	f000 822a 	beq.w	8004b4a <forward_conv2d_nl_pool+0x842>
 80046f6:	e003      	b.n	8004700 <forward_conv2d_nl_pool+0x3f8>
 80046f8:	08004265 	.word	0x08004265
 80046fc:	00000000 	.word	0x00000000
 8004700:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004704:	2900      	cmp	r1, #0
 8004706:	f000 819f 	beq.w	8004a48 <forward_conv2d_nl_pool+0x740>
 800470a:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800470e:	fb93 f1f0 	sdiv	r1, r3, r0
 8004712:	fb00 3111 	mls	r1, r0, r1, r3
 8004716:	1a41      	subs	r1, r0, r1
 8004718:	1ad2      	subs	r2, r2, r3
 800471a:	fb91 f5f0 	sdiv	r5, r1, r0
 800471e:	fb00 1515 	mls	r5, r0, r5, r1
 8004722:	1b52      	subs	r2, r2, r5
 8004724:	4601      	mov	r1, r0
 8004726:	4402      	add	r2, r0
 8004728:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800472c:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8004730:	4604      	mov	r4, r0
 8004732:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004736:	fbb4 f4f0 	udiv	r4, r4, r0
 800473a:	6a38      	ldr	r0, [r7, #32]
 800473c:	3a01      	subs	r2, #1
 800473e:	fb92 f8f1 	sdiv	r8, r2, r1
 8004742:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004746:	eba0 0c04 	sub.w	ip, r0, r4
 800474a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800474e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004752:	4614      	mov	r4, r2
 8004754:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004758:	fbb4 f2f2 	udiv	r2, r4, r2
 800475c:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8004760:	663a      	str	r2, [r7, #96]	; 0x60
 8004762:	441d      	add	r5, r3
 8004764:	fb0e f000 	mul.w	r0, lr, r0
 8004768:	440b      	add	r3, r1
 800476a:	eba6 0608 	sub.w	r6, r6, r8
 800476e:	fb04 f505 	mul.w	r5, r4, r5
 8004772:	3b01      	subs	r3, #1
 8004774:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8004778:	fb93 f3f4 	sdiv	r3, r3, r4
 800477c:	fb00 f406 	mul.w	r4, r0, r6
 8004780:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004784:	677d      	str	r5, [r7, #116]	; 0x74
 8004786:	0091      	lsls	r1, r2, #2
 8004788:	fb00 f003 	mul.w	r0, r0, r3
 800478c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8004790:	65f8      	str	r0, [r7, #92]	; 0x5c
 8004792:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004796:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800479a:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800479e:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 80047a2:	1ac3      	subs	r3, r0, r3
 80047a4:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80047a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047ac:	008b      	lsls	r3, r1, #2
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b0:	00d3      	lsls	r3, r2, #3
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047c4:	2300      	movs	r3, #0
 80047c6:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 80047ca:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80047ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80047d0:	46c2      	mov	sl, r8
 80047d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047d6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80047da:	eb03 0c02 	add.w	ip, r3, r2
 80047de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f2c0 811c 	blt.w	8004a20 <forward_conv2d_nl_pool+0x718>
 80047e8:	2000      	movs	r0, #0
 80047ea:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80047ec:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 80047f0:	4605      	mov	r5, r0
 80047f2:	4606      	mov	r6, r0
 80047f4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80047fc:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8004800:	4413      	add	r3, r2
 8004802:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004806:	440a      	add	r2, r1
 8004808:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800480c:	428b      	cmp	r3, r1
 800480e:	bf94      	ite	ls
 8004810:	ebc6 0303 	rsbls	r3, r6, r3
 8004814:	ebc6 0301 	rsbhi	r3, r6, r1
 8004818:	4415      	add	r5, r2
 800481a:	1a1b      	subs	r3, r3, r0
 800481c:	00a4      	lsls	r4, r4, #2
 800481e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004822:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8004826:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800482a:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800482c:	4602      	mov	r2, r0
 800482e:	2800      	cmp	r0, #0
 8004830:	bf08      	it	eq
 8004832:	4662      	moveq	r2, ip
 8004834:	f108 31ff 	add.w	r1, r8, #4294967295
 8004838:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800483c:	fb91 f1f0 	sdiv	r1, r1, r0
 8004840:	4429      	add	r1, r5
 8004842:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 8004846:	fb0e 5501 	mla	r5, lr, r1, r5
 800484a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800484e:	4403      	add	r3, r0
 8004850:	fb01 6104 	mla	r1, r1, r4, r6
 8004854:	3b01      	subs	r3, #1
 8004856:	fb93 f6f0 	sdiv	r6, r3, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8004860:	fb06 3110 	mls	r1, r6, r0, r3
 8004864:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004868:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800486c:	4562      	cmp	r2, ip
 800486e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004872:	bf08      	it	eq
 8004874:	eeb0 6a48 	vmoveq.f32	s12, s16
 8004878:	1b9b      	subs	r3, r3, r6
 800487a:	2800      	cmp	r0, #0
 800487c:	d070      	beq.n	8004960 <forward_conv2d_nl_pool+0x658>
 800487e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004882:	fb0e f803 	mul.w	r8, lr, r3
 8004886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004888:	fb00 fb01 	mul.w	fp, r0, r1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d067      	beq.n	8004960 <forward_conv2d_nl_pool+0x658>
 8004890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004894:	18d3      	adds	r3, r2, r3
 8004896:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800489a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a2:	2300      	movs	r3, #0
 80048a4:	673b      	str	r3, [r7, #112]	; 0x70
 80048a6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80048aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ac:	4413      	add	r3, r2
 80048ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80048b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	4413      	add	r3, r2
 80048b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80048bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048c0:	ecf3 7a01 	vldmia	r3!, {s15}
 80048c4:	f1ba 0f00 	cmp.w	sl, #0
 80048c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80048cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80048d0:	f340 80a4 	ble.w	8004a1c <forward_conv2d_nl_pool+0x714>
 80048d4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80048d8:	f04f 0c00 	mov.w	ip, #0
 80048dc:	2e00      	cmp	r6, #0
 80048de:	dd19      	ble.n	8004914 <forward_conv2d_nl_pool+0x60c>
 80048e0:	2100      	movs	r1, #0
 80048e2:	eb00 040e 	add.w	r4, r0, lr
 80048e6:	4284      	cmp	r4, r0
 80048e8:	d910      	bls.n	800490c <forward_conv2d_nl_pool+0x604>
 80048ea:	4603      	mov	r3, r0
 80048ec:	462a      	mov	r2, r5
 80048ee:	ecb3 7a01 	vldmia	r3!, {s14}
 80048f2:	ecf2 6a01 	vldmia	r2!, {s13}
 80048f6:	429c      	cmp	r4, r3
 80048f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80048fc:	d8f7      	bhi.n	80048ee <forward_conv2d_nl_pool+0x5e6>
 80048fe:	43c3      	mvns	r3, r0
 8004900:	441c      	add	r4, r3
 8004902:	f024 0403 	bic.w	r4, r4, #3
 8004906:	3404      	adds	r4, #4
 8004908:	4425      	add	r5, r4
 800490a:	4420      	add	r0, r4
 800490c:	3101      	adds	r1, #1
 800490e:	428e      	cmp	r6, r1
 8004910:	4448      	add	r0, r9
 8004912:	d1e6      	bne.n	80048e2 <forward_conv2d_nl_pool+0x5da>
 8004914:	f10c 0c01 	add.w	ip, ip, #1
 8004918:	45e2      	cmp	sl, ip
 800491a:	4458      	add	r0, fp
 800491c:	4445      	add	r5, r8
 800491e:	d1dd      	bne.n	80048dc <forward_conv2d_nl_pool+0x5d4>
 8004920:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004924:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004928:	441d      	add	r5, r3
 800492a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800492e:	ece3 7a01 	vstmia	r3!, {s15}
 8004932:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800493a:	4293      	cmp	r3, r2
 800493c:	d1be      	bne.n	80048bc <forward_conv2d_nl_pool+0x5b4>
 800493e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004942:	69f9      	ldr	r1, [r7, #28]
 8004944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004946:	4472      	add	r2, lr
 8004948:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800494c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800494e:	1a52      	subs	r2, r2, r1
 8004950:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004954:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004958:	3301      	adds	r3, #1
 800495a:	429a      	cmp	r2, r3
 800495c:	673b      	str	r3, [r7, #112]	; 0x70
 800495e:	d1a2      	bne.n	80048a6 <forward_conv2d_nl_pool+0x59e>
 8004960:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004964:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496a:	4608      	mov	r0, r1
 800496c:	4410      	add	r0, r2
 800496e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004972:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8004976:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800497a:	4401      	add	r1, r0
 800497c:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8004980:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004984:	1a8a      	subs	r2, r1, r2
 8004986:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800498a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800498e:	3301      	adds	r3, #1
 8004990:	429a      	cmp	r2, r3
 8004992:	67bb      	str	r3, [r7, #120]	; 0x78
 8004994:	f47f af1d 	bne.w	80047d2 <forward_conv2d_nl_pool+0x4ca>
 8004998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800499c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049a0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2a00      	cmp	r2, #0
 80049a8:	f000 8210 	beq.w	8004dcc <forward_conv2d_nl_pool+0xac4>
 80049ac:	2400      	movs	r4, #0
 80049ae:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 80049b2:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 80049b6:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 80049ba:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 80049be:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80049c2:	609e      	str	r6, [r3, #8]
 80049c4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80049c8:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 80049cc:	462b      	mov	r3, r5
 80049ce:	4641      	mov	r1, r8
 80049d0:	4640      	mov	r0, r8
 80049d2:	47a0      	blx	r4
 80049d4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80049d8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80049dc:	6859      	ldr	r1, [r3, #4]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 80049e4:	4405      	add	r5, r0
 80049e6:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80049ea:	0089      	lsls	r1, r1, #2
 80049ec:	4406      	add	r6, r0
 80049ee:	eba5 0c09 	sub.w	ip, r5, r9
 80049f2:	1850      	adds	r0, r2, r1
 80049f4:	45a4      	cmp	ip, r4
 80049f6:	bfa8      	it	ge
 80049f8:	464d      	movge	r5, r9
 80049fa:	4286      	cmp	r6, r0
 80049fc:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8004a00:	bf28      	it	cs
 8004a02:	1a76      	subcs	r6, r6, r1
 8004a04:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004a08:	3001      	adds	r0, #1
 8004a0a:	4281      	cmp	r1, r0
 8004a0c:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8004a10:	d1d7      	bne.n	80049c2 <forward_conv2d_nl_pool+0x6ba>
 8004a12:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 8004a16:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 8004a1a:	e019      	b.n	8004a50 <forward_conv2d_nl_pool+0x748>
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	e781      	b.n	8004924 <forward_conv2d_nl_pool+0x61c>
 8004a20:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004a24:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004a28:	fb90 f3f2 	sdiv	r3, r0, r2
 8004a2c:	fb02 0313 	mls	r3, r2, r3, r0
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	4605      	mov	r5, r0
 8004a34:	fb93 f0f2 	sdiv	r0, r3, r2
 8004a38:	fb02 3010 	mls	r0, r2, r0, r3
 8004a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a3e:	462e      	mov	r6, r5
 8004a40:	18c4      	adds	r4, r0, r3
 8004a42:	eb02 0805 	add.w	r8, r2, r5
 8004a46:	e6d5      	b.n	80047f4 <forward_conv2d_nl_pool+0x4ec>
 8004a48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004a56:	3301      	adds	r3, #1
 8004a58:	b21b      	sxth	r3, r3
 8004a5a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a62:	3b01      	subs	r3, #1
 8004a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a68:	f100 83bf 	bmi.w	80051ea <forward_conv2d_nl_pool+0xee2>
 8004a6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a70:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	f200 839d 	bhi.w	80051b4 <forward_conv2d_nl_pool+0xeac>
 8004a7a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	6990      	ldr	r0, [r2, #24]
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a88:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8004a8c:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	fa1f f188 	uxth.w	r1, r8
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a9c:	9308      	str	r3, [sp, #32]
 8004a9e:	9105      	str	r1, [sp, #20]
 8004aa0:	2601      	movs	r6, #1
 8004aa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004aa6:	9607      	str	r6, [sp, #28]
 8004aa8:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8004aac:	9506      	str	r5, [sp, #24]
 8004aae:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 8004ab2:	9304      	str	r3, [sp, #16]
 8004ab4:	1a64      	subs	r4, r4, r1
 8004ab6:	b2b1      	uxth	r1, r6
 8004ab8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8004ac2:	b224      	sxth	r4, r4
 8004ac4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8004ac8:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8004acc:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8004ad0:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8004ad2:	47a0      	blx	r4
 8004ad4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8004ad8:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8004adc:	688a      	ldr	r2, [r1, #8]
 8004ade:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004ae0:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8004ae4:	fa0f f388 	sxth.w	r3, r8
 8004ae8:	1af3      	subs	r3, r6, r3
 8004aea:	4422      	add	r2, r4
 8004aec:	462e      	mov	r6, r5
 8004aee:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8004af2:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 8004af6:	608a      	str	r2, [r1, #8]
 8004af8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004afc:	4426      	add	r6, r4
 8004afe:	b21b      	sxth	r3, r3
 8004b00:	1b2c      	subs	r4, r5, r4
 8004b02:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8004b06:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 8004b08:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8004b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b14:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 8004b18:	3001      	adds	r0, #1
 8004b1a:	442c      	add	r4, r5
 8004b1c:	4283      	cmp	r3, r0
 8004b1e:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8004b22:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 8004b26:	f63f adc7 	bhi.w	80046b8 <forward_conv2d_nl_pool+0x3b0>
 8004b2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	609a      	str	r2, [r3, #8]
 8004b34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b38:	68d3      	ldr	r3, [r2, #12]
 8004b3a:	6093      	str	r3, [r2, #8]
 8004b3c:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8004b40:	46bd      	mov	sp, r7
 8004b42:	ecbd 8b10 	vpop	{d8-d15}
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b4c:	2901      	cmp	r1, #1
 8004b4e:	f47f add7 	bne.w	8004700 <forward_conv2d_nl_pool+0x3f8>
 8004b52:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004b56:	2900      	cmp	r1, #0
 8004b58:	f43f af76 	beq.w	8004a48 <forward_conv2d_nl_pool+0x740>
 8004b5c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8004b60:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8004b64:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004b68:	1ad2      	subs	r2, r2, r3
 8004b6a:	1a8c      	subs	r4, r1, r2
 8004b6c:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8004b70:	00b2      	lsls	r2, r6, #2
 8004b72:	fb02 f204 	mul.w	r2, r2, r4
 8004b76:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8004b7a:	fbb1 f1f0 	udiv	r1, r1, r0
 8004b7e:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8004b82:	460d      	mov	r5, r1
 8004b84:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b86:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b88:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8004b8c:	0082      	lsls	r2, r0, #2
 8004b8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b90:	00ca      	lsls	r2, r1, #3
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	00aa      	lsls	r2, r5, #2
 8004b96:	60ba      	str	r2, [r7, #8]
 8004b98:	fb03 f206 	mul.w	r2, r3, r6
 8004b9c:	67ba      	str	r2, [r7, #120]	; 0x78
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	fb02 f303 	mul.w	r3, r2, r3
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004baa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bb2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f2c0 8112 	blt.w	8004df2 <forward_conv2d_nl_pool+0xaea>
 8004bce:	2100      	movs	r1, #0
 8004bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd2:	460a      	mov	r2, r1
 8004bd4:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8004bd8:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8004bdc:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8004be0:	4420      	add	r0, r4
 8004be2:	4408      	add	r0, r1
 8004be4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8004be8:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8004bec:	190c      	adds	r4, r1, r4
 8004bee:	42ac      	cmp	r4, r5
 8004bf0:	bf28      	it	cs
 8004bf2:	462c      	movcs	r4, r5
 8004bf4:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8004bf8:	0080      	lsls	r0, r0, #2
 8004bfa:	1aa4      	subs	r4, r4, r2
 8004bfc:	2d00      	cmp	r5, #0
 8004bfe:	f000 80e9 	beq.w	8004dd4 <forward_conv2d_nl_pool+0xacc>
 8004c02:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004c06:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 8004c0a:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8004c0e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004c12:	42b5      	cmp	r5, r6
 8004c14:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8004c18:	eba3 0204 	sub.w	r2, r3, r4
 8004c1c:	eba1 0104 	sub.w	r1, r1, r4
 8004c20:	bf08      	it	eq
 8004c22:	eef0 3a48 	vmoveq.f32	s7, s16
 8004c26:	462b      	mov	r3, r5
 8004c28:	697d      	ldr	r5, [r7, #20]
 8004c2a:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8004c2e:	4428      	add	r0, r5
 8004c30:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8004c34:	fb05 6e00 	mla	lr, r5, r0, r6
 8004c38:	eb0e 000b 	add.w	r0, lr, fp
 8004c3c:	4586      	cmp	lr, r0
 8004c3e:	61f8      	str	r0, [r7, #28]
 8004c40:	f080 80a5 	bcs.w	8004d8e <forward_conv2d_nl_pool+0xa86>
 8004c44:	0092      	lsls	r2, r2, #2
 8004c46:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8004c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c4c:	fb01 f10b 	mul.w	r1, r1, fp
 8004c50:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8004c54:	f024 0803 	bic.w	r8, r4, #3
 8004c58:	2a00      	cmp	r2, #0
 8004c5a:	f000 8098 	beq.w	8004d8e <forward_conv2d_nl_pool+0xa86>
 8004c5e:	f108 32ff 	add.w	r2, r8, #4294967295
 8004c62:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004c64:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004c68:	0892      	lsrs	r2, r2, #2
 8004c6a:	3201      	adds	r2, #1
 8004c6c:	4401      	add	r1, r0
 8004c6e:	fb02 f00a 	mul.w	r0, r2, sl
 8004c72:	6638      	str	r0, [r7, #96]	; 0x60
 8004c74:	0110      	lsls	r0, r2, #4
 8004c76:	0092      	lsls	r2, r2, #2
 8004c78:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004c7a:	1aca      	subs	r2, r1, r3
 8004c7c:	613a      	str	r2, [r7, #16]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	6738      	str	r0, [r7, #112]	; 0x70
 8004c82:	4413      	add	r3, r2
 8004c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c88:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c8e:	4413      	add	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4413      	add	r3, r2
 8004c9a:	677b      	str	r3, [r7, #116]	; 0x74
 8004c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ca0:	ecf3 6a01 	vldmia	r3!, {s13}
 8004ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ca8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004cb2:	dd57      	ble.n	8004d64 <forward_conv2d_nl_pool+0xa5c>
 8004cb4:	4676      	mov	r6, lr
 8004cb6:	f04f 0c00 	mov.w	ip, #0
 8004cba:	f1b8 0f00 	cmp.w	r8, #0
 8004cbe:	f340 8087 	ble.w	8004dd0 <forward_conv2d_nl_pool+0xac8>
 8004cc2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004cc6:	f109 0310 	add.w	r3, r9, #16
 8004cca:	18b1      	adds	r1, r6, r2
 8004ccc:	2000      	movs	r0, #0
 8004cce:	4632      	mov	r2, r6
 8004cd0:	eb02 050b 	add.w	r5, r2, fp
 8004cd4:	ed95 7a00 	vldr	s14, [r5]
 8004cd8:	ed53 7a03 	vldr	s15, [r3, #-12]
 8004cdc:	ed92 4a00 	vldr	s8, [r2]
 8004ce0:	ed53 4a04 	vldr	s9, [r3, #-16]
 8004ce4:	ed91 5a00 	vldr	s10, [r1]
 8004ce8:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004cec:	ed13 6a01 	vldr	s12, [r3, #-4]
 8004cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf4:	eb01 050b 	add.w	r5, r1, fp
 8004cf8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004cfc:	3004      	adds	r0, #4
 8004cfe:	4540      	cmp	r0, r8
 8004d00:	ed95 7a00 	vldr	s14, [r5]
 8004d04:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004d08:	4452      	add	r2, sl
 8004d0a:	4451      	add	r1, sl
 8004d0c:	f103 0310 	add.w	r3, r3, #16
 8004d10:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004d14:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004d18:	dbda      	blt.n	8004cd0 <forward_conv2d_nl_pool+0x9c8>
 8004d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d1c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004d1e:	441e      	add	r6, r3
 8004d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d22:	4499      	add	r9, r3
 8004d24:	42a0      	cmp	r0, r4
 8004d26:	da11      	bge.n	8004d4c <forward_conv2d_nl_pool+0xa44>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4633      	mov	r3, r6
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	edd3 7a00 	vldr	s15, [r3]
 8004d32:	ecb1 7a01 	vldmia	r1!, {s14}
 8004d36:	3201      	adds	r2, #1
 8004d38:	42a2      	cmp	r2, r4
 8004d3a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004d3e:	445b      	add	r3, fp
 8004d40:	d1f5      	bne.n	8004d2e <forward_conv2d_nl_pool+0xa26>
 8004d42:	1a20      	subs	r0, r4, r0
 8004d44:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8004d48:	fb00 660b 	mla	r6, r0, fp, r6
 8004d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d50:	441e      	add	r6, r3
 8004d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d56:	4499      	add	r9, r3
 8004d58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d5c:	f10c 0c01 	add.w	ip, ip, #1
 8004d60:	4563      	cmp	r3, ip
 8004d62:	d1aa      	bne.n	8004cba <forward_conv2d_nl_pool+0x9b2>
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	4499      	add	r9, r3
 8004d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d6a:	ece3 6a01 	vstmia	r3!, {s13}
 8004d6e:	677b      	str	r3, [r7, #116]	; 0x74
 8004d70:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d191      	bne.n	8004c9c <forward_conv2d_nl_pool+0x994>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f10e 0e04 	add.w	lr, lr, #4
 8004d88:	459e      	cmp	lr, r3
 8004d8a:	f4ff af7d 	bcc.w	8004c88 <forward_conv2d_nl_pool+0x980>
 8004d8e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004d92:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8004d96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8004da0:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8004da4:	4608      	mov	r0, r1
 8004da6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004daa:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8004dae:	4410      	add	r0, r2
 8004db0:	1a8a      	subs	r2, r1, r2
 8004db2:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004db6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004dba:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dc6:	f47f aefd 	bne.w	8004bc4 <forward_conv2d_nl_pool+0x8bc>
 8004dca:	e5e7      	b.n	800499c <forward_conv2d_nl_pool+0x694>
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	e63f      	b.n	8004a50 <forward_conv2d_nl_pool+0x748>
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	e7a7      	b.n	8004d24 <forward_conv2d_nl_pool+0xa1c>
 8004dd4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004dd8:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8004ddc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004de0:	1b19      	subs	r1, r3, r4
 8004de2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004de6:	eef0 3a48 	vmov.f32	s7, s16
 8004dea:	1b1a      	subs	r2, r3, r4
 8004dec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004df0:	e71a      	b.n	8004c28 <forward_conv2d_nl_pool+0x920>
 8004df2:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8004df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004df8:	460a      	mov	r2, r1
 8004dfa:	440b      	add	r3, r1
 8004dfc:	e6ea      	b.n	8004bd4 <forward_conv2d_nl_pool+0x8cc>
 8004dfe:	b168      	cbz	r0, 8004e1c <forward_conv2d_nl_pool+0xb14>
 8004e00:	6882      	ldr	r2, [r0, #8]
 8004e02:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8004e06:	2201      	movs	r2, #1
 8004e08:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8004e0c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004e10:	f7ff bb29 	b.w	8004466 <forward_conv2d_nl_pool+0x15e>
 8004e14:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8004e18:	f7ff bb08 	b.w	800442c <forward_conv2d_nl_pool+0x124>
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8004e22:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8004e26:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004e2a:	f7ff bb1c 	b.w	8004466 <forward_conv2d_nl_pool+0x15e>
 8004e2e:	3118      	adds	r1, #24
 8004e30:	d008      	beq.n	8004e44 <forward_conv2d_nl_pool+0xb3c>
 8004e32:	462a      	mov	r2, r5
 8004e34:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f7ff ba93 	b.w	8004364 <forward_conv2d_nl_pool+0x5c>
 8004e3e:	4691      	mov	r9, r2
 8004e40:	f7ff ba7d 	b.w	800433e <forward_conv2d_nl_pool+0x36>
 8004e44:	68cb      	ldr	r3, [r1, #12]
 8004e46:	deff      	udf	#255	; 0xff
 8004e48:	2300      	movs	r3, #0
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	deff      	udf	#255	; 0xff
 8004e4e:	4694      	mov	ip, r2
 8004e50:	f7ff ba6c 	b.w	800432c <forward_conv2d_nl_pool+0x24>
 8004e54:	6873      	ldr	r3, [r6, #4]
 8004e56:	deff      	udf	#255	; 0xff
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f7ff ba82 	b.w	8004362 <forward_conv2d_nl_pool+0x5a>
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	deff      	udf	#255	; 0xff
 8004e62:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8004e66:	2a00      	cmp	r2, #0
 8004e68:	f43f ab60 	beq.w	800452c <forward_conv2d_nl_pool+0x224>
 8004e6c:	2e03      	cmp	r6, #3
 8004e6e:	d9eb      	bls.n	8004e48 <forward_conv2d_nl_pool+0xb40>
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	b323      	cbz	r3, 8004ec0 <forward_conv2d_nl_pool+0xbb8>
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	b313      	cbz	r3, 8004ec0 <forward_conv2d_nl_pool+0xbb8>
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004e80:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004e8a:	9000      	str	r0, [sp, #0]
 8004e8c:	4673      	mov	r3, lr
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7ff f9ea 	bl	8004268 <ai_dict_decompress_f32>
 8004e94:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8004e98:	b17c      	cbz	r4, 8004eba <forward_conv2d_nl_pool+0xbb2>
 8004e9a:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8004e9e:	881e      	ldrh	r6, [r3, #0]
 8004ea0:	f7ff bb44 	b.w	800452c <forward_conv2d_nl_pool+0x224>
 8004ea4:	b178      	cbz	r0, 8004ec6 <forward_conv2d_nl_pool+0xbbe>
 8004ea6:	6881      	ldr	r1, [r0, #8]
 8004ea8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8004eac:	2201      	movs	r2, #1
 8004eae:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8004eb2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004eb6:	f7ff bad6 	b.w	8004466 <forward_conv2d_nl_pool+0x15e>
 8004eba:	881e      	ldrh	r6, [r3, #0]
 8004ebc:	f7ff bb36 	b.w	800452c <forward_conv2d_nl_pool+0x224>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	deff      	udf	#255	; 0xff
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8004ecc:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8004ed0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004ed4:	f7ff bac7 	b.w	8004466 <forward_conv2d_nl_pool+0x15e>
 8004ed8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004eda:	2801      	cmp	r0, #1
 8004edc:	f47f ac10 	bne.w	8004700 <forward_conv2d_nl_pool+0x3f8>
 8004ee0:	1ad2      	subs	r2, r2, r3
 8004ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ee4:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8004ee8:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8004eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eee:	fb00 4101 	mla	r1, r0, r1, r4
 8004ef2:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8004ef6:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8004efa:	f080 81c4 	bcs.w	8005286 <forward_conv2d_nl_pool+0xf7e>
 8004efe:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004f02:	2a00      	cmp	r2, #0
 8004f04:	f43f ad4a 	beq.w	800499c <forward_conv2d_nl_pool+0x694>
 8004f08:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004f0c:	fb02 f303 	mul.w	r3, r2, r3
 8004f10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f12:	677b      	str	r3, [r7, #116]	; 0x74
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	663b      	str	r3, [r7, #96]	; 0x60
 8004f18:	188b      	adds	r3, r1, r2
 8004f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f2c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8004f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 8133 	beq.w	80051ae <forward_conv2d_nl_pool+0xea6>
 8004f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f4c:	ed93 6a00 	vldr	s12, [r3]
 8004f50:	3304      	adds	r3, #4
 8004f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f56:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8101 	beq.w	8005162 <forward_conv2d_nl_pool+0xe5a>
 8004f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f64:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004f68:	eb03 0802 	add.w	r8, r3, r2
 8004f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004f86:	f04f 0b00 	mov.w	fp, #0
 8004f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f2c0 8104 	blt.w	800519c <forward_conv2d_nl_pool+0xe94>
 8004f94:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004f98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8004fa0:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004fa4:	eb02 0c04 	add.w	ip, r2, r4
 8004fa8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004fac:	4540      	cmp	r0, r8
 8004fae:	bf94      	ite	ls
 8004fb0:	ebc3 0300 	rsbls	r3, r3, r0
 8004fb4:	ebc3 0308 	rsbhi	r3, r3, r8
 8004fb8:	eba2 0903 	sub.w	r9, r2, r3
 8004fbc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8004fc0:	1ac4      	subs	r4, r0, r3
 8004fc2:	fb03 f302 	mul.w	r3, r3, r2
 8004fc6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	f340 80e3 	ble.w	8005196 <forward_conv2d_nl_pool+0xe8e>
 8004fd0:	f023 050f 	bic.w	r5, r3, #15
 8004fd4:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8004fd8:	1e68      	subs	r0, r5, #1
 8004fda:	0900      	lsrs	r0, r0, #4
 8004fdc:	3001      	adds	r0, #1
 8004fde:	fb06 f204 	mul.w	r2, r6, r4
 8004fe2:	673a      	str	r2, [r7, #112]	; 0x70
 8004fe4:	0102      	lsls	r2, r0, #4
 8004fe6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fe8:	fb06 f909 	mul.w	r9, r6, r9
 8004fec:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8004ff0:	eef0 6a46 	vmov.f32	s13, s12
 8004ff4:	f04f 0e00 	mov.w	lr, #0
 8004ff8:	4662      	mov	r2, ip
 8004ffa:	2d00      	cmp	r5, #0
 8004ffc:	f340 80c9 	ble.w	8005192 <forward_conv2d_nl_pool+0xe8a>
 8005000:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8005004:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8005008:	2600      	movs	r6, #0
 800500a:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800500e:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8005012:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8005016:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800501a:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800501e:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8005022:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8005026:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800502a:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800502e:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8005032:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8005036:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800503a:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800503e:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 8005042:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8005046:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800504a:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800504e:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 8005052:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8005056:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800505a:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800505e:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8005062:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8005066:	ed50 3a04 	vldr	s7, [r0, #-16]
 800506a:	ed14 4a04 	vldr	s8, [r4, #-16]
 800506e:	ed50 4a03 	vldr	s9, [r0, #-12]
 8005072:	ed14 5a03 	vldr	s10, [r4, #-12]
 8005076:	ed50 5a02 	vldr	s11, [r0, #-8]
 800507a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800507e:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8005082:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8005086:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800508a:	3610      	adds	r6, #16
 800508c:	42ae      	cmp	r6, r5
 800508e:	ed14 fa01 	vldr	s30, [r4, #-4]
 8005092:	ed50 ea01 	vldr	s29, [r0, #-4]
 8005096:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800509a:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800509e:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80050a2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80050a6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80050aa:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80050ae:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80050b2:	eee9 7a89 	vfma.f32	s15, s19, s18
 80050b6:	eee8 7a80 	vfma.f32	s15, s17, s0
 80050ba:	eee0 7a81 	vfma.f32	s15, s1, s2
 80050be:	eee1 7a82 	vfma.f32	s15, s3, s4
 80050c2:	eee2 7a83 	vfma.f32	s15, s5, s6
 80050c6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80050ca:	eee4 7a85 	vfma.f32	s15, s9, s10
 80050ce:	eee5 7a87 	vfma.f32	s15, s11, s14
 80050d2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80050d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80050da:	db96      	blt.n	800500a <forward_conv2d_nl_pool+0xd02>
 80050dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80050de:	4451      	add	r1, sl
 80050e0:	4452      	add	r2, sl
 80050e2:	4283      	cmp	r3, r0
 80050e4:	dd0f      	ble.n	8005106 <forward_conv2d_nl_pool+0xdfe>
 80050e6:	4604      	mov	r4, r0
 80050e8:	468c      	mov	ip, r1
 80050ea:	4616      	mov	r6, r2
 80050ec:	ecb6 7a01 	vldmia	r6!, {s14}
 80050f0:	ecfc 7a01 	vldmia	ip!, {s15}
 80050f4:	3401      	adds	r4, #1
 80050f6:	42a3      	cmp	r3, r4
 80050f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80050fc:	d1f6      	bne.n	80050ec <forward_conv2d_nl_pool+0xde4>
 80050fe:	1a18      	subs	r0, r3, r0
 8005100:	0080      	lsls	r0, r0, #2
 8005102:	4402      	add	r2, r0
 8005104:	4401      	add	r1, r0
 8005106:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005108:	4402      	add	r2, r0
 800510a:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800510e:	f10e 0e01 	add.w	lr, lr, #1
 8005112:	4570      	cmp	r0, lr
 8005114:	4449      	add	r1, r9
 8005116:	f47f af70 	bne.w	8004ffa <forward_conv2d_nl_pool+0xcf2>
 800511a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800511e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005120:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005124:	edc3 6a00 	vstr	s13, [r3]
 8005128:	4608      	mov	r0, r1
 800512a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800512e:	440b      	add	r3, r1
 8005130:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005134:	67bb      	str	r3, [r7, #120]	; 0x78
 8005136:	4410      	add	r0, r2
 8005138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800513a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800513e:	4608      	mov	r0, r1
 8005140:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005144:	4418      	add	r0, r3
 8005146:	1acb      	subs	r3, r1, r3
 8005148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800514c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005150:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8005154:	f10b 0b01 	add.w	fp, fp, #1
 8005158:	455b      	cmp	r3, fp
 800515a:	eba8 0802 	sub.w	r8, r8, r2
 800515e:	f47f af14 	bne.w	8004f8a <forward_conv2d_nl_pool+0xc82>
 8005162:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005166:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005168:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800516c:	440a      	add	r2, r1
 800516e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005172:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005176:	3204      	adds	r2, #4
 8005178:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800517c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005180:	3301      	adds	r3, #1
 8005182:	429a      	cmp	r2, r3
 8005184:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005188:	f47f aed9 	bne.w	8004f3e <forward_conv2d_nl_pool+0xc36>
 800518c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8005190:	e404      	b.n	800499c <forward_conv2d_nl_pool+0x694>
 8005192:	2000      	movs	r0, #0
 8005194:	e7a5      	b.n	80050e2 <forward_conv2d_nl_pool+0xdda>
 8005196:	eef0 6a46 	vmov.f32	s13, s12
 800519a:	e7be      	b.n	800511a <forward_conv2d_nl_pool+0xe12>
 800519c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80051a0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80051a4:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80051a8:	eba8 0303 	sub.w	r3, r8, r3
 80051ac:	e6f6      	b.n	8004f9c <forward_conv2d_nl_pool+0xc94>
 80051ae:	eeb0 6a48 	vmov.f32	s12, s16
 80051b2:	e6d0      	b.n	8004f56 <forward_conv2d_nl_pool+0xc4e>
 80051b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80051b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051bc:	4611      	mov	r1, r2
 80051be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80051c2:	4419      	add	r1, r3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80051ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d0:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80051d4:	4413      	add	r3, r2
 80051d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80051da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051e2:	4293      	cmp	r3, r2
 80051e4:	f63f aa68 	bhi.w	80046b8 <forward_conv2d_nl_pool+0x3b0>
 80051e8:	e49f      	b.n	8004b2a <forward_conv2d_nl_pool+0x822>
 80051ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051ee:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80051f2:	699a      	ldr	r2, [r3, #24]
 80051f4:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 80051f8:	68d1      	ldr	r1, [r2, #12]
 80051fa:	6853      	ldr	r3, [r2, #4]
 80051fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051fe:	fb00 4012 	mls	r0, r0, r2, r4
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4281      	cmp	r1, r0
 8005206:	bf88      	it	hi
 8005208:	18c0      	addhi	r0, r0, r3
 800520a:	4281      	cmp	r1, r0
 800520c:	eb01 0203 	add.w	r2, r1, r3
 8005210:	d216      	bcs.n	8005240 <forward_conv2d_nl_pool+0xf38>
 8005212:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 8005216:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800521a:	42a1      	cmp	r1, r4
 800521c:	d010      	beq.n	8005240 <forward_conv2d_nl_pool+0xf38>
 800521e:	4290      	cmp	r0, r2
 8005220:	d20e      	bcs.n	8005240 <forward_conv2d_nl_pool+0xf38>
 8005222:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8005226:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800522a:	f850 3b04 	ldr.w	r3, [r0], #4
 800522e:	f841 3b04 	str.w	r3, [r1], #4
 8005232:	69a2      	ldr	r2, [r4, #24]
 8005234:	6853      	ldr	r3, [r2, #4]
 8005236:	68d2      	ldr	r2, [r2, #12]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	441a      	add	r2, r3
 800523c:	4282      	cmp	r2, r0
 800523e:	d8f4      	bhi.n	800522a <forward_conv2d_nl_pool+0xf22>
 8005240:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005244:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8005248:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 800524c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800524e:	4420      	add	r0, r4
 8005250:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8005254:	1a40      	subs	r0, r0, r1
 8005256:	4421      	add	r1, r4
 8005258:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800525c:	442c      	add	r4, r5
 800525e:	b209      	sxth	r1, r1
 8005260:	b200      	sxth	r0, r0
 8005262:	4294      	cmp	r4, r2
 8005264:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8005268:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800526c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8005270:	4621      	mov	r1, r4
 8005272:	f4ff abfb 	bcc.w	8004a6c <forward_conv2d_nl_pool+0x764>
 8005276:	425b      	negs	r3, r3
 8005278:	4419      	add	r1, r3
 800527a:	4291      	cmp	r1, r2
 800527c:	d2fc      	bcs.n	8005278 <forward_conv2d_nl_pool+0xf70>
 800527e:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8005282:	f7ff bbf3 	b.w	8004a6c <forward_conv2d_nl_pool+0x764>
 8005286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800528a:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800528e:	320a      	adds	r2, #10
 8005290:	f022 0207 	bic.w	r2, r2, #7
 8005294:	ebad 0d02 	sub.w	sp, sp, r2
 8005298:	aa0a      	add	r2, sp, #40	; 0x28
 800529a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800529e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	f000 8153 	beq.w	800554e <forward_conv2d_nl_pool+0x1246>
 80052a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80052ac:	f8c7 b01c 	str.w	fp, [r7, #28]
 80052b0:	fb02 f303 	mul.w	r3, r2, r3
 80052b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052b6:	663b      	str	r3, [r7, #96]	; 0x60
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80052bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80052c0:	f8c7 a014 	str.w	sl, [r7, #20]
 80052c4:	4413      	add	r3, r2
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80052d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052de:	2300      	movs	r3, #0
 80052e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052e8:	b13b      	cbz	r3, 80052fa <forward_conv2d_nl_pool+0xff2>
 80052ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052ee:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80052f2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80052f6:	f001 f9db 	bl	80066b0 <memcpy>
 80052fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 8137 	beq.w	8005572 <forward_conv2d_nl_pool+0x126a>
 8005304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005306:	ed93 6a00 	vldr	s12, [r3]
 800530a:	3304      	adds	r3, #4
 800530c:	67bb      	str	r3, [r7, #120]	; 0x78
 800530e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 8101 	beq.w	800551a <forward_conv2d_nl_pool+0x1212>
 8005318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005320:	eb03 0802 	add.w	r8, r3, r2
 8005324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005334:	677b      	str	r3, [r7, #116]	; 0x74
 8005336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800533a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800533e:	f04f 0b00 	mov.w	fp, #0
 8005342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005346:	2b00      	cmp	r3, #0
 8005348:	f2c0 810a 	blt.w	8005560 <forward_conv2d_nl_pool+0x1258>
 800534c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005352:	2300      	movs	r3, #0
 8005354:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8005358:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800535c:	eb02 0c04 	add.w	ip, r2, r4
 8005360:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005364:	4540      	cmp	r0, r8
 8005366:	bf94      	ite	ls
 8005368:	ebc3 0300 	rsbls	r3, r3, r0
 800536c:	ebc3 0308 	rsbhi	r3, r3, r8
 8005370:	eba2 0903 	sub.w	r9, r2, r3
 8005374:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8005378:	1ac4      	subs	r4, r0, r3
 800537a:	fb03 f302 	mul.w	r3, r3, r2
 800537e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8005382:	2a00      	cmp	r2, #0
 8005384:	f340 80e9 	ble.w	800555a <forward_conv2d_nl_pool+0x1252>
 8005388:	f023 050f 	bic.w	r5, r3, #15
 800538c:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8005390:	1e68      	subs	r0, r5, #1
 8005392:	0900      	lsrs	r0, r0, #4
 8005394:	3001      	adds	r0, #1
 8005396:	fb06 f204 	mul.w	r2, r6, r4
 800539a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800539c:	0102      	lsls	r2, r0, #4
 800539e:	62ba      	str	r2, [r7, #40]	; 0x28
 80053a0:	fb06 f909 	mul.w	r9, r6, r9
 80053a4:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80053a8:	eef0 6a46 	vmov.f32	s13, s12
 80053ac:	f04f 0e00 	mov.w	lr, #0
 80053b0:	4662      	mov	r2, ip
 80053b2:	2d00      	cmp	r5, #0
 80053b4:	f340 80cf 	ble.w	8005556 <forward_conv2d_nl_pool+0x124e>
 80053b8:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80053bc:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80053c0:	2600      	movs	r6, #0
 80053c2:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 80053c6:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80053ca:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 80053ce:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 80053d2:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80053d6:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80053da:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80053de:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80053e2:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80053e6:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80053ea:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80053ee:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 80053f2:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80053f6:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 80053fa:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80053fe:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8005402:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8005406:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800540a:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800540e:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8005412:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8005416:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800541a:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800541e:	ed50 3a04 	vldr	s7, [r0, #-16]
 8005422:	ed14 4a04 	vldr	s8, [r4, #-16]
 8005426:	ed54 4a03 	vldr	s9, [r4, #-12]
 800542a:	ed10 5a03 	vldr	s10, [r0, #-12]
 800542e:	ed50 5a02 	vldr	s11, [r0, #-8]
 8005432:	ed14 7a02 	vldr	s14, [r4, #-8]
 8005436:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800543a:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800543e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8005442:	3610      	adds	r6, #16
 8005444:	42ae      	cmp	r6, r5
 8005446:	ed14 fa01 	vldr	s30, [r4, #-4]
 800544a:	ed50 ea01 	vldr	s29, [r0, #-4]
 800544e:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8005452:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8005456:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800545a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800545e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8005462:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8005466:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800546a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800546e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8005472:	eee0 7a81 	vfma.f32	s15, s1, s2
 8005476:	eee1 7a82 	vfma.f32	s15, s3, s4
 800547a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800547e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005482:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005486:	eee5 7a87 	vfma.f32	s15, s11, s14
 800548a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800548e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005492:	db96      	blt.n	80053c2 <forward_conv2d_nl_pool+0x10ba>
 8005494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005496:	4451      	add	r1, sl
 8005498:	4452      	add	r2, sl
 800549a:	4283      	cmp	r3, r0
 800549c:	dd0f      	ble.n	80054be <forward_conv2d_nl_pool+0x11b6>
 800549e:	4604      	mov	r4, r0
 80054a0:	468c      	mov	ip, r1
 80054a2:	4616      	mov	r6, r2
 80054a4:	ecb6 7a01 	vldmia	r6!, {s14}
 80054a8:	ecfc 7a01 	vldmia	ip!, {s15}
 80054ac:	3401      	adds	r4, #1
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80054b4:	d1f6      	bne.n	80054a4 <forward_conv2d_nl_pool+0x119c>
 80054b6:	1a18      	subs	r0, r3, r0
 80054b8:	0080      	lsls	r0, r0, #2
 80054ba:	4402      	add	r2, r0
 80054bc:	4401      	add	r1, r0
 80054be:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80054c0:	4402      	add	r2, r0
 80054c2:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80054c6:	f10e 0e01 	add.w	lr, lr, #1
 80054ca:	4570      	cmp	r0, lr
 80054cc:	4449      	add	r1, r9
 80054ce:	f47f af70 	bne.w	80053b2 <forward_conv2d_nl_pool+0x10aa>
 80054d2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80054d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80054dc:	edc3 6a00 	vstr	s13, [r3]
 80054e0:	4608      	mov	r0, r1
 80054e2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80054e6:	440b      	add	r3, r1
 80054e8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80054ec:	677b      	str	r3, [r7, #116]	; 0x74
 80054ee:	4410      	add	r0, r2
 80054f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054f2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80054f6:	4608      	mov	r0, r1
 80054f8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80054fc:	4418      	add	r0, r3
 80054fe:	1acb      	subs	r3, r1, r3
 8005500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005504:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005508:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800550c:	f10b 0b01 	add.w	fp, fp, #1
 8005510:	455b      	cmp	r3, fp
 8005512:	eba8 0802 	sub.w	r8, r8, r2
 8005516:	f47f af14 	bne.w	8005342 <forward_conv2d_nl_pool+0x103a>
 800551a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800551e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8005522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005526:	440a      	add	r2, r1
 8005528:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800552c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005530:	3204      	adds	r2, #4
 8005532:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005536:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800553a:	3301      	adds	r3, #1
 800553c:	429a      	cmp	r2, r3
 800553e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005542:	f47f aecf 	bne.w	80052e4 <forward_conv2d_nl_pool+0xfdc>
 8005546:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800554a:	f8d7 a014 	ldr.w	sl, [r7, #20]
 800554e:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8005552:	f7ff ba23 	b.w	800499c <forward_conv2d_nl_pool+0x694>
 8005556:	2000      	movs	r0, #0
 8005558:	e79f      	b.n	800549a <forward_conv2d_nl_pool+0x1192>
 800555a:	eef0 6a46 	vmov.f32	s13, s12
 800555e:	e7b8      	b.n	80054d2 <forward_conv2d_nl_pool+0x11ca>
 8005560:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005564:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005568:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800556c:	eba8 0303 	sub.w	r3, r8, r3
 8005570:	e6f0      	b.n	8005354 <forward_conv2d_nl_pool+0x104c>
 8005572:	eeb0 6a48 	vmov.f32	s12, s16
 8005576:	e6ca      	b.n	800530e <forward_conv2d_nl_pool+0x1006>

08005578 <forward_dense>:
 8005578:	6983      	ldr	r3, [r0, #24]
 800557a:	881a      	ldrh	r2, [r3, #0]
 800557c:	2a00      	cmp	r2, #0
 800557e:	f000 8193 	beq.w	80058a8 <forward_dense+0x330>
 8005582:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005586:	ed2d 8b10 	vpush	{d8-d15}
 800558a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800558e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005592:	b099      	sub	sp, #100	; 0x64
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8194 	beq.w	80058c2 <forward_dense+0x34a>
 800559a:	f8d3 8000 	ldr.w	r8, [r3]
 800559e:	2a01      	cmp	r2, #1
 80055a0:	f240 817f 	bls.w	80058a2 <forward_dense+0x32a>
 80055a4:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80055a8:	b104      	cbz	r4, 80055ac <forward_dense+0x34>
 80055aa:	6824      	ldr	r4, [r4, #0]
 80055ac:	2a02      	cmp	r2, #2
 80055ae:	f000 817d 	beq.w	80058ac <forward_dense+0x334>
 80055b2:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f040 817b 	bne.w	80058b2 <forward_dense+0x33a>
 80055bc:	f11c 0118 	adds.w	r1, ip, #24
 80055c0:	930e      	str	r3, [sp, #56]	; 0x38
 80055c2:	f000 817c 	beq.w	80058be <forward_dense+0x346>
 80055c6:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 80055ca:	2901      	cmp	r1, #1
 80055cc:	f240 83ab 	bls.w	8005d26 <forward_dense+0x7ae>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8178 	beq.w	80058c6 <forward_dense+0x34e>
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80055da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055dc:	68e7      	ldr	r7, [r4, #12]
 80055de:	6998      	ldr	r0, [r3, #24]
 80055e0:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80055e4:	6803      	ldr	r3, [r0, #0]
 80055e6:	6849      	ldr	r1, [r1, #4]
 80055e8:	9115      	str	r1, [sp, #84]	; 0x54
 80055ea:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 80055ee:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80055f2:	f3c3 5141 	ubfx	r1, r3, #21, #2
 80055f6:	fa4e f101 	asr.w	r1, lr, r1
 80055fa:	2a03      	cmp	r2, #3
 80055fc:	68ff      	ldr	r7, [r7, #12]
 80055fe:	9113      	str	r1, [sp, #76]	; 0x4c
 8005600:	fb05 f506 	mul.w	r5, r5, r6
 8005604:	f000 8373 	beq.w	8005cee <forward_dense+0x776>
 8005608:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800560c:	2a00      	cmp	r2, #0
 800560e:	f000 8371 	beq.w	8005cf4 <forward_dense+0x77c>
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	2a00      	cmp	r2, #0
 8005616:	f000 836d 	beq.w	8005cf4 <forward_dense+0x77c>
 800561a:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800561e:	2b04      	cmp	r3, #4
 8005620:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8005624:	f000 836c 	beq.w	8005d00 <forward_dense+0x788>
 8005628:	2b08      	cmp	r3, #8
 800562a:	f000 8369 	beq.w	8005d00 <forward_dense+0x788>
 800562e:	f04f 0a00 	mov.w	sl, #0
 8005632:	69a3      	ldr	r3, [r4, #24]
 8005634:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8005638:	6899      	ldr	r1, [r3, #8]
 800563a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800563c:	9102      	str	r1, [sp, #8]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	6892      	ldr	r2, [r2, #8]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	9305      	str	r3, [sp, #20]
 8005646:	00ad      	lsls	r5, r5, #2
 8005648:	fb07 1005 	mla	r0, r7, r5, r1
 800564c:	00b4      	lsls	r4, r6, #2
 800564e:	4281      	cmp	r1, r0
 8005650:	9011      	str	r0, [sp, #68]	; 0x44
 8005652:	9410      	str	r4, [sp, #64]	; 0x40
 8005654:	eb01 0804 	add.w	r8, r1, r4
 8005658:	f080 811e 	bcs.w	8005898 <forward_dense+0x320>
 800565c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800565e:	eddf faa0 	vldr	s31, [pc, #640]	; 80058e0 <forward_dense+0x368>
 8005662:	08e8      	lsrs	r0, r5, #3
 8005664:	0141      	lsls	r1, r0, #5
 8005666:	f025 0301 	bic.w	r3, r5, #1
 800566a:	4606      	mov	r6, r0
 800566c:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 8005670:	9001      	str	r0, [sp, #4]
 8005672:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 8005676:	00f7      	lsls	r7, r6, #3
 8005678:	9316      	str	r3, [sp, #88]	; 0x58
 800567a:	0143      	lsls	r3, r0, #5
 800567c:	00b6      	lsls	r6, r6, #2
 800567e:	f1a5 0410 	sub.w	r4, r5, #16
 8005682:	9307      	str	r3, [sp, #28]
 8005684:	f107 0308 	add.w	r3, r7, #8
 8005688:	0924      	lsrs	r4, r4, #4
 800568a:	9304      	str	r3, [sp, #16]
 800568c:	1d33      	adds	r3, r6, #4
 800568e:	3401      	adds	r4, #1
 8005690:	930d      	str	r3, [sp, #52]	; 0x34
 8005692:	f005 0301 	and.w	r3, r5, #1
 8005696:	01a4      	lsls	r4, r4, #6
 8005698:	f005 0907 	and.w	r9, r5, #7
 800569c:	9309      	str	r3, [sp, #36]	; 0x24
 800569e:	00ab      	lsls	r3, r5, #2
 80056a0:	9312      	str	r3, [sp, #72]	; 0x48
 80056a2:	9703      	str	r7, [sp, #12]
 80056a4:	960c      	str	r6, [sp, #48]	; 0x30
 80056a6:	9417      	str	r4, [sp, #92]	; 0x5c
 80056a8:	eb02 0b01 	add.w	fp, r2, r1
 80056ac:	4653      	mov	r3, sl
 80056ae:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 80056b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056b4:	9907      	ldr	r1, [sp, #28]
 80056b6:	6992      	ldr	r2, [r2, #24]
 80056b8:	6894      	ldr	r4, [r2, #8]
 80056ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056bc:	4459      	add	r1, fp
 80056be:	9106      	str	r1, [sp, #24]
 80056c0:	2a00      	cmp	r2, #0
 80056c2:	f000 810f 	beq.w	80058e4 <forward_dense+0x36c>
 80056c6:	6992      	ldr	r2, [r2, #24]
 80056c8:	6896      	ldr	r6, [r2, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 810e 	beq.w	80058ec <forward_dense+0x374>
 80056d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056d2:	2a04      	cmp	r2, #4
 80056d4:	f000 821e 	beq.w	8005b14 <forward_dense+0x59c>
 80056d8:	9a02      	ldr	r2, [sp, #8]
 80056da:	4590      	cmp	r8, r2
 80056dc:	f240 80d3 	bls.w	8005886 <forward_dense+0x30e>
 80056e0:	4694      	mov	ip, r2
 80056e2:	9a07      	ldr	r2, [sp, #28]
 80056e4:	f8dd a014 	ldr.w	sl, [sp, #20]
 80056e8:	f102 0e20 	add.w	lr, r2, #32
 80056ec:	46b1      	mov	r9, r6
 80056ee:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80056f0:	44de      	add	lr, fp
 80056f2:	f1b9 0f00 	cmp.w	r9, #0
 80056f6:	f000 80e8 	beq.w	80058ca <forward_dense+0x352>
 80056fa:	9a01      	ldr	r2, [sp, #4]
 80056fc:	edd9 2a00 	vldr	s5, [r9]
 8005700:	eddf 6a77 	vldr	s13, [pc, #476]	; 80058e0 <forward_dense+0x368>
 8005704:	f109 0904 	add.w	r9, r9, #4
 8005708:	2a00      	cmp	r2, #0
 800570a:	f000 80e6 	beq.w	80058da <forward_dense+0x362>
 800570e:	9904      	ldr	r1, [sp, #16]
 8005710:	f104 0208 	add.w	r2, r4, #8
 8005714:	190f      	adds	r7, r1, r4
 8005716:	4671      	mov	r1, lr
 8005718:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 800571c:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 8005720:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 8005724:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 8005728:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800572c:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 8005730:	ed51 3a04 	vldr	s7, [r1, #-16]
 8005734:	ed51 4a03 	vldr	s9, [r1, #-12]
 8005738:	ed51 5a02 	vldr	s11, [r1, #-8]
 800573c:	ed11 6a01 	vldr	s12, [r1, #-4]
 8005740:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005744:	ed95 7a00 	vldr	s14, [r5]
 8005748:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 800574c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005754:	ed90 7a00 	vldr	s14, [r0]
 8005758:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 800575c:	eee7 7a03 	vfma.f32	s15, s14, s6
 8005760:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005764:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005768:	ed95 3a00 	vldr	s6, [r5]
 800576c:	ed90 7a00 	vldr	s14, [r0]
 8005770:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 8005774:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8005778:	eee3 7a04 	vfma.f32	s15, s6, s8
 800577c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005780:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005784:	ed95 3a00 	vldr	s6, [r5]
 8005788:	ed90 4a00 	vldr	s8, [r0]
 800578c:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 8005790:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8005794:	eee7 7a05 	vfma.f32	s15, s14, s10
 8005798:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800579c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80057a0:	ed95 5a00 	vldr	s10, [r5]
 80057a4:	ed90 7a00 	vldr	s14, [r0]
 80057a8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80057ac:	3208      	adds	r2, #8
 80057ae:	4297      	cmp	r7, r2
 80057b0:	f101 0120 	add.w	r1, r1, #32
 80057b4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80057b8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80057bc:	eee7 7a06 	vfma.f32	s15, s14, s12
 80057c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80057c4:	d1a8      	bne.n	8005718 <forward_dense+0x1a0>
 80057c6:	9a03      	ldr	r2, [sp, #12]
 80057c8:	18a1      	adds	r1, r4, r2
 80057ca:	465a      	mov	r2, fp
 80057cc:	2e00      	cmp	r6, #0
 80057ce:	d04a      	beq.n	8005866 <forward_dense+0x2ee>
 80057d0:	7808      	ldrb	r0, [r1, #0]
 80057d2:	ed92 7a00 	vldr	s14, [r2]
 80057d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80057da:	edd0 7a00 	vldr	s15, [r0]
 80057de:	2e01      	cmp	r6, #1
 80057e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80057e4:	d03f      	beq.n	8005866 <forward_dense+0x2ee>
 80057e6:	7848      	ldrb	r0, [r1, #1]
 80057e8:	edd2 7a01 	vldr	s15, [r2, #4]
 80057ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80057f0:	ed90 7a00 	vldr	s14, [r0]
 80057f4:	2e02      	cmp	r6, #2
 80057f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80057fa:	d034      	beq.n	8005866 <forward_dense+0x2ee>
 80057fc:	7888      	ldrb	r0, [r1, #2]
 80057fe:	edd2 7a02 	vldr	s15, [r2, #8]
 8005802:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005806:	ed90 7a00 	vldr	s14, [r0]
 800580a:	2e03      	cmp	r6, #3
 800580c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005810:	d029      	beq.n	8005866 <forward_dense+0x2ee>
 8005812:	78c8      	ldrb	r0, [r1, #3]
 8005814:	edd2 7a03 	vldr	s15, [r2, #12]
 8005818:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800581c:	ed90 7a00 	vldr	s14, [r0]
 8005820:	2e04      	cmp	r6, #4
 8005822:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005826:	d01e      	beq.n	8005866 <forward_dense+0x2ee>
 8005828:	7908      	ldrb	r0, [r1, #4]
 800582a:	edd2 7a04 	vldr	s15, [r2, #16]
 800582e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005832:	ed90 7a00 	vldr	s14, [r0]
 8005836:	2e05      	cmp	r6, #5
 8005838:	eee7 6a27 	vfma.f32	s13, s14, s15
 800583c:	d013      	beq.n	8005866 <forward_dense+0x2ee>
 800583e:	7948      	ldrb	r0, [r1, #5]
 8005840:	edd2 7a05 	vldr	s15, [r2, #20]
 8005844:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005848:	ed90 7a00 	vldr	s14, [r0]
 800584c:	2e06      	cmp	r6, #6
 800584e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005852:	d008      	beq.n	8005866 <forward_dense+0x2ee>
 8005854:	7989      	ldrb	r1, [r1, #6]
 8005856:	edd2 7a06 	vldr	s15, [r2, #24]
 800585a:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 800585e:	ed92 7a00 	vldr	s14, [r2]
 8005862:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005866:	4454      	add	r4, sl
 8005868:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800586c:	ecec 6a01 	vstmia	ip!, {s13}
 8005870:	45c4      	cmp	ip, r8
 8005872:	f4ff af3e 	bcc.w	80056f2 <forward_dense+0x17a>
 8005876:	9902      	ldr	r1, [sp, #8]
 8005878:	43ca      	mvns	r2, r1
 800587a:	4442      	add	r2, r8
 800587c:	f022 0203 	bic.w	r2, r2, #3
 8005880:	3204      	adds	r2, #4
 8005882:	188a      	adds	r2, r1, r2
 8005884:	9202      	str	r2, [sp, #8]
 8005886:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005888:	9911      	ldr	r1, [sp, #68]	; 0x44
 800588a:	4490      	add	r8, r2
 800588c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800588e:	4493      	add	fp, r2
 8005890:	9a02      	ldr	r2, [sp, #8]
 8005892:	428a      	cmp	r2, r1
 8005894:	f4ff af0d 	bcc.w	80056b2 <forward_dense+0x13a>
 8005898:	b019      	add	sp, #100	; 0x64
 800589a:	ecbd 8b10 	vpop	{d8-d15}
 800589e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a2:	2300      	movs	r3, #0
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	deff      	udf	#255	; 0xff
 80058a8:	6853      	ldr	r3, [r2, #4]
 80058aa:	deff      	udf	#255	; 0xff
 80058ac:	2300      	movs	r3, #0
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	deff      	udf	#255	; 0xff
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	910e      	str	r1, [sp, #56]	; 0x38
 80058b6:	f11c 0118 	adds.w	r1, ip, #24
 80058ba:	f47f ae84 	bne.w	80055c6 <forward_dense+0x4e>
 80058be:	910f      	str	r1, [sp, #60]	; 0x3c
 80058c0:	e68b      	b.n	80055da <forward_dense+0x62>
 80058c2:	4698      	mov	r8, r3
 80058c4:	e66b      	b.n	800559e <forward_dense+0x26>
 80058c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80058c8:	e687      	b.n	80055da <forward_dense+0x62>
 80058ca:	9a01      	ldr	r2, [sp, #4]
 80058cc:	eddf 6a04 	vldr	s13, [pc, #16]	; 80058e0 <forward_dense+0x368>
 80058d0:	eef0 2a6f 	vmov.f32	s5, s31
 80058d4:	2a00      	cmp	r2, #0
 80058d6:	f47f af1a 	bne.w	800570e <forward_dense+0x196>
 80058da:	9a06      	ldr	r2, [sp, #24]
 80058dc:	4621      	mov	r1, r4
 80058de:	e775      	b.n	80057cc <forward_dense+0x254>
 80058e0:	00000000 	.word	0x00000000
 80058e4:	4616      	mov	r6, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f47f aef2 	bne.w	80056d0 <forward_dense+0x158>
 80058ec:	9a02      	ldr	r2, [sp, #8]
 80058ee:	4590      	cmp	r8, r2
 80058f0:	d9c9      	bls.n	8005886 <forward_dense+0x30e>
 80058f2:	4615      	mov	r5, r2
 80058f4:	9a07      	ldr	r2, [sp, #28]
 80058f6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80058f8:	9308      	str	r3, [sp, #32]
 80058fa:	f102 0740 	add.w	r7, r2, #64	; 0x40
 80058fe:	9a06      	ldr	r2, [sp, #24]
 8005900:	9b05      	ldr	r3, [sp, #20]
 8005902:	4610      	mov	r0, r2
 8005904:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005906:	445f      	add	r7, fp
 8005908:	eb00 0c02 	add.w	ip, r0, r2
 800590c:	f001 0e0f 	and.w	lr, r1, #15
 8005910:	468a      	mov	sl, r1
 8005912:	4691      	mov	r9, r2
 8005914:	2e00      	cmp	r6, #0
 8005916:	f000 81de 	beq.w	8005cd6 <forward_dense+0x75e>
 800591a:	f1ba 0f0f 	cmp.w	sl, #15
 800591e:	ed96 fa00 	vldr	s30, [r6]
 8005922:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 80058e0 <forward_dense+0x368>
 8005926:	f106 0604 	add.w	r6, r6, #4
 800592a:	f240 81dc 	bls.w	8005ce6 <forward_dense+0x76e>
 800592e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8005932:	463a      	mov	r2, r7
 8005934:	4650      	mov	r0, sl
 8005936:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 800593a:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 800593e:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 8005942:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 8005946:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 800594a:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 800594e:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 8005952:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 8005956:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 800595a:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 800595e:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 8005962:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8005966:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 800596a:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 800596e:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 8005972:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 8005976:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800597a:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 800597e:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8005982:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 8005986:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800598a:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 800598e:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 8005992:	ed12 4a04 	vldr	s8, [r2, #-16]
 8005996:	ed51 4a04 	vldr	s9, [r1, #-16]
 800599a:	ed12 5a03 	vldr	s10, [r2, #-12]
 800599e:	ed51 5a03 	vldr	s11, [r1, #-12]
 80059a2:	ed12 6a02 	vldr	s12, [r2, #-8]
 80059a6:	ed11 7a02 	vldr	s14, [r1, #-8]
 80059aa:	ee67 7aae 	vmul.f32	s15, s15, s29
 80059ae:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 80059b2:	eeee 7a2d 	vfma.f32	s15, s28, s27
 80059b6:	3810      	subs	r0, #16
 80059b8:	280f      	cmp	r0, #15
 80059ba:	ed11 ea01 	vldr	s28, [r1, #-4]
 80059be:	ed52 da01 	vldr	s27, [r2, #-4]
 80059c2:	eeed 7a2e 	vfma.f32	s15, s26, s29
 80059c6:	f101 0140 	add.w	r1, r1, #64	; 0x40
 80059ca:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80059ce:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80059d2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80059d6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80059da:	eee9 7a89 	vfma.f32	s15, s19, s18
 80059de:	eee8 7a88 	vfma.f32	s15, s17, s16
 80059e2:	eee0 7a20 	vfma.f32	s15, s0, s1
 80059e6:	eee1 7a21 	vfma.f32	s15, s2, s3
 80059ea:	eee2 7a22 	vfma.f32	s15, s4, s5
 80059ee:	eee3 7a23 	vfma.f32	s15, s6, s7
 80059f2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80059f6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80059fa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80059fe:	eeee 7a2d 	vfma.f32	s15, s28, s27
 8005a02:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a06:	d896      	bhi.n	8005936 <forward_dense+0x3be>
 8005a08:	eb04 0009 	add.w	r0, r4, r9
 8005a0c:	4672      	mov	r2, lr
 8005a0e:	4661      	mov	r1, ip
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	d075      	beq.n	8005b00 <forward_dense+0x588>
 8005a14:	ed90 7a00 	vldr	s14, [r0]
 8005a18:	edd1 7a00 	vldr	s15, [r1]
 8005a1c:	2a01      	cmp	r2, #1
 8005a1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a22:	d06d      	beq.n	8005b00 <forward_dense+0x588>
 8005a24:	ed90 7a01 	vldr	s14, [r0, #4]
 8005a28:	edd1 7a01 	vldr	s15, [r1, #4]
 8005a2c:	2a02      	cmp	r2, #2
 8005a2e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a32:	d065      	beq.n	8005b00 <forward_dense+0x588>
 8005a34:	ed90 7a02 	vldr	s14, [r0, #8]
 8005a38:	edd1 7a02 	vldr	s15, [r1, #8]
 8005a3c:	2a03      	cmp	r2, #3
 8005a3e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a42:	d05d      	beq.n	8005b00 <forward_dense+0x588>
 8005a44:	ed90 7a03 	vldr	s14, [r0, #12]
 8005a48:	edd1 7a03 	vldr	s15, [r1, #12]
 8005a4c:	2a04      	cmp	r2, #4
 8005a4e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a52:	d055      	beq.n	8005b00 <forward_dense+0x588>
 8005a54:	ed90 7a04 	vldr	s14, [r0, #16]
 8005a58:	edd1 7a04 	vldr	s15, [r1, #16]
 8005a5c:	2a05      	cmp	r2, #5
 8005a5e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a62:	d04d      	beq.n	8005b00 <forward_dense+0x588>
 8005a64:	ed90 7a05 	vldr	s14, [r0, #20]
 8005a68:	edd1 7a05 	vldr	s15, [r1, #20]
 8005a6c:	2a06      	cmp	r2, #6
 8005a6e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a72:	d045      	beq.n	8005b00 <forward_dense+0x588>
 8005a74:	ed90 7a06 	vldr	s14, [r0, #24]
 8005a78:	edd1 7a06 	vldr	s15, [r1, #24]
 8005a7c:	2a07      	cmp	r2, #7
 8005a7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a82:	d03d      	beq.n	8005b00 <forward_dense+0x588>
 8005a84:	ed90 7a07 	vldr	s14, [r0, #28]
 8005a88:	edd1 7a07 	vldr	s15, [r1, #28]
 8005a8c:	2a08      	cmp	r2, #8
 8005a8e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a92:	d035      	beq.n	8005b00 <forward_dense+0x588>
 8005a94:	ed90 7a08 	vldr	s14, [r0, #32]
 8005a98:	edd1 7a08 	vldr	s15, [r1, #32]
 8005a9c:	2a09      	cmp	r2, #9
 8005a9e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005aa2:	d02d      	beq.n	8005b00 <forward_dense+0x588>
 8005aa4:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8005aa8:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8005aac:	2a0a      	cmp	r2, #10
 8005aae:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005ab2:	d025      	beq.n	8005b00 <forward_dense+0x588>
 8005ab4:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8005ab8:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8005abc:	2a0b      	cmp	r2, #11
 8005abe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005ac2:	d01d      	beq.n	8005b00 <forward_dense+0x588>
 8005ac4:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8005ac8:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 8005acc:	2a0c      	cmp	r2, #12
 8005ace:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005ad2:	d015      	beq.n	8005b00 <forward_dense+0x588>
 8005ad4:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8005ad8:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 8005adc:	2a0d      	cmp	r2, #13
 8005ade:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005ae2:	d00d      	beq.n	8005b00 <forward_dense+0x588>
 8005ae4:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8005ae8:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8005aec:	2a0e      	cmp	r2, #14
 8005aee:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005af2:	d005      	beq.n	8005b00 <forward_dense+0x588>
 8005af4:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8005af8:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8005afc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b00:	441c      	add	r4, r3
 8005b02:	ee7f 6a26 	vadd.f32	s13, s30, s13
 8005b06:	ece5 6a01 	vstmia	r5!, {s13}
 8005b0a:	4545      	cmp	r5, r8
 8005b0c:	f4ff af02 	bcc.w	8005914 <forward_dense+0x39c>
 8005b10:	9b08      	ldr	r3, [sp, #32]
 8005b12:	e6b0      	b.n	8005876 <forward_dense+0x2fe>
 8005b14:	9902      	ldr	r1, [sp, #8]
 8005b16:	4588      	cmp	r8, r1
 8005b18:	f67f aeb5 	bls.w	8005886 <forward_dense+0x30e>
 8005b1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b1e:	eb02 000b 	add.w	r0, r2, fp
 8005b22:	9a07      	ldr	r2, [sp, #28]
 8005b24:	9008      	str	r0, [sp, #32]
 8005b26:	3220      	adds	r2, #32
 8005b28:	3007      	adds	r0, #7
 8005b2a:	445a      	add	r2, fp
 8005b2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b2e:	920a      	str	r2, [sp, #40]	; 0x28
 8005b30:	4689      	mov	r9, r1
 8005b32:	2e00      	cmp	r6, #0
 8005b34:	f000 80b9 	beq.w	8005caa <forward_dense+0x732>
 8005b38:	9a01      	ldr	r2, [sp, #4]
 8005b3a:	edd6 2a00 	vldr	s5, [r6]
 8005b3e:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 80058e0 <forward_dense+0x368>
 8005b42:	3604      	adds	r6, #4
 8005b44:	2a00      	cmp	r2, #0
 8005b46:	f000 80b8 	beq.w	8005cba <forward_dense+0x742>
 8005b4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b4c:	1917      	adds	r7, r2, r4
 8005b4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b50:	1d21      	adds	r1, r4, #4
 8005b52:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8005b56:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 8005b5a:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8005b5e:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 8005b62:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 8005b66:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 8005b6a:	ed52 4a04 	vldr	s9, [r2, #-16]
 8005b6e:	ed12 5a03 	vldr	s10, [r2, #-12]
 8005b72:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005b76:	ed12 6a01 	vldr	s12, [r2, #-4]
 8005b7a:	f005 0e0f 	and.w	lr, r5, #15
 8005b7e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8005b82:	ed9e 7a00 	vldr	s14, [lr]
 8005b86:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 8005b8a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8005b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b92:	ed9c 7a00 	vldr	s14, [ip]
 8005b96:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 8005b9a:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 8005b9e:	eee7 7a03 	vfma.f32	s15, s14, s6
 8005ba2:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8005ba6:	f000 0c0f 	and.w	ip, r0, #15
 8005baa:	ed9e 7a00 	vldr	s14, [lr]
 8005bae:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8005bb2:	eee7 7a23 	vfma.f32	s15, s14, s7
 8005bb6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8005bba:	3104      	adds	r1, #4
 8005bbc:	ed9c 7a00 	vldr	s14, [ip]
 8005bc0:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 8005bc4:	eee7 7a04 	vfma.f32	s15, s14, s8
 8005bc8:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8005bcc:	f005 050f 	and.w	r5, r5, #15
 8005bd0:	ed9c 7a00 	vldr	s14, [ip]
 8005bd4:	eee7 7a24 	vfma.f32	s15, s14, s9
 8005bd8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005bdc:	428f      	cmp	r7, r1
 8005bde:	ed95 7a00 	vldr	s14, [r5]
 8005be2:	ea4f 1510 	mov.w	r5, r0, lsr #4
 8005be6:	eee7 7a05 	vfma.f32	s15, s14, s10
 8005bea:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005bee:	f000 000f 	and.w	r0, r0, #15
 8005bf2:	ed95 7a00 	vldr	s14, [r5]
 8005bf6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005bfa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005bfe:	f102 0220 	add.w	r2, r2, #32
 8005c02:	ed90 7a00 	vldr	s14, [r0]
 8005c06:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005c0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c0e:	d1a0      	bne.n	8005b52 <forward_dense+0x5da>
 8005c10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c12:	46de      	mov	lr, fp
 8005c14:	eb04 0a02 	add.w	sl, r4, r2
 8005c18:	9a08      	ldr	r2, [sp, #32]
 8005c1a:	4596      	cmp	lr, r2
 8005c1c:	d22c      	bcs.n	8005c78 <forward_dense+0x700>
 8005c1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c20:	f10e 0108 	add.w	r1, lr, #8
 8005c24:	eba2 0c01 	sub.w	ip, r2, r1
 8005c28:	f02c 0207 	bic.w	r2, ip, #7
 8005c2c:	f10e 0710 	add.w	r7, lr, #16
 8005c30:	4417      	add	r7, r2
 8005c32:	f10a 35ff 	add.w	r5, sl, #4294967295
 8005c36:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005c3a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005c3e:	ed11 6a02 	vldr	s12, [r1, #-8]
 8005c42:	f002 000f 	and.w	r0, r2, #15
 8005c46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c4a:	ed90 7a00 	vldr	s14, [r0]
 8005c4e:	0912      	lsrs	r2, r2, #4
 8005c50:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c58:	ed92 7a00 	vldr	s14, [r2]
 8005c5c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005c60:	3108      	adds	r1, #8
 8005c62:	428f      	cmp	r7, r1
 8005c64:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c68:	d1e5      	bne.n	8005c36 <forward_dense+0x6be>
 8005c6a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005c6e:	f10c 0c01 	add.w	ip, ip, #1
 8005c72:	44e2      	add	sl, ip
 8005c74:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 8005c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c7a:	b312      	cbz	r2, 8005cc2 <forward_dense+0x74a>
 8005c7c:	f89a 2000 	ldrb.w	r2, [sl]
 8005c80:	edde 7a00 	vldr	s15, [lr]
 8005c84:	0912      	lsrs	r2, r2, #4
 8005c86:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005c8a:	ed92 7a00 	vldr	s14, [r2]
 8005c8e:	9a05      	ldr	r2, [sp, #20]
 8005c90:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005c94:	4414      	add	r4, r2
 8005c96:	ee76 2aa2 	vadd.f32	s5, s13, s5
 8005c9a:	ece9 2a01 	vstmia	r9!, {s5}
 8005c9e:	45c8      	cmp	r8, r9
 8005ca0:	f67f ade9 	bls.w	8005876 <forward_dense+0x2fe>
 8005ca4:	2e00      	cmp	r6, #0
 8005ca6:	f47f af47 	bne.w	8005b38 <forward_dense+0x5c0>
 8005caa:	9a01      	ldr	r2, [sp, #4]
 8005cac:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005d2c <forward_dense+0x7b4>
 8005cb0:	eef0 2a6f 	vmov.f32	s5, s31
 8005cb4:	2a00      	cmp	r2, #0
 8005cb6:	f47f af48 	bne.w	8005b4a <forward_dense+0x5d2>
 8005cba:	f8dd e018 	ldr.w	lr, [sp, #24]
 8005cbe:	46a2      	mov	sl, r4
 8005cc0:	e7aa      	b.n	8005c18 <forward_dense+0x6a0>
 8005cc2:	ee72 6aa6 	vadd.f32	s13, s5, s13
 8005cc6:	9a05      	ldr	r2, [sp, #20]
 8005cc8:	ece9 6a01 	vstmia	r9!, {s13}
 8005ccc:	45c1      	cmp	r9, r8
 8005cce:	4414      	add	r4, r2
 8005cd0:	f4ff af2f 	bcc.w	8005b32 <forward_dense+0x5ba>
 8005cd4:	e5cf      	b.n	8005876 <forward_dense+0x2fe>
 8005cd6:	f1ba 0f0f 	cmp.w	sl, #15
 8005cda:	eeb0 fa6f 	vmov.f32	s30, s31
 8005cde:	eddf 6a13 	vldr	s13, [pc, #76]	; 8005d2c <forward_dense+0x7b4>
 8005ce2:	f63f ae24 	bhi.w	800592e <forward_dense+0x3b6>
 8005ce6:	4652      	mov	r2, sl
 8005ce8:	4620      	mov	r0, r4
 8005cea:	9906      	ldr	r1, [sp, #24]
 8005cec:	e690      	b.n	8005a10 <forward_dense+0x498>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	deff      	udf	#255	; 0xff
 8005cf4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	4691      	mov	r9, r2
 8005cfc:	f47f ac94 	bne.w	8005628 <forward_dense+0xb0>
 8005d00:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8005d04:	f1b9 0f00 	cmp.w	r9, #0
 8005d08:	f43f ac93 	beq.w	8005632 <forward_dense+0xba>
 8005d0c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005d10:	f000 fc68 	bl	80065e4 <ai_array_get_byte_size>
 8005d14:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005d18:	4602      	mov	r2, r0
 8005d1a:	4651      	mov	r1, sl
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fcc7 	bl	80066b0 <memcpy>
 8005d22:	4682      	mov	sl, r0
 8005d24:	e485      	b.n	8005632 <forward_dense+0xba>
 8005d26:	2300      	movs	r3, #0
 8005d28:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d2a:	e456      	b.n	80055da <forward_dense+0x62>
 8005d2c:	00000000 	.word	0x00000000

08005d30 <pool_func_mp_array_f32>:
 8005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	b093      	sub	sp, #76	; 0x4c
 8005d36:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8005d3a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8005d3c:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8005d40:	68a8      	ldr	r0, [r5, #8]
 8005d42:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 8005d46:	9508      	str	r5, [sp, #32]
 8005d48:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 8005d4c:	9002      	str	r0, [sp, #8]
 8005d4e:	950d      	str	r5, [sp, #52]	; 0x34
 8005d50:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 8005d54:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8005d58:	9004      	str	r0, [sp, #16]
 8005d5a:	9506      	str	r5, [sp, #24]
 8005d5c:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8005d60:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8005d64:	9009      	str	r0, [sp, #36]	; 0x24
 8005d66:	950b      	str	r5, [sp, #44]	; 0x2c
 8005d68:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8005d6c:	9200      	str	r2, [sp, #0]
 8005d6e:	468a      	mov	sl, r1
 8005d70:	4699      	mov	r9, r3
 8005d72:	b95c      	cbnz	r4, 8005d8c <pool_func_mp_array_f32+0x5c>
 8005d74:	b950      	cbnz	r0, 8005d8c <pool_func_mp_array_f32+0x5c>
 8005d76:	9b04      	ldr	r3, [sp, #16]
 8005d78:	1a5a      	subs	r2, r3, r1
 8005d7a:	9b06      	ldr	r3, [sp, #24]
 8005d7c:	9908      	ldr	r1, [sp, #32]
 8005d7e:	3a01      	subs	r2, #1
 8005d80:	3b01      	subs	r3, #1
 8005d82:	fb13 2301 	smlabb	r3, r3, r1, r2
 8005d86:	041a      	lsls	r2, r3, #16
 8005d88:	f100 809b 	bmi.w	8005ec2 <pool_func_mp_array_f32+0x192>
 8005d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 808b 	beq.w	8005eaa <pool_func_mp_array_f32+0x17a>
 8005d94:	9b06      	ldr	r3, [sp, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 8087 	beq.w	8005eaa <pool_func_mp_array_f32+0x17a>
 8005d9c:	f1b9 0f00 	cmp.w	r9, #0
 8005da0:	f000 8083 	beq.w	8005eaa <pool_func_mp_array_f32+0x17a>
 8005da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da6:	1b1c      	subs	r4, r3, r4
 8005da8:	9b04      	ldr	r3, [sp, #16]
 8005daa:	1a1b      	subs	r3, r3, r0
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	4240      	negs	r0, r0
 8005db0:	2200      	movs	r2, #0
 8005db2:	b2a1      	uxth	r1, r4
 8005db4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005db6:	b283      	uxth	r3, r0
 8005db8:	920e      	str	r2, [sp, #56]	; 0x38
 8005dba:	910c      	str	r1, [sp, #48]	; 0x30
 8005dbc:	9310      	str	r3, [sp, #64]	; 0x40
 8005dbe:	9c06      	ldr	r4, [sp, #24]
 8005dc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc4:	fb02 f204 	mul.w	r2, r2, r4
 8005dc8:	1acb      	subs	r3, r1, r3
 8005dca:	920a      	str	r2, [sp, #40]	; 0x28
 8005dcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dce:	9205      	str	r2, [sp, #20]
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	b21b      	sxth	r3, r3
 8005dd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005dd6:	9303      	str	r3, [sp, #12]
 8005dd8:	9007      	str	r0, [sp, #28]
 8005dda:	4603      	mov	r3, r0
 8005ddc:	fa0f f881 	sxth.w	r8, r1
 8005de0:	9204      	str	r2, [sp, #16]
 8005de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005de4:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8005de8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8005dec:	4413      	add	r3, r2
 8005dee:	f04f 0e00 	mov.w	lr, #0
 8005df2:	fb09 f303 	mul.w	r3, r9, r3
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8005dfc:	4675      	mov	r5, lr
 8005dfe:	9903      	ldr	r1, [sp, #12]
 8005e00:	eddf 7a78 	vldr	s15, [pc, #480]	; 8005fe4 <pool_func_mp_array_f32+0x2b4>
 8005e04:	4588      	cmp	r8, r1
 8005e06:	dd24      	ble.n	8005e52 <pool_func_mp_array_f32+0x122>
 8005e08:	4564      	cmp	r4, ip
 8005e0a:	dd1e      	ble.n	8005e4a <pool_func_mp_array_f32+0x11a>
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	fb0a f601 	mul.w	r6, sl, r1
 8005e12:	db1a      	blt.n	8005e4a <pool_func_mp_array_f32+0x11a>
 8005e14:	9b00      	ldr	r3, [sp, #0]
 8005e16:	4299      	cmp	r1, r3
 8005e18:	da17      	bge.n	8005e4a <pool_func_mp_array_f32+0x11a>
 8005e1a:	f1bc 0f00 	cmp.w	ip, #0
 8005e1e:	4663      	mov	r3, ip
 8005e20:	db46      	blt.n	8005eb0 <pool_func_mp_array_f32+0x180>
 8005e22:	18f2      	adds	r2, r6, r3
 8005e24:	fb09 5202 	mla	r2, r9, r2, r5
 8005e28:	1c58      	adds	r0, r3, #1
 8005e2a:	459a      	cmp	sl, r3
 8005e2c:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8005e30:	b203      	sxth	r3, r0
 8005e32:	dd08      	ble.n	8005e46 <pool_func_mp_array_f32+0x116>
 8005e34:	ed92 7a00 	vldr	s14, [r2]
 8005e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e40:	bfb8      	it	lt
 8005e42:	eef0 7a47 	vmovlt.f32	s15, s14
 8005e46:	429c      	cmp	r4, r3
 8005e48:	dceb      	bgt.n	8005e22 <pool_func_mp_array_f32+0xf2>
 8005e4a:	3101      	adds	r1, #1
 8005e4c:	b209      	sxth	r1, r1
 8005e4e:	4588      	cmp	r8, r1
 8005e50:	dcda      	bgt.n	8005e08 <pool_func_mp_array_f32+0xd8>
 8005e52:	9b01      	ldr	r3, [sp, #4]
 8005e54:	f10e 0e01 	add.w	lr, lr, #1
 8005e58:	441d      	add	r5, r3
 8005e5a:	9b02      	ldr	r3, [sp, #8]
 8005e5c:	fa0f fe8e 	sxth.w	lr, lr
 8005e60:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005e64:	45ce      	cmp	lr, r9
 8005e66:	edc5 7a00 	vstr	s15, [r5]
 8005e6a:	4675      	mov	r5, lr
 8005e6c:	dbc7      	blt.n	8005dfe <pool_func_mp_array_f32+0xce>
 8005e6e:	9b07      	ldr	r3, [sp, #28]
 8005e70:	9808      	ldr	r0, [sp, #32]
 8005e72:	3301      	adds	r3, #1
 8005e74:	b219      	sxth	r1, r3
 8005e76:	9b05      	ldr	r3, [sp, #20]
 8005e78:	9107      	str	r1, [sp, #28]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	4402      	add	r2, r0
 8005e7e:	9b04      	ldr	r3, [sp, #16]
 8005e80:	b292      	uxth	r2, r2
 8005e82:	9205      	str	r2, [sp, #20]
 8005e84:	9a06      	ldr	r2, [sp, #24]
 8005e86:	4403      	add	r3, r0
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	428a      	cmp	r2, r1
 8005e8c:	9304      	str	r3, [sp, #16]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	dca7      	bgt.n	8005de2 <pool_func_mp_array_f32+0xb2>
 8005e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e94:	3301      	adds	r3, #1
 8005e96:	b21a      	sxth	r2, r3
 8005e98:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8005e9c:	440b      	add	r3, r1
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ea4:	920e      	str	r2, [sp, #56]	; 0x38
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	dc89      	bgt.n	8005dbe <pool_func_mp_array_f32+0x8e>
 8005eaa:	b013      	add	sp, #76	; 0x4c
 8005eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	b21b      	sxth	r3, r3
 8005eb4:	42bb      	cmp	r3, r7
 8005eb6:	dac6      	bge.n	8005e46 <pool_func_mp_array_f32+0x116>
 8005eb8:	3301      	adds	r3, #1
 8005eba:	b21b      	sxth	r3, r3
 8005ebc:	42bb      	cmp	r3, r7
 8005ebe:	dbf7      	blt.n	8005eb0 <pool_func_mp_array_f32+0x180>
 8005ec0:	e7c1      	b.n	8005e46 <pool_func_mp_array_f32+0x116>
 8005ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec4:	9a00      	ldr	r2, [sp, #0]
 8005ec6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ec8:	1a9a      	subs	r2, r3, r2
 8005eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ecc:	3a01      	subs	r2, #1
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	fb13 2301 	smlabb	r3, r3, r1, r2
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	f57f af59 	bpl.w	8005d8c <pool_func_mp_array_f32+0x5c>
 8005eda:	fb0a f309 	mul.w	r3, sl, r9
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8005ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee8:	9001      	str	r0, [sp, #4]
 8005eea:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8005ef4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	ddd7      	ble.n	8005eaa <pool_func_mp_array_f32+0x17a>
 8005efa:	9a00      	ldr	r2, [sp, #0]
 8005efc:	9906      	ldr	r1, [sp, #24]
 8005efe:	fa0f f882 	sxth.w	r8, r2
 8005f02:	2900      	cmp	r1, #0
 8005f04:	d062      	beq.n	8005fcc <pool_func_mp_array_f32+0x29c>
 8005f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	1a12      	subs	r2, r2, r0
 8005f0e:	9305      	str	r3, [sp, #20]
 8005f10:	b213      	sxth	r3, r2
 8005f12:	9307      	str	r3, [sp, #28]
 8005f14:	f1b9 0f00 	cmp.w	r9, #0
 8005f18:	d058      	beq.n	8005fcc <pool_func_mp_array_f32+0x29c>
 8005f1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f1c:	fb02 f303 	mul.w	r3, r2, r3
 8005f20:	2600      	movs	r6, #0
 8005f22:	930c      	str	r3, [sp, #48]	; 0x30
 8005f24:	9b04      	ldr	r3, [sp, #16]
 8005f26:	9303      	str	r3, [sp, #12]
 8005f28:	4637      	mov	r7, r6
 8005f2a:	46b2      	mov	sl, r6
 8005f2c:	9b05      	ldr	r3, [sp, #20]
 8005f2e:	9611      	str	r6, [sp, #68]	; 0x44
 8005f30:	eb0a 0b03 	add.w	fp, sl, r3
 8005f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f36:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8005f3a:	b235      	sxth	r5, r6
 8005f3c:	18eb      	adds	r3, r5, r3
 8005f3e:	f04f 0a00 	mov.w	sl, #0
 8005f42:	fb09 f303 	mul.w	r3, r9, r3
 8005f46:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005f48:	930a      	str	r3, [sp, #40]	; 0x28
 8005f4a:	fb09 fb0b 	mul.w	fp, r9, fp
 8005f4e:	46d6      	mov	lr, sl
 8005f50:	9807      	ldr	r0, [sp, #28]
 8005f52:	4580      	cmp	r8, r0
 8005f54:	dd43      	ble.n	8005fde <pool_func_mp_array_f32+0x2ae>
 8005f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f58:	eddf 7a22 	vldr	s15, [pc, #136]	; 8005fe4 <pool_func_mp_array_f32+0x2b4>
 8005f5c:	eb0e 0403 	add.w	r4, lr, r3
 8005f60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005f66:	42a9      	cmp	r1, r5
 8005f68:	dd0f      	ble.n	8005f8a <pool_func_mp_array_f32+0x25a>
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	ed92 7a00 	vldr	s14, [r2]
 8005f72:	3301      	adds	r3, #1
 8005f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	bfb8      	it	lt
 8005f80:	eef0 7a47 	vmovlt.f32	s15, s14
 8005f84:	4299      	cmp	r1, r3
 8005f86:	4462      	add	r2, ip
 8005f88:	d1f1      	bne.n	8005f6e <pool_func_mp_array_f32+0x23e>
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	b200      	sxth	r0, r0
 8005f8e:	4580      	cmp	r8, r0
 8005f90:	4434      	add	r4, r6
 8005f92:	d1e8      	bne.n	8005f66 <pool_func_mp_array_f32+0x236>
 8005f94:	f10a 0a01 	add.w	sl, sl, #1
 8005f98:	9a02      	ldr	r2, [sp, #8]
 8005f9a:	eb0b 030e 	add.w	r3, fp, lr
 8005f9e:	fa0f fa8a 	sxth.w	sl, sl
 8005fa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005fa6:	45ca      	cmp	sl, r9
 8005fa8:	edc3 7a00 	vstr	s15, [r3]
 8005fac:	46d6      	mov	lr, sl
 8005fae:	dbcf      	blt.n	8005f50 <pool_func_mp_array_f32+0x220>
 8005fb0:	9b03      	ldr	r3, [sp, #12]
 8005fb2:	9a08      	ldr	r2, [sp, #32]
 8005fb4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8005fb6:	4413      	add	r3, r2
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3701      	adds	r7, #1
 8005fbc:	9303      	str	r3, [sp, #12]
 8005fbe:	9b06      	ldr	r3, [sp, #24]
 8005fc0:	b23f      	sxth	r7, r7
 8005fc2:	4416      	add	r6, r2
 8005fc4:	42bb      	cmp	r3, r7
 8005fc6:	b2b6      	uxth	r6, r6
 8005fc8:	46ba      	mov	sl, r7
 8005fca:	dcaf      	bgt.n	8005f2c <pool_func_mp_array_f32+0x1fc>
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fd0:	4413      	add	r3, r2
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	9b01      	ldr	r3, [sp, #4]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	9301      	str	r3, [sp, #4]
 8005fdc:	e788      	b.n	8005ef0 <pool_func_mp_array_f32+0x1c0>
 8005fde:	eddf 7a01 	vldr	s15, [pc, #4]	; 8005fe4 <pool_func_mp_array_f32+0x2b4>
 8005fe2:	e7d7      	b.n	8005f94 <pool_func_mp_array_f32+0x264>
 8005fe4:	cf000000 	.word	0xcf000000

08005fe8 <nl_func_relu_array_f32>:
 8005fe8:	b410      	push	{r4}
 8005fea:	698c      	ldr	r4, [r1, #24]
 8005fec:	6981      	ldr	r1, [r0, #24]
 8005fee:	68a3      	ldr	r3, [r4, #8]
 8005ff0:	6889      	ldr	r1, [r1, #8]
 8005ff2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005ff6:	3a01      	subs	r2, #1
 8005ff8:	0092      	lsls	r2, r2, #2
 8005ffa:	189b      	adds	r3, r3, r2
 8005ffc:	d216      	bcs.n	800602c <nl_func_relu_array_f32+0x44>
 8005ffe:	3204      	adds	r2, #4
 8006000:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006034 <nl_func_relu_array_f32+0x4c>
 8006004:	4411      	add	r1, r2
 8006006:	3304      	adds	r3, #4
 8006008:	ed53 7a01 	vldr	s15, [r3, #-4]
 800600c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006014:	bfb8      	it	lt
 8006016:	eef0 7a47 	vmovlt.f32	s15, s14
 800601a:	ed61 7a01 	vstmdb	r1!, {s15}
 800601e:	68a0      	ldr	r0, [r4, #8]
 8006020:	f1a3 0208 	sub.w	r2, r3, #8
 8006024:	4290      	cmp	r0, r2
 8006026:	f1a3 0304 	sub.w	r3, r3, #4
 800602a:	d9ed      	bls.n	8006008 <nl_func_relu_array_f32+0x20>
 800602c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	00000000 	.word	0x00000000

08006038 <nl_func_sm_array_f32>:
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	ed2d 8b04 	vpush	{d8-d9}
 8006040:	b089      	sub	sp, #36	; 0x24
 8006042:	698f      	ldr	r7, [r1, #24]
 8006044:	6984      	ldr	r4, [r0, #24]
 8006046:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800604a:	68bd      	ldr	r5, [r7, #8]
 800604c:	9402      	str	r4, [sp, #8]
 800604e:	4626      	mov	r6, r4
 8006050:	4696      	mov	lr, r2
 8006052:	eba2 020c 	sub.w	r2, r2, ip
 8006056:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800605a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	68b6      	ldr	r6, [r6, #8]
 8006060:	ebae 0e04 	sub.w	lr, lr, r4
 8006064:	4295      	cmp	r5, r2
 8006066:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800606a:	d354      	bcc.n	8006116 <nl_func_sm_array_f32+0xde>
 800606c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006070:	f1cc 0200 	rsb	r2, ip, #0
 8006074:	00a4      	lsls	r4, r4, #2
 8006076:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800607a:	9303      	str	r3, [sp, #12]
 800607c:	9204      	str	r2, [sp, #16]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4262      	negs	r2, r4
 8006082:	9205      	str	r2, [sp, #20]
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800608a:	9b02      	ldr	r3, [sp, #8]
 800608c:	9a07      	ldr	r2, [sp, #28]
 800608e:	60bd      	str	r5, [r7, #8]
 8006090:	609e      	str	r6, [r3, #8]
 8006092:	9b06      	ldr	r3, [sp, #24]
 8006094:	6992      	ldr	r2, [r2, #24]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	6894      	ldr	r4, [r2, #8]
 800609a:	9a03      	ldr	r2, [sp, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2a01      	cmp	r2, #1
 80060a0:	ed93 8a00 	vldr	s16, [r3]
 80060a4:	d940      	bls.n	8006128 <nl_func_sm_array_f32+0xf0>
 80060a6:	9901      	ldr	r1, [sp, #4]
 80060a8:	1d1a      	adds	r2, r3, #4
 80060aa:	eb03 0b01 	add.w	fp, r3, r1
 80060ae:	ecf2 7a01 	vldmia	r2!, {s15}
 80060b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80060b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ba:	bfb8      	it	lt
 80060bc:	eeb0 8a67 	vmovlt.f32	s16, s15
 80060c0:	4593      	cmp	fp, r2
 80060c2:	d1f4      	bne.n	80060ae <nl_func_sm_array_f32+0x76>
 80060c4:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8006134 <nl_func_sm_array_f32+0xfc>
 80060c8:	469a      	mov	sl, r3
 80060ca:	46a1      	mov	r9, r4
 80060cc:	46a0      	mov	r8, r4
 80060ce:	ecba 0a01 	vldmia	sl!, {s0}
 80060d2:	ee30 0a48 	vsub.f32	s0, s0, s16
 80060d6:	f003 f9e5 	bl	80094a4 <expf>
 80060da:	45d3      	cmp	fp, sl
 80060dc:	eca8 0a01 	vstmia	r8!, {s0}
 80060e0:	ee78 8a80 	vadd.f32	s17, s17, s0
 80060e4:	d1f3      	bne.n	80060ce <nl_func_sm_array_f32+0x96>
 80060e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80060ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ee:	d00b      	beq.n	8006108 <nl_func_sm_array_f32+0xd0>
 80060f0:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80060f4:	9b01      	ldr	r3, [sp, #4]
 80060f6:	441c      	add	r4, r3
 80060f8:	edd9 7a00 	vldr	s15, [r9]
 80060fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006100:	ece9 7a01 	vstmia	r9!, {s15}
 8006104:	454c      	cmp	r4, r9
 8006106:	d1f7      	bne.n	80060f8 <nl_func_sm_array_f32+0xc0>
 8006108:	9b04      	ldr	r3, [sp, #16]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	441d      	add	r5, r3
 800610e:	9b05      	ldr	r3, [sp, #20]
 8006110:	42aa      	cmp	r2, r5
 8006112:	441e      	add	r6, r3
 8006114:	d9b9      	bls.n	800608a <nl_func_sm_array_f32+0x52>
 8006116:	60ba      	str	r2, [r7, #8]
 8006118:	9a02      	ldr	r2, [sp, #8]
 800611a:	68d3      	ldr	r3, [r2, #12]
 800611c:	6093      	str	r3, [r2, #8]
 800611e:	b009      	add	sp, #36	; 0x24
 8006120:	ecbd 8b04 	vpop	{d8-d9}
 8006124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006128:	2a00      	cmp	r2, #0
 800612a:	d0ed      	beq.n	8006108 <nl_func_sm_array_f32+0xd0>
 800612c:	9a01      	ldr	r2, [sp, #4]
 800612e:	eb03 0b02 	add.w	fp, r3, r2
 8006132:	e7c7      	b.n	80060c4 <nl_func_sm_array_f32+0x8c>
 8006134:	00000000 	.word	0x00000000

08006138 <nl_func_relu_generic_array_f32>:
 8006138:	b430      	push	{r4, r5}
 800613a:	6989      	ldr	r1, [r1, #24]
 800613c:	6980      	ldr	r0, [r0, #24]
 800613e:	edd3 6a02 	vldr	s13, [r3, #8]
 8006142:	688c      	ldr	r4, [r1, #8]
 8006144:	6880      	ldr	r0, [r0, #8]
 8006146:	ed93 7a00 	vldr	s14, [r3]
 800614a:	ed93 6a01 	vldr	s12, [r3, #4]
 800614e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006152:	3a01      	subs	r2, #1
 8006154:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006158:	0092      	lsls	r2, r2, #2
 800615a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615e:	4410      	add	r0, r2
 8006160:	4422      	add	r2, r4
 8006162:	d421      	bmi.n	80061a8 <nl_func_relu_generic_array_f32+0x70>
 8006164:	4294      	cmp	r4, r2
 8006166:	d83d      	bhi.n	80061e4 <nl_func_relu_generic_array_f32+0xac>
 8006168:	1d13      	adds	r3, r2, #4
 800616a:	1d02      	adds	r2, r0, #4
 800616c:	e010      	b.n	8006190 <nl_func_relu_generic_array_f32+0x58>
 800616e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006176:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800617a:	d501      	bpl.n	8006180 <nl_func_relu_generic_array_f32+0x48>
 800617c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8006180:	ed62 7a01 	vstmdb	r2!, {s15}
 8006184:	6888      	ldr	r0, [r1, #8]
 8006186:	f1a3 0408 	sub.w	r4, r3, #8
 800618a:	4284      	cmp	r4, r0
 800618c:	462b      	mov	r3, r5
 800618e:	d329      	bcc.n	80061e4 <nl_func_relu_generic_array_f32+0xac>
 8006190:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006194:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619c:	f1a3 0504 	sub.w	r5, r3, #4
 80061a0:	d4e5      	bmi.n	800616e <nl_func_relu_generic_array_f32+0x36>
 80061a2:	eef0 7a66 	vmov.f32	s15, s13
 80061a6:	e7eb      	b.n	8006180 <nl_func_relu_generic_array_f32+0x48>
 80061a8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80061ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b0:	d01a      	beq.n	80061e8 <nl_func_relu_generic_array_f32+0xb0>
 80061b2:	4294      	cmp	r4, r2
 80061b4:	d816      	bhi.n	80061e4 <nl_func_relu_generic_array_f32+0xac>
 80061b6:	1d13      	adds	r3, r2, #4
 80061b8:	1d02      	adds	r2, r0, #4
 80061ba:	ed53 7a01 	vldr	s15, [r3, #-4]
 80061be:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80061c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061c6:	f1a3 0408 	sub.w	r4, r3, #8
 80061ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ce:	f1a3 0004 	sub.w	r0, r3, #4
 80061d2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80061d6:	4623      	mov	r3, r4
 80061d8:	d51e      	bpl.n	8006218 <nl_func_relu_generic_array_f32+0xe0>
 80061da:	ed62 6a01 	vstmdb	r2!, {s13}
 80061de:	688b      	ldr	r3, [r1, #8]
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	d91e      	bls.n	8006222 <nl_func_relu_generic_array_f32+0xea>
 80061e4:	bc30      	pop	{r4, r5}
 80061e6:	4770      	bx	lr
 80061e8:	4294      	cmp	r4, r2
 80061ea:	d8fb      	bhi.n	80061e4 <nl_func_relu_generic_array_f32+0xac>
 80061ec:	1d13      	adds	r3, r2, #4
 80061ee:	2500      	movs	r5, #0
 80061f0:	1d02      	adds	r2, r0, #4
 80061f2:	ed53 7a01 	vldr	s15, [r3, #-4]
 80061f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061fa:	f1a3 0408 	sub.w	r4, r3, #8
 80061fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006202:	f1a3 0004 	sub.w	r0, r3, #4
 8006206:	4623      	mov	r3, r4
 8006208:	db0d      	blt.n	8006226 <nl_func_relu_generic_array_f32+0xee>
 800620a:	ed62 7a01 	vstmdb	r2!, {s15}
 800620e:	688b      	ldr	r3, [r1, #8]
 8006210:	42a3      	cmp	r3, r4
 8006212:	d8e7      	bhi.n	80061e4 <nl_func_relu_generic_array_f32+0xac>
 8006214:	4603      	mov	r3, r0
 8006216:	e7ec      	b.n	80061f2 <nl_func_relu_generic_array_f32+0xba>
 8006218:	ed62 7a01 	vstmdb	r2!, {s15}
 800621c:	688c      	ldr	r4, [r1, #8]
 800621e:	429c      	cmp	r4, r3
 8006220:	d8e0      	bhi.n	80061e4 <nl_func_relu_generic_array_f32+0xac>
 8006222:	4603      	mov	r3, r0
 8006224:	e7c9      	b.n	80061ba <nl_func_relu_generic_array_f32+0x82>
 8006226:	f842 5d04 	str.w	r5, [r2, #-4]!
 800622a:	688c      	ldr	r4, [r1, #8]
 800622c:	429c      	cmp	r4, r3
 800622e:	d8d9      	bhi.n	80061e4 <nl_func_relu_generic_array_f32+0xac>
 8006230:	4603      	mov	r3, r0
 8006232:	e7de      	b.n	80061f2 <nl_func_relu_generic_array_f32+0xba>

08006234 <forward_relu>:
 8006234:	6982      	ldr	r2, [r0, #24]
 8006236:	8813      	ldrh	r3, [r2, #0]
 8006238:	b333      	cbz	r3, 8006288 <forward_relu+0x54>
 800623a:	6852      	ldr	r2, [r2, #4]
 800623c:	6851      	ldr	r1, [r2, #4]
 800623e:	b101      	cbz	r1, 8006242 <forward_relu+0xe>
 8006240:	6809      	ldr	r1, [r1, #0]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d91d      	bls.n	8006282 <forward_relu+0x4e>
 8006246:	b4f0      	push	{r4, r5, r6, r7}
 8006248:	6917      	ldr	r7, [r2, #16]
 800624a:	b107      	cbz	r7, 800624e <forward_relu+0x1a>
 800624c:	683f      	ldr	r7, [r7, #0]
 800624e:	688c      	ldr	r4, [r1, #8]
 8006250:	69c3      	ldr	r3, [r0, #28]
 8006252:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8006256:	2b00      	cmp	r3, #0
 8006258:	d044      	beq.n	80062e4 <forward_relu+0xb0>
 800625a:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800625e:	2d01      	cmp	r5, #1
 8006260:	d014      	beq.n	800628c <forward_relu+0x58>
 8006262:	2c00      	cmp	r4, #0
 8006264:	d074      	beq.n	8006350 <forward_relu+0x11c>
 8006266:	68ce      	ldr	r6, [r1, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800626e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006272:	42a6      	cmp	r6, r4
 8006274:	fb05 f202 	mul.w	r2, r5, r2
 8006278:	d1f9      	bne.n	800626e <forward_relu+0x3a>
 800627a:	4638      	mov	r0, r7
 800627c:	bcf0      	pop	{r4, r5, r6, r7}
 800627e:	f7ff bf5b 	b.w	8006138 <nl_func_relu_generic_array_f32>
 8006282:	2300      	movs	r3, #0
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	deff      	udf	#255	; 0xff
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	deff      	udf	#255	; 0xff
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	6988      	ldr	r0, [r1, #24]
 8006290:	6896      	ldr	r6, [r2, #8]
 8006292:	ed93 7a00 	vldr	s14, [r3]
 8006296:	6882      	ldr	r2, [r0, #8]
 8006298:	b184      	cbz	r4, 80062bc <forward_relu+0x88>
 800629a:	68cf      	ldr	r7, [r1, #12]
 800629c:	462b      	mov	r3, r5
 800629e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80062a2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80062a6:	42a7      	cmp	r7, r4
 80062a8:	fb01 f303 	mul.w	r3, r1, r3
 80062ac:	d1f9      	bne.n	80062a2 <forward_relu+0x6e>
 80062ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062b2:	3b01      	subs	r3, #1
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	18d2      	adds	r2, r2, r3
 80062b8:	441e      	add	r6, r3
 80062ba:	d23f      	bcs.n	800633c <forward_relu+0x108>
 80062bc:	1d13      	adds	r3, r2, #4
 80062be:	2500      	movs	r5, #0
 80062c0:	1d32      	adds	r2, r6, #4
 80062c2:	ed53 7a01 	vldr	s15, [r3, #-4]
 80062c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ce:	f1a3 0104 	sub.w	r1, r3, #4
 80062d2:	d835      	bhi.n	8006340 <forward_relu+0x10c>
 80062d4:	ed62 7a01 	vstmdb	r2!, {s15}
 80062d8:	6884      	ldr	r4, [r0, #8]
 80062da:	3b08      	subs	r3, #8
 80062dc:	429c      	cmp	r4, r3
 80062de:	d82d      	bhi.n	800633c <forward_relu+0x108>
 80062e0:	460b      	mov	r3, r1
 80062e2:	e7ee      	b.n	80062c2 <forward_relu+0x8e>
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	698d      	ldr	r5, [r1, #24]
 80062e8:	6898      	ldr	r0, [r3, #8]
 80062ea:	68ab      	ldr	r3, [r5, #8]
 80062ec:	b184      	cbz	r4, 8006310 <forward_relu+0xdc>
 80062ee:	68ce      	ldr	r6, [r1, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80062f6:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80062fa:	42a6      	cmp	r6, r4
 80062fc:	fb01 f202 	mul.w	r2, r1, r2
 8006300:	d1f9      	bne.n	80062f6 <forward_relu+0xc2>
 8006302:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006306:	3a01      	subs	r2, #1
 8006308:	0092      	lsls	r2, r2, #2
 800630a:	189b      	adds	r3, r3, r2
 800630c:	4410      	add	r0, r2
 800630e:	d215      	bcs.n	800633c <forward_relu+0x108>
 8006310:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006354 <forward_relu+0x120>
 8006314:	3304      	adds	r3, #4
 8006316:	1d01      	adds	r1, r0, #4
 8006318:	ed53 7a01 	vldr	s15, [r3, #-4]
 800631c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006324:	bfb8      	it	lt
 8006326:	eef0 7a47 	vmovlt.f32	s15, s14
 800632a:	ed61 7a01 	vstmdb	r1!, {s15}
 800632e:	68a8      	ldr	r0, [r5, #8]
 8006330:	f1a3 0208 	sub.w	r2, r3, #8
 8006334:	4290      	cmp	r0, r2
 8006336:	f1a3 0304 	sub.w	r3, r3, #4
 800633a:	d9ed      	bls.n	8006318 <forward_relu+0xe4>
 800633c:	bcf0      	pop	{r4, r5, r6, r7}
 800633e:	4770      	bx	lr
 8006340:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006344:	6884      	ldr	r4, [r0, #8]
 8006346:	3b08      	subs	r3, #8
 8006348:	429c      	cmp	r4, r3
 800634a:	d8f7      	bhi.n	800633c <forward_relu+0x108>
 800634c:	460b      	mov	r3, r1
 800634e:	e7b8      	b.n	80062c2 <forward_relu+0x8e>
 8006350:	2201      	movs	r2, #1
 8006352:	e792      	b.n	800627a <forward_relu+0x46>
 8006354:	00000000 	.word	0x00000000

08006358 <forward_sm>:
 8006358:	6982      	ldr	r2, [r0, #24]
 800635a:	8813      	ldrh	r3, [r2, #0]
 800635c:	b32b      	cbz	r3, 80063aa <forward_sm+0x52>
 800635e:	6852      	ldr	r2, [r2, #4]
 8006360:	6851      	ldr	r1, [r2, #4]
 8006362:	b101      	cbz	r1, 8006366 <forward_sm+0xe>
 8006364:	6809      	ldr	r1, [r1, #0]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d91c      	bls.n	80063a4 <forward_sm+0x4c>
 800636a:	6913      	ldr	r3, [r2, #16]
 800636c:	b1c3      	cbz	r3, 80063a0 <forward_sm+0x48>
 800636e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	688c      	ldr	r4, [r1, #8]
 8006374:	68c3      	ldr	r3, [r0, #12]
 8006376:	68ce      	ldr	r6, [r1, #12]
 8006378:	685f      	ldr	r7, [r3, #4]
 800637a:	6873      	ldr	r3, [r6, #4]
 800637c:	0a24      	lsrs	r4, r4, #8
 800637e:	b083      	sub	sp, #12
 8006380:	d015      	beq.n	80063ae <forward_sm+0x56>
 8006382:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006386:	2201      	movs	r2, #1
 8006388:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800638c:	42a6      	cmp	r6, r4
 800638e:	fb05 f202 	mul.w	r2, r5, r2
 8006392:	d1f9      	bne.n	8006388 <forward_sm+0x30>
 8006394:	e9cd 3700 	strd	r3, r7, [sp]
 8006398:	f7ff fe4e 	bl	8006038 <nl_func_sm_array_f32>
 800639c:	b003      	add	sp, #12
 800639e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	deff      	udf	#255	; 0xff
 80063a4:	2300      	movs	r3, #0
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	deff      	udf	#255	; 0xff
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	deff      	udf	#255	; 0xff
 80063ae:	2201      	movs	r2, #1
 80063b0:	e9cd 3700 	strd	r3, r7, [sp]
 80063b4:	f7ff fe40 	bl	8006038 <nl_func_sm_array_f32>
 80063b8:	b003      	add	sp, #12
 80063ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063bc <ai_check_custom_types>:
 80063bc:	4b13      	ldr	r3, [pc, #76]	; (800640c <ai_check_custom_types+0x50>)
 80063be:	b082      	sub	sp, #8
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	b118      	cbz	r0, 80063ce <ai_check_custom_types+0x12>
 80063c6:	7803      	ldrb	r3, [r0, #0]
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d002      	beq.n	80063d2 <ai_check_custom_types+0x16>
 80063cc:	2000      	movs	r0, #0
 80063ce:	b002      	add	sp, #8
 80063d0:	4770      	bx	lr
 80063d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <ai_check_custom_types+0x28>
 80063da:	2001      	movs	r0, #1
 80063dc:	f080 0001 	eor.w	r0, r0, #1
 80063e0:	b002      	add	sp, #8
 80063e2:	4770      	bx	lr
 80063e4:	7842      	ldrb	r2, [r0, #1]
 80063e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	f100 0001 	add.w	r0, r0, #1
 80063f0:	d1f3      	bne.n	80063da <ai_check_custom_types+0x1e>
 80063f2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80063f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d1ed      	bne.n	80063da <ai_check_custom_types+0x1e>
 80063fe:	7842      	ldrb	r2, [r0, #1]
 8006400:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006404:	429a      	cmp	r2, r3
 8006406:	d1e8      	bne.n	80063da <ai_check_custom_types+0x1e>
 8006408:	2000      	movs	r0, #0
 800640a:	e7e7      	b.n	80063dc <ai_check_custom_types+0x20>
 800640c:	080097e8 	.word	0x080097e8

08006410 <ai_layers_init_all>:
 8006410:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006412:	b17a      	cbz	r2, 8006434 <ai_layers_init_all+0x24>
 8006414:	6913      	ldr	r3, [r2, #16]
 8006416:	60d0      	str	r0, [r2, #12]
 8006418:	429a      	cmp	r2, r3
 800641a:	f04f 0201 	mov.w	r2, #1
 800641e:	d009      	beq.n	8006434 <ai_layers_init_all+0x24>
 8006420:	b143      	cbz	r3, 8006434 <ai_layers_init_all+0x24>
 8006422:	6919      	ldr	r1, [r3, #16]
 8006424:	60d8      	str	r0, [r3, #12]
 8006426:	4299      	cmp	r1, r3
 8006428:	f102 0201 	add.w	r2, r2, #1
 800642c:	d002      	beq.n	8006434 <ai_layers_init_all+0x24>
 800642e:	460b      	mov	r3, r1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1f6      	bne.n	8006422 <ai_layers_init_all+0x12>
 8006434:	4610      	mov	r0, r2
 8006436:	4770      	bx	lr

08006438 <ai_layers_post_init_all>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800643c:	b18c      	cbz	r4, 8006462 <ai_layers_post_init_all+0x2a>
 800643e:	2500      	movs	r5, #0
 8006440:	6863      	ldr	r3, [r4, #4]
 8006442:	f013 0f01 	tst.w	r3, #1
 8006446:	4620      	mov	r0, r4
 8006448:	d003      	beq.n	8006452 <ai_layers_post_init_all+0x1a>
 800644a:	6a23      	ldr	r3, [r4, #32]
 800644c:	b10b      	cbz	r3, 8006452 <ai_layers_post_init_all+0x1a>
 800644e:	4798      	blx	r3
 8006450:	3501      	adds	r5, #1
 8006452:	6923      	ldr	r3, [r4, #16]
 8006454:	42a3      	cmp	r3, r4
 8006456:	d002      	beq.n	800645e <ai_layers_post_init_all+0x26>
 8006458:	461c      	mov	r4, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f0      	bne.n	8006440 <ai_layers_post_init_all+0x8>
 800645e:	4628      	mov	r0, r5
 8006460:	bd38      	pop	{r3, r4, r5, pc}
 8006462:	4625      	mov	r5, r4
 8006464:	e7fb      	b.n	800645e <ai_layers_post_init_all+0x26>
 8006466:	bf00      	nop

08006468 <ai_layers_forward_all>:
 8006468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800646e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006470:	4604      	mov	r4, r0
 8006472:	2f00      	cmp	r7, #0
 8006474:	d02c      	beq.n	80064d0 <ai_layers_forward_all+0x68>
 8006476:	2d00      	cmp	r5, #0
 8006478:	d03f      	beq.n	80064fa <ai_layers_forward_all+0x92>
 800647a:	6385      	str	r5, [r0, #56]	; 0x38
 800647c:	4629      	mov	r1, r5
 800647e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006480:	2001      	movs	r0, #1
 8006482:	47b8      	blx	r7
 8006484:	2600      	movs	r6, #0
 8006486:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006488:	46b0      	mov	r8, r6
 800648a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800648c:	2002      	movs	r0, #2
 800648e:	47b8      	blx	r7
 8006490:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006492:	696b      	ldr	r3, [r5, #20]
 8006494:	4628      	mov	r0, r5
 8006496:	4798      	blx	r3
 8006498:	692b      	ldr	r3, [r5, #16]
 800649a:	429d      	cmp	r5, r3
 800649c:	f04f 0003 	mov.w	r0, #3
 80064a0:	4619      	mov	r1, r3
 80064a2:	d009      	beq.n	80064b8 <ai_layers_forward_all+0x50>
 80064a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80064a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80064a8:	47b8      	blx	r7
 80064aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80064ac:	3601      	adds	r6, #1
 80064ae:	2900      	cmp	r1, #0
 80064b0:	d1eb      	bne.n	800648a <ai_layers_forward_all+0x22>
 80064b2:	4630      	mov	r0, r6
 80064b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b8:	2100      	movs	r1, #0
 80064ba:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80064be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80064c0:	47b8      	blx	r7
 80064c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80064c4:	3601      	adds	r6, #1
 80064c6:	2900      	cmp	r1, #0
 80064c8:	d1df      	bne.n	800648a <ai_layers_forward_all+0x22>
 80064ca:	4630      	mov	r0, r6
 80064cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d0:	b19d      	cbz	r5, 80064fa <ai_layers_forward_all+0x92>
 80064d2:	6385      	str	r5, [r0, #56]	; 0x38
 80064d4:	463e      	mov	r6, r7
 80064d6:	696b      	ldr	r3, [r5, #20]
 80064d8:	4628      	mov	r0, r5
 80064da:	4798      	blx	r3
 80064dc:	692b      	ldr	r3, [r5, #16]
 80064de:	42ab      	cmp	r3, r5
 80064e0:	f106 0601 	add.w	r6, r6, #1
 80064e4:	d004      	beq.n	80064f0 <ai_layers_forward_all+0x88>
 80064e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80064e8:	461d      	mov	r5, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f3      	bne.n	80064d6 <ai_layers_forward_all+0x6e>
 80064ee:	e7e0      	b.n	80064b2 <ai_layers_forward_all+0x4a>
 80064f0:	2300      	movs	r3, #0
 80064f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80064f4:	4630      	mov	r0, r6
 80064f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fa:	462e      	mov	r6, r5
 80064fc:	4630      	mov	r0, r6
 80064fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006502:	bf00      	nop

08006504 <ai_version_get>:
 8006504:	0212      	lsls	r2, r2, #8
 8006506:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800650a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800650e:	4770      	bx	lr

08006510 <get_tensor_byte_size>:
 8006510:	6983      	ldr	r3, [r0, #24]
 8006512:	68c1      	ldr	r1, [r0, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6940      	ldr	r0, [r0, #20]
 8006518:	4a06      	ldr	r2, [pc, #24]	; (8006534 <get_tensor_byte_size+0x24>)
 800651a:	68c9      	ldr	r1, [r1, #12]
 800651c:	68c0      	ldr	r0, [r0, #12]
 800651e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006522:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006526:	fb00 f001 	mul.w	r0, r0, r1
 800652a:	4293      	cmp	r3, r2
 800652c:	bf04      	itt	eq
 800652e:	3007      	addeq	r0, #7
 8006530:	08c0      	lsreq	r0, r0, #3
 8006532:	4770      	bx	lr
 8006534:	000400c0 	.word	0x000400c0

08006538 <ai_array_to_buffer_fmt>:
 8006538:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800653c:	2b02      	cmp	r3, #2
 800653e:	d036      	beq.n	80065ae <ai_array_to_buffer_fmt+0x76>
 8006540:	4a21      	ldr	r2, [pc, #132]	; (80065c8 <ai_array_to_buffer_fmt+0x90>)
 8006542:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8006546:	4293      	cmp	r3, r2
 8006548:	d00f      	beq.n	800656a <ai_array_to_buffer_fmt+0x32>
 800654a:	dd12      	ble.n	8006572 <ai_array_to_buffer_fmt+0x3a>
 800654c:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <ai_array_to_buffer_fmt+0x94>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00b      	beq.n	800656a <ai_array_to_buffer_fmt+0x32>
 8006552:	dd1e      	ble.n	8006592 <ai_array_to_buffer_fmt+0x5a>
 8006554:	4a1e      	ldr	r2, [pc, #120]	; (80065d0 <ai_array_to_buffer_fmt+0x98>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d007      	beq.n	800656a <ai_array_to_buffer_fmt+0x32>
 800655a:	dd30      	ble.n	80065be <ai_array_to_buffer_fmt+0x86>
 800655c:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <ai_array_to_buffer_fmt+0x9c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <ai_array_to_buffer_fmt+0x32>
 8006562:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8006566:	4293      	cmp	r3, r2
 8006568:	d11f      	bne.n	80065aa <ai_array_to_buffer_fmt+0x72>
 800656a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800656e:	4318      	orrs	r0, r3
 8006570:	4770      	bx	lr
 8006572:	4a19      	ldr	r2, [pc, #100]	; (80065d8 <ai_array_to_buffer_fmt+0xa0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d0f8      	beq.n	800656a <ai_array_to_buffer_fmt+0x32>
 8006578:	dd0b      	ble.n	8006592 <ai_array_to_buffer_fmt+0x5a>
 800657a:	4a18      	ldr	r2, [pc, #96]	; (80065dc <ai_array_to_buffer_fmt+0xa4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d0f4      	beq.n	800656a <ai_array_to_buffer_fmt+0x32>
 8006580:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8006584:	4293      	cmp	r3, r2
 8006586:	d0f0      	beq.n	800656a <ai_array_to_buffer_fmt+0x32>
 8006588:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800658c:	4293      	cmp	r3, r2
 800658e:	d10c      	bne.n	80065aa <ai_array_to_buffer_fmt+0x72>
 8006590:	e7eb      	b.n	800656a <ai_array_to_buffer_fmt+0x32>
 8006592:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8006596:	4293      	cmp	r3, r2
 8006598:	d0e7      	beq.n	800656a <ai_array_to_buffer_fmt+0x32>
 800659a:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800659e:	4293      	cmp	r3, r2
 80065a0:	d0e3      	beq.n	800656a <ai_array_to_buffer_fmt+0x32>
 80065a2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d0df      	beq.n	800656a <ai_array_to_buffer_fmt+0x32>
 80065aa:	2340      	movs	r3, #64	; 0x40
 80065ac:	e7dd      	b.n	800656a <ai_array_to_buffer_fmt+0x32>
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <ai_array_to_buffer_fmt+0xa8>)
 80065b0:	4003      	ands	r3, r0
 80065b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065b6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80065ba:	4318      	orrs	r0, r3
 80065bc:	4770      	bx	lr
 80065be:	3a0f      	subs	r2, #15
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d0d2      	beq.n	800656a <ai_array_to_buffer_fmt+0x32>
 80065c4:	e7f1      	b.n	80065aa <ai_array_to_buffer_fmt+0x72>
 80065c6:	bf00      	nop
 80065c8:	00060440 	.word	0x00060440
 80065cc:	00840447 	.word	0x00840447
 80065d0:	0084084f 	.word	0x0084084f
 80065d4:	00841040 	.word	0x00841040
 80065d8:	00040447 	.word	0x00040447
 80065dc:	0004084f 	.word	0x0004084f
 80065e0:	00803fff 	.word	0x00803fff

080065e4 <ai_array_get_byte_size>:
 80065e4:	b1c1      	cbz	r1, 8006618 <ai_array_get_byte_size+0x34>
 80065e6:	11c3      	asrs	r3, r0, #7
 80065e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ec:	fb01 f102 	mul.w	r1, r1, r2
 80065f0:	3107      	adds	r1, #7
 80065f2:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80065f6:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80065fa:	f021 0107 	bic.w	r1, r1, #7
 80065fe:	2804      	cmp	r0, #4
 8006600:	fa21 f102 	lsr.w	r1, r1, r2
 8006604:	d00a      	beq.n	800661c <ai_array_get_byte_size+0x38>
 8006606:	2808      	cmp	r0, #8
 8006608:	d103      	bne.n	8006612 <ai_array_get_byte_size+0x2e>
 800660a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8006612:	3107      	adds	r1, #7
 8006614:	08c8      	lsrs	r0, r1, #3
 8006616:	4770      	bx	lr
 8006618:	4608      	mov	r0, r1
 800661a:	4770      	bx	lr
 800661c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006620:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8006624:	3107      	adds	r1, #7
 8006626:	08c8      	lsrs	r0, r1, #3
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop

0800662c <ai_array_get_data_byte_size>:
 800662c:	b161      	cbz	r1, 8006648 <ai_array_get_data_byte_size+0x1c>
 800662e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006632:	fb01 f103 	mul.w	r1, r1, r3
 8006636:	3107      	adds	r1, #7
 8006638:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800663c:	f021 0107 	bic.w	r1, r1, #7
 8006640:	40c1      	lsrs	r1, r0
 8006642:	3107      	adds	r1, #7
 8006644:	08c8      	lsrs	r0, r1, #3
 8006646:	4770      	bx	lr
 8006648:	4608      	mov	r0, r1
 800664a:	4770      	bx	lr

0800664c <__errno>:
 800664c:	4b01      	ldr	r3, [pc, #4]	; (8006654 <__errno+0x8>)
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20000950 	.word	0x20000950

08006658 <__libc_init_array>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	4d0d      	ldr	r5, [pc, #52]	; (8006690 <__libc_init_array+0x38>)
 800665c:	4c0d      	ldr	r4, [pc, #52]	; (8006694 <__libc_init_array+0x3c>)
 800665e:	1b64      	subs	r4, r4, r5
 8006660:	10a4      	asrs	r4, r4, #2
 8006662:	2600      	movs	r6, #0
 8006664:	42a6      	cmp	r6, r4
 8006666:	d109      	bne.n	800667c <__libc_init_array+0x24>
 8006668:	4d0b      	ldr	r5, [pc, #44]	; (8006698 <__libc_init_array+0x40>)
 800666a:	4c0c      	ldr	r4, [pc, #48]	; (800669c <__libc_init_array+0x44>)
 800666c:	f003 f890 	bl	8009790 <_init>
 8006670:	1b64      	subs	r4, r4, r5
 8006672:	10a4      	asrs	r4, r4, #2
 8006674:	2600      	movs	r6, #0
 8006676:	42a6      	cmp	r6, r4
 8006678:	d105      	bne.n	8006686 <__libc_init_array+0x2e>
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006680:	4798      	blx	r3
 8006682:	3601      	adds	r6, #1
 8006684:	e7ee      	b.n	8006664 <__libc_init_array+0xc>
 8006686:	f855 3b04 	ldr.w	r3, [r5], #4
 800668a:	4798      	blx	r3
 800668c:	3601      	adds	r6, #1
 800668e:	e7f2      	b.n	8006676 <__libc_init_array+0x1e>
 8006690:	0803af94 	.word	0x0803af94
 8006694:	0803af94 	.word	0x0803af94
 8006698:	0803af94 	.word	0x0803af94
 800669c:	0803af98 	.word	0x0803af98

080066a0 <malloc>:
 80066a0:	4b02      	ldr	r3, [pc, #8]	; (80066ac <malloc+0xc>)
 80066a2:	4601      	mov	r1, r0
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	f000 b885 	b.w	80067b4 <_malloc_r>
 80066aa:	bf00      	nop
 80066ac:	20000950 	.word	0x20000950

080066b0 <memcpy>:
 80066b0:	440a      	add	r2, r1
 80066b2:	4291      	cmp	r1, r2
 80066b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066b8:	d100      	bne.n	80066bc <memcpy+0xc>
 80066ba:	4770      	bx	lr
 80066bc:	b510      	push	{r4, lr}
 80066be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c6:	4291      	cmp	r1, r2
 80066c8:	d1f9      	bne.n	80066be <memcpy+0xe>
 80066ca:	bd10      	pop	{r4, pc}

080066cc <memset>:
 80066cc:	4402      	add	r2, r0
 80066ce:	4603      	mov	r3, r0
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d100      	bne.n	80066d6 <memset+0xa>
 80066d4:	4770      	bx	lr
 80066d6:	f803 1b01 	strb.w	r1, [r3], #1
 80066da:	e7f9      	b.n	80066d0 <memset+0x4>

080066dc <_free_r>:
 80066dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066de:	2900      	cmp	r1, #0
 80066e0:	d044      	beq.n	800676c <_free_r+0x90>
 80066e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066e6:	9001      	str	r0, [sp, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f1a1 0404 	sub.w	r4, r1, #4
 80066ee:	bfb8      	it	lt
 80066f0:	18e4      	addlt	r4, r4, r3
 80066f2:	f001 fcfd 	bl	80080f0 <__malloc_lock>
 80066f6:	4a1e      	ldr	r2, [pc, #120]	; (8006770 <_free_r+0x94>)
 80066f8:	9801      	ldr	r0, [sp, #4]
 80066fa:	6813      	ldr	r3, [r2, #0]
 80066fc:	b933      	cbnz	r3, 800670c <_free_r+0x30>
 80066fe:	6063      	str	r3, [r4, #4]
 8006700:	6014      	str	r4, [r2, #0]
 8006702:	b003      	add	sp, #12
 8006704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006708:	f001 bcf8 	b.w	80080fc <__malloc_unlock>
 800670c:	42a3      	cmp	r3, r4
 800670e:	d908      	bls.n	8006722 <_free_r+0x46>
 8006710:	6825      	ldr	r5, [r4, #0]
 8006712:	1961      	adds	r1, r4, r5
 8006714:	428b      	cmp	r3, r1
 8006716:	bf01      	itttt	eq
 8006718:	6819      	ldreq	r1, [r3, #0]
 800671a:	685b      	ldreq	r3, [r3, #4]
 800671c:	1949      	addeq	r1, r1, r5
 800671e:	6021      	streq	r1, [r4, #0]
 8006720:	e7ed      	b.n	80066fe <_free_r+0x22>
 8006722:	461a      	mov	r2, r3
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	b10b      	cbz	r3, 800672c <_free_r+0x50>
 8006728:	42a3      	cmp	r3, r4
 800672a:	d9fa      	bls.n	8006722 <_free_r+0x46>
 800672c:	6811      	ldr	r1, [r2, #0]
 800672e:	1855      	adds	r5, r2, r1
 8006730:	42a5      	cmp	r5, r4
 8006732:	d10b      	bne.n	800674c <_free_r+0x70>
 8006734:	6824      	ldr	r4, [r4, #0]
 8006736:	4421      	add	r1, r4
 8006738:	1854      	adds	r4, r2, r1
 800673a:	42a3      	cmp	r3, r4
 800673c:	6011      	str	r1, [r2, #0]
 800673e:	d1e0      	bne.n	8006702 <_free_r+0x26>
 8006740:	681c      	ldr	r4, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	6053      	str	r3, [r2, #4]
 8006746:	4421      	add	r1, r4
 8006748:	6011      	str	r1, [r2, #0]
 800674a:	e7da      	b.n	8006702 <_free_r+0x26>
 800674c:	d902      	bls.n	8006754 <_free_r+0x78>
 800674e:	230c      	movs	r3, #12
 8006750:	6003      	str	r3, [r0, #0]
 8006752:	e7d6      	b.n	8006702 <_free_r+0x26>
 8006754:	6825      	ldr	r5, [r4, #0]
 8006756:	1961      	adds	r1, r4, r5
 8006758:	428b      	cmp	r3, r1
 800675a:	bf04      	itt	eq
 800675c:	6819      	ldreq	r1, [r3, #0]
 800675e:	685b      	ldreq	r3, [r3, #4]
 8006760:	6063      	str	r3, [r4, #4]
 8006762:	bf04      	itt	eq
 8006764:	1949      	addeq	r1, r1, r5
 8006766:	6021      	streq	r1, [r4, #0]
 8006768:	6054      	str	r4, [r2, #4]
 800676a:	e7ca      	b.n	8006702 <_free_r+0x26>
 800676c:	b003      	add	sp, #12
 800676e:	bd30      	pop	{r4, r5, pc}
 8006770:	20007584 	.word	0x20007584

08006774 <sbrk_aligned>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	4e0e      	ldr	r6, [pc, #56]	; (80067b0 <sbrk_aligned+0x3c>)
 8006778:	460c      	mov	r4, r1
 800677a:	6831      	ldr	r1, [r6, #0]
 800677c:	4605      	mov	r5, r0
 800677e:	b911      	cbnz	r1, 8006786 <sbrk_aligned+0x12>
 8006780:	f000 fd0e 	bl	80071a0 <_sbrk_r>
 8006784:	6030      	str	r0, [r6, #0]
 8006786:	4621      	mov	r1, r4
 8006788:	4628      	mov	r0, r5
 800678a:	f000 fd09 	bl	80071a0 <_sbrk_r>
 800678e:	1c43      	adds	r3, r0, #1
 8006790:	d00a      	beq.n	80067a8 <sbrk_aligned+0x34>
 8006792:	1cc4      	adds	r4, r0, #3
 8006794:	f024 0403 	bic.w	r4, r4, #3
 8006798:	42a0      	cmp	r0, r4
 800679a:	d007      	beq.n	80067ac <sbrk_aligned+0x38>
 800679c:	1a21      	subs	r1, r4, r0
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 fcfe 	bl	80071a0 <_sbrk_r>
 80067a4:	3001      	adds	r0, #1
 80067a6:	d101      	bne.n	80067ac <sbrk_aligned+0x38>
 80067a8:	f04f 34ff 	mov.w	r4, #4294967295
 80067ac:	4620      	mov	r0, r4
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	20007588 	.word	0x20007588

080067b4 <_malloc_r>:
 80067b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b8:	1ccd      	adds	r5, r1, #3
 80067ba:	f025 0503 	bic.w	r5, r5, #3
 80067be:	3508      	adds	r5, #8
 80067c0:	2d0c      	cmp	r5, #12
 80067c2:	bf38      	it	cc
 80067c4:	250c      	movcc	r5, #12
 80067c6:	2d00      	cmp	r5, #0
 80067c8:	4607      	mov	r7, r0
 80067ca:	db01      	blt.n	80067d0 <_malloc_r+0x1c>
 80067cc:	42a9      	cmp	r1, r5
 80067ce:	d905      	bls.n	80067dc <_malloc_r+0x28>
 80067d0:	230c      	movs	r3, #12
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	2600      	movs	r6, #0
 80067d6:	4630      	mov	r0, r6
 80067d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067dc:	4e2e      	ldr	r6, [pc, #184]	; (8006898 <_malloc_r+0xe4>)
 80067de:	f001 fc87 	bl	80080f0 <__malloc_lock>
 80067e2:	6833      	ldr	r3, [r6, #0]
 80067e4:	461c      	mov	r4, r3
 80067e6:	bb34      	cbnz	r4, 8006836 <_malloc_r+0x82>
 80067e8:	4629      	mov	r1, r5
 80067ea:	4638      	mov	r0, r7
 80067ec:	f7ff ffc2 	bl	8006774 <sbrk_aligned>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	4604      	mov	r4, r0
 80067f4:	d14d      	bne.n	8006892 <_malloc_r+0xde>
 80067f6:	6834      	ldr	r4, [r6, #0]
 80067f8:	4626      	mov	r6, r4
 80067fa:	2e00      	cmp	r6, #0
 80067fc:	d140      	bne.n	8006880 <_malloc_r+0xcc>
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	4631      	mov	r1, r6
 8006802:	4638      	mov	r0, r7
 8006804:	eb04 0803 	add.w	r8, r4, r3
 8006808:	f000 fcca 	bl	80071a0 <_sbrk_r>
 800680c:	4580      	cmp	r8, r0
 800680e:	d13a      	bne.n	8006886 <_malloc_r+0xd2>
 8006810:	6821      	ldr	r1, [r4, #0]
 8006812:	3503      	adds	r5, #3
 8006814:	1a6d      	subs	r5, r5, r1
 8006816:	f025 0503 	bic.w	r5, r5, #3
 800681a:	3508      	adds	r5, #8
 800681c:	2d0c      	cmp	r5, #12
 800681e:	bf38      	it	cc
 8006820:	250c      	movcc	r5, #12
 8006822:	4629      	mov	r1, r5
 8006824:	4638      	mov	r0, r7
 8006826:	f7ff ffa5 	bl	8006774 <sbrk_aligned>
 800682a:	3001      	adds	r0, #1
 800682c:	d02b      	beq.n	8006886 <_malloc_r+0xd2>
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	442b      	add	r3, r5
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	e00e      	b.n	8006854 <_malloc_r+0xa0>
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	1b52      	subs	r2, r2, r5
 800683a:	d41e      	bmi.n	800687a <_malloc_r+0xc6>
 800683c:	2a0b      	cmp	r2, #11
 800683e:	d916      	bls.n	800686e <_malloc_r+0xba>
 8006840:	1961      	adds	r1, r4, r5
 8006842:	42a3      	cmp	r3, r4
 8006844:	6025      	str	r5, [r4, #0]
 8006846:	bf18      	it	ne
 8006848:	6059      	strne	r1, [r3, #4]
 800684a:	6863      	ldr	r3, [r4, #4]
 800684c:	bf08      	it	eq
 800684e:	6031      	streq	r1, [r6, #0]
 8006850:	5162      	str	r2, [r4, r5]
 8006852:	604b      	str	r3, [r1, #4]
 8006854:	4638      	mov	r0, r7
 8006856:	f104 060b 	add.w	r6, r4, #11
 800685a:	f001 fc4f 	bl	80080fc <__malloc_unlock>
 800685e:	f026 0607 	bic.w	r6, r6, #7
 8006862:	1d23      	adds	r3, r4, #4
 8006864:	1af2      	subs	r2, r6, r3
 8006866:	d0b6      	beq.n	80067d6 <_malloc_r+0x22>
 8006868:	1b9b      	subs	r3, r3, r6
 800686a:	50a3      	str	r3, [r4, r2]
 800686c:	e7b3      	b.n	80067d6 <_malloc_r+0x22>
 800686e:	6862      	ldr	r2, [r4, #4]
 8006870:	42a3      	cmp	r3, r4
 8006872:	bf0c      	ite	eq
 8006874:	6032      	streq	r2, [r6, #0]
 8006876:	605a      	strne	r2, [r3, #4]
 8006878:	e7ec      	b.n	8006854 <_malloc_r+0xa0>
 800687a:	4623      	mov	r3, r4
 800687c:	6864      	ldr	r4, [r4, #4]
 800687e:	e7b2      	b.n	80067e6 <_malloc_r+0x32>
 8006880:	4634      	mov	r4, r6
 8006882:	6876      	ldr	r6, [r6, #4]
 8006884:	e7b9      	b.n	80067fa <_malloc_r+0x46>
 8006886:	230c      	movs	r3, #12
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	4638      	mov	r0, r7
 800688c:	f001 fc36 	bl	80080fc <__malloc_unlock>
 8006890:	e7a1      	b.n	80067d6 <_malloc_r+0x22>
 8006892:	6025      	str	r5, [r4, #0]
 8006894:	e7de      	b.n	8006854 <_malloc_r+0xa0>
 8006896:	bf00      	nop
 8006898:	20007584 	.word	0x20007584

0800689c <__cvt>:
 800689c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	ec55 4b10 	vmov	r4, r5, d0
 80068a4:	2d00      	cmp	r5, #0
 80068a6:	460e      	mov	r6, r1
 80068a8:	4619      	mov	r1, r3
 80068aa:	462b      	mov	r3, r5
 80068ac:	bfbb      	ittet	lt
 80068ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80068b2:	461d      	movlt	r5, r3
 80068b4:	2300      	movge	r3, #0
 80068b6:	232d      	movlt	r3, #45	; 0x2d
 80068b8:	700b      	strb	r3, [r1, #0]
 80068ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80068c0:	4691      	mov	r9, r2
 80068c2:	f023 0820 	bic.w	r8, r3, #32
 80068c6:	bfbc      	itt	lt
 80068c8:	4622      	movlt	r2, r4
 80068ca:	4614      	movlt	r4, r2
 80068cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068d0:	d005      	beq.n	80068de <__cvt+0x42>
 80068d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80068d6:	d100      	bne.n	80068da <__cvt+0x3e>
 80068d8:	3601      	adds	r6, #1
 80068da:	2102      	movs	r1, #2
 80068dc:	e000      	b.n	80068e0 <__cvt+0x44>
 80068de:	2103      	movs	r1, #3
 80068e0:	ab03      	add	r3, sp, #12
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	ab02      	add	r3, sp, #8
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	ec45 4b10 	vmov	d0, r4, r5
 80068ec:	4653      	mov	r3, sl
 80068ee:	4632      	mov	r2, r6
 80068f0:	f000 fd12 	bl	8007318 <_dtoa_r>
 80068f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068f8:	4607      	mov	r7, r0
 80068fa:	d102      	bne.n	8006902 <__cvt+0x66>
 80068fc:	f019 0f01 	tst.w	r9, #1
 8006900:	d022      	beq.n	8006948 <__cvt+0xac>
 8006902:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006906:	eb07 0906 	add.w	r9, r7, r6
 800690a:	d110      	bne.n	800692e <__cvt+0x92>
 800690c:	783b      	ldrb	r3, [r7, #0]
 800690e:	2b30      	cmp	r3, #48	; 0x30
 8006910:	d10a      	bne.n	8006928 <__cvt+0x8c>
 8006912:	2200      	movs	r2, #0
 8006914:	2300      	movs	r3, #0
 8006916:	4620      	mov	r0, r4
 8006918:	4629      	mov	r1, r5
 800691a:	f7fa f8dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800691e:	b918      	cbnz	r0, 8006928 <__cvt+0x8c>
 8006920:	f1c6 0601 	rsb	r6, r6, #1
 8006924:	f8ca 6000 	str.w	r6, [sl]
 8006928:	f8da 3000 	ldr.w	r3, [sl]
 800692c:	4499      	add	r9, r3
 800692e:	2200      	movs	r2, #0
 8006930:	2300      	movs	r3, #0
 8006932:	4620      	mov	r0, r4
 8006934:	4629      	mov	r1, r5
 8006936:	f7fa f8cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800693a:	b108      	cbz	r0, 8006940 <__cvt+0xa4>
 800693c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006940:	2230      	movs	r2, #48	; 0x30
 8006942:	9b03      	ldr	r3, [sp, #12]
 8006944:	454b      	cmp	r3, r9
 8006946:	d307      	bcc.n	8006958 <__cvt+0xbc>
 8006948:	9b03      	ldr	r3, [sp, #12]
 800694a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800694c:	1bdb      	subs	r3, r3, r7
 800694e:	4638      	mov	r0, r7
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	b004      	add	sp, #16
 8006954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006958:	1c59      	adds	r1, r3, #1
 800695a:	9103      	str	r1, [sp, #12]
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	e7f0      	b.n	8006942 <__cvt+0xa6>

08006960 <__exponent>:
 8006960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006962:	4603      	mov	r3, r0
 8006964:	2900      	cmp	r1, #0
 8006966:	bfb8      	it	lt
 8006968:	4249      	neglt	r1, r1
 800696a:	f803 2b02 	strb.w	r2, [r3], #2
 800696e:	bfb4      	ite	lt
 8006970:	222d      	movlt	r2, #45	; 0x2d
 8006972:	222b      	movge	r2, #43	; 0x2b
 8006974:	2909      	cmp	r1, #9
 8006976:	7042      	strb	r2, [r0, #1]
 8006978:	dd2a      	ble.n	80069d0 <__exponent+0x70>
 800697a:	f10d 0407 	add.w	r4, sp, #7
 800697e:	46a4      	mov	ip, r4
 8006980:	270a      	movs	r7, #10
 8006982:	46a6      	mov	lr, r4
 8006984:	460a      	mov	r2, r1
 8006986:	fb91 f6f7 	sdiv	r6, r1, r7
 800698a:	fb07 1516 	mls	r5, r7, r6, r1
 800698e:	3530      	adds	r5, #48	; 0x30
 8006990:	2a63      	cmp	r2, #99	; 0x63
 8006992:	f104 34ff 	add.w	r4, r4, #4294967295
 8006996:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800699a:	4631      	mov	r1, r6
 800699c:	dcf1      	bgt.n	8006982 <__exponent+0x22>
 800699e:	3130      	adds	r1, #48	; 0x30
 80069a0:	f1ae 0502 	sub.w	r5, lr, #2
 80069a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80069a8:	1c44      	adds	r4, r0, #1
 80069aa:	4629      	mov	r1, r5
 80069ac:	4561      	cmp	r1, ip
 80069ae:	d30a      	bcc.n	80069c6 <__exponent+0x66>
 80069b0:	f10d 0209 	add.w	r2, sp, #9
 80069b4:	eba2 020e 	sub.w	r2, r2, lr
 80069b8:	4565      	cmp	r5, ip
 80069ba:	bf88      	it	hi
 80069bc:	2200      	movhi	r2, #0
 80069be:	4413      	add	r3, r2
 80069c0:	1a18      	subs	r0, r3, r0
 80069c2:	b003      	add	sp, #12
 80069c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80069ce:	e7ed      	b.n	80069ac <__exponent+0x4c>
 80069d0:	2330      	movs	r3, #48	; 0x30
 80069d2:	3130      	adds	r1, #48	; 0x30
 80069d4:	7083      	strb	r3, [r0, #2]
 80069d6:	70c1      	strb	r1, [r0, #3]
 80069d8:	1d03      	adds	r3, r0, #4
 80069da:	e7f1      	b.n	80069c0 <__exponent+0x60>

080069dc <_printf_float>:
 80069dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	ed2d 8b02 	vpush	{d8}
 80069e4:	b08d      	sub	sp, #52	; 0x34
 80069e6:	460c      	mov	r4, r1
 80069e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80069ec:	4616      	mov	r6, r2
 80069ee:	461f      	mov	r7, r3
 80069f0:	4605      	mov	r5, r0
 80069f2:	f001 fb75 	bl	80080e0 <_localeconv_r>
 80069f6:	f8d0 a000 	ldr.w	sl, [r0]
 80069fa:	4650      	mov	r0, sl
 80069fc:	f7f9 fbf0 	bl	80001e0 <strlen>
 8006a00:	2300      	movs	r3, #0
 8006a02:	930a      	str	r3, [sp, #40]	; 0x28
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	9305      	str	r3, [sp, #20]
 8006a08:	f8d8 3000 	ldr.w	r3, [r8]
 8006a0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a10:	3307      	adds	r3, #7
 8006a12:	f023 0307 	bic.w	r3, r3, #7
 8006a16:	f103 0208 	add.w	r2, r3, #8
 8006a1a:	f8c8 2000 	str.w	r2, [r8]
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a2e:	9307      	str	r3, [sp, #28]
 8006a30:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a34:	ee08 0a10 	vmov	s16, r0
 8006a38:	4b9f      	ldr	r3, [pc, #636]	; (8006cb8 <_printf_float+0x2dc>)
 8006a3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a42:	f7fa f87b 	bl	8000b3c <__aeabi_dcmpun>
 8006a46:	bb88      	cbnz	r0, 8006aac <_printf_float+0xd0>
 8006a48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a4c:	4b9a      	ldr	r3, [pc, #616]	; (8006cb8 <_printf_float+0x2dc>)
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a52:	f7fa f855 	bl	8000b00 <__aeabi_dcmple>
 8006a56:	bb48      	cbnz	r0, 8006aac <_printf_float+0xd0>
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	4649      	mov	r1, r9
 8006a60:	f7fa f844 	bl	8000aec <__aeabi_dcmplt>
 8006a64:	b110      	cbz	r0, 8006a6c <_printf_float+0x90>
 8006a66:	232d      	movs	r3, #45	; 0x2d
 8006a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a6c:	4b93      	ldr	r3, [pc, #588]	; (8006cbc <_printf_float+0x2e0>)
 8006a6e:	4894      	ldr	r0, [pc, #592]	; (8006cc0 <_printf_float+0x2e4>)
 8006a70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a74:	bf94      	ite	ls
 8006a76:	4698      	movls	r8, r3
 8006a78:	4680      	movhi	r8, r0
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	9b05      	ldr	r3, [sp, #20]
 8006a80:	f023 0204 	bic.w	r2, r3, #4
 8006a84:	6022      	str	r2, [r4, #0]
 8006a86:	f04f 0900 	mov.w	r9, #0
 8006a8a:	9700      	str	r7, [sp, #0]
 8006a8c:	4633      	mov	r3, r6
 8006a8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a90:	4621      	mov	r1, r4
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f9d8 	bl	8006e48 <_printf_common>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f040 8090 	bne.w	8006bbe <_printf_float+0x1e2>
 8006a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa2:	b00d      	add	sp, #52	; 0x34
 8006aa4:	ecbd 8b02 	vpop	{d8}
 8006aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aac:	4642      	mov	r2, r8
 8006aae:	464b      	mov	r3, r9
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	f7fa f842 	bl	8000b3c <__aeabi_dcmpun>
 8006ab8:	b140      	cbz	r0, 8006acc <_printf_float+0xf0>
 8006aba:	464b      	mov	r3, r9
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bfbc      	itt	lt
 8006ac0:	232d      	movlt	r3, #45	; 0x2d
 8006ac2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ac6:	487f      	ldr	r0, [pc, #508]	; (8006cc4 <_printf_float+0x2e8>)
 8006ac8:	4b7f      	ldr	r3, [pc, #508]	; (8006cc8 <_printf_float+0x2ec>)
 8006aca:	e7d1      	b.n	8006a70 <_printf_float+0x94>
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ad2:	9206      	str	r2, [sp, #24]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	d13f      	bne.n	8006b58 <_printf_float+0x17c>
 8006ad8:	2306      	movs	r3, #6
 8006ada:	6063      	str	r3, [r4, #4]
 8006adc:	9b05      	ldr	r3, [sp, #20]
 8006ade:	6861      	ldr	r1, [r4, #4]
 8006ae0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9303      	str	r3, [sp, #12]
 8006ae8:	ab0a      	add	r3, sp, #40	; 0x28
 8006aea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006aee:	ab09      	add	r3, sp, #36	; 0x24
 8006af0:	ec49 8b10 	vmov	d0, r8, r9
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	6022      	str	r2, [r4, #0]
 8006af8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006afc:	4628      	mov	r0, r5
 8006afe:	f7ff fecd 	bl	800689c <__cvt>
 8006b02:	9b06      	ldr	r3, [sp, #24]
 8006b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b06:	2b47      	cmp	r3, #71	; 0x47
 8006b08:	4680      	mov	r8, r0
 8006b0a:	d108      	bne.n	8006b1e <_printf_float+0x142>
 8006b0c:	1cc8      	adds	r0, r1, #3
 8006b0e:	db02      	blt.n	8006b16 <_printf_float+0x13a>
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	4299      	cmp	r1, r3
 8006b14:	dd41      	ble.n	8006b9a <_printf_float+0x1be>
 8006b16:	f1ab 0b02 	sub.w	fp, fp, #2
 8006b1a:	fa5f fb8b 	uxtb.w	fp, fp
 8006b1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b22:	d820      	bhi.n	8006b66 <_printf_float+0x18a>
 8006b24:	3901      	subs	r1, #1
 8006b26:	465a      	mov	r2, fp
 8006b28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006b2e:	f7ff ff17 	bl	8006960 <__exponent>
 8006b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b34:	1813      	adds	r3, r2, r0
 8006b36:	2a01      	cmp	r2, #1
 8006b38:	4681      	mov	r9, r0
 8006b3a:	6123      	str	r3, [r4, #16]
 8006b3c:	dc02      	bgt.n	8006b44 <_printf_float+0x168>
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	07d2      	lsls	r2, r2, #31
 8006b42:	d501      	bpl.n	8006b48 <_printf_float+0x16c>
 8006b44:	3301      	adds	r3, #1
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d09c      	beq.n	8006a8a <_printf_float+0xae>
 8006b50:	232d      	movs	r3, #45	; 0x2d
 8006b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b56:	e798      	b.n	8006a8a <_printf_float+0xae>
 8006b58:	9a06      	ldr	r2, [sp, #24]
 8006b5a:	2a47      	cmp	r2, #71	; 0x47
 8006b5c:	d1be      	bne.n	8006adc <_printf_float+0x100>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1bc      	bne.n	8006adc <_printf_float+0x100>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e7b9      	b.n	8006ada <_printf_float+0xfe>
 8006b66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b6a:	d118      	bne.n	8006b9e <_printf_float+0x1c2>
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	6863      	ldr	r3, [r4, #4]
 8006b70:	dd0b      	ble.n	8006b8a <_printf_float+0x1ae>
 8006b72:	6121      	str	r1, [r4, #16]
 8006b74:	b913      	cbnz	r3, 8006b7c <_printf_float+0x1a0>
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	07d0      	lsls	r0, r2, #31
 8006b7a:	d502      	bpl.n	8006b82 <_printf_float+0x1a6>
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	440b      	add	r3, r1
 8006b80:	6123      	str	r3, [r4, #16]
 8006b82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b84:	f04f 0900 	mov.w	r9, #0
 8006b88:	e7de      	b.n	8006b48 <_printf_float+0x16c>
 8006b8a:	b913      	cbnz	r3, 8006b92 <_printf_float+0x1b6>
 8006b8c:	6822      	ldr	r2, [r4, #0]
 8006b8e:	07d2      	lsls	r2, r2, #31
 8006b90:	d501      	bpl.n	8006b96 <_printf_float+0x1ba>
 8006b92:	3302      	adds	r3, #2
 8006b94:	e7f4      	b.n	8006b80 <_printf_float+0x1a4>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e7f2      	b.n	8006b80 <_printf_float+0x1a4>
 8006b9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba0:	4299      	cmp	r1, r3
 8006ba2:	db05      	blt.n	8006bb0 <_printf_float+0x1d4>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	6121      	str	r1, [r4, #16]
 8006ba8:	07d8      	lsls	r0, r3, #31
 8006baa:	d5ea      	bpl.n	8006b82 <_printf_float+0x1a6>
 8006bac:	1c4b      	adds	r3, r1, #1
 8006bae:	e7e7      	b.n	8006b80 <_printf_float+0x1a4>
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	bfd4      	ite	le
 8006bb4:	f1c1 0202 	rsble	r2, r1, #2
 8006bb8:	2201      	movgt	r2, #1
 8006bba:	4413      	add	r3, r2
 8006bbc:	e7e0      	b.n	8006b80 <_printf_float+0x1a4>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	055a      	lsls	r2, r3, #21
 8006bc2:	d407      	bmi.n	8006bd4 <_printf_float+0x1f8>
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	4631      	mov	r1, r6
 8006bca:	4628      	mov	r0, r5
 8006bcc:	47b8      	blx	r7
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d12c      	bne.n	8006c2c <_printf_float+0x250>
 8006bd2:	e764      	b.n	8006a9e <_printf_float+0xc2>
 8006bd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006bd8:	f240 80e0 	bls.w	8006d9c <_printf_float+0x3c0>
 8006bdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006be0:	2200      	movs	r2, #0
 8006be2:	2300      	movs	r3, #0
 8006be4:	f7f9 ff78 	bl	8000ad8 <__aeabi_dcmpeq>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d034      	beq.n	8006c56 <_printf_float+0x27a>
 8006bec:	4a37      	ldr	r2, [pc, #220]	; (8006ccc <_printf_float+0x2f0>)
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f af51 	beq.w	8006a9e <_printf_float+0xc2>
 8006bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c00:	429a      	cmp	r2, r3
 8006c02:	db02      	blt.n	8006c0a <_printf_float+0x22e>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	07d8      	lsls	r0, r3, #31
 8006c08:	d510      	bpl.n	8006c2c <_printf_float+0x250>
 8006c0a:	ee18 3a10 	vmov	r3, s16
 8006c0e:	4652      	mov	r2, sl
 8006c10:	4631      	mov	r1, r6
 8006c12:	4628      	mov	r0, r5
 8006c14:	47b8      	blx	r7
 8006c16:	3001      	adds	r0, #1
 8006c18:	f43f af41 	beq.w	8006a9e <_printf_float+0xc2>
 8006c1c:	f04f 0800 	mov.w	r8, #0
 8006c20:	f104 091a 	add.w	r9, r4, #26
 8006c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4543      	cmp	r3, r8
 8006c2a:	dc09      	bgt.n	8006c40 <_printf_float+0x264>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	079b      	lsls	r3, r3, #30
 8006c30:	f100 8105 	bmi.w	8006e3e <_printf_float+0x462>
 8006c34:	68e0      	ldr	r0, [r4, #12]
 8006c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c38:	4298      	cmp	r0, r3
 8006c3a:	bfb8      	it	lt
 8006c3c:	4618      	movlt	r0, r3
 8006c3e:	e730      	b.n	8006aa2 <_printf_float+0xc6>
 8006c40:	2301      	movs	r3, #1
 8006c42:	464a      	mov	r2, r9
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b8      	blx	r7
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f43f af27 	beq.w	8006a9e <_printf_float+0xc2>
 8006c50:	f108 0801 	add.w	r8, r8, #1
 8006c54:	e7e6      	b.n	8006c24 <_printf_float+0x248>
 8006c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	dc39      	bgt.n	8006cd0 <_printf_float+0x2f4>
 8006c5c:	4a1b      	ldr	r2, [pc, #108]	; (8006ccc <_printf_float+0x2f0>)
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	f43f af19 	beq.w	8006a9e <_printf_float+0xc2>
 8006c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c70:	4313      	orrs	r3, r2
 8006c72:	d102      	bne.n	8006c7a <_printf_float+0x29e>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	07d9      	lsls	r1, r3, #31
 8006c78:	d5d8      	bpl.n	8006c2c <_printf_float+0x250>
 8006c7a:	ee18 3a10 	vmov	r3, s16
 8006c7e:	4652      	mov	r2, sl
 8006c80:	4631      	mov	r1, r6
 8006c82:	4628      	mov	r0, r5
 8006c84:	47b8      	blx	r7
 8006c86:	3001      	adds	r0, #1
 8006c88:	f43f af09 	beq.w	8006a9e <_printf_float+0xc2>
 8006c8c:	f04f 0900 	mov.w	r9, #0
 8006c90:	f104 0a1a 	add.w	sl, r4, #26
 8006c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c96:	425b      	negs	r3, r3
 8006c98:	454b      	cmp	r3, r9
 8006c9a:	dc01      	bgt.n	8006ca0 <_printf_float+0x2c4>
 8006c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c9e:	e792      	b.n	8006bc6 <_printf_float+0x1ea>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4652      	mov	r2, sl
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	f43f aef7 	beq.w	8006a9e <_printf_float+0xc2>
 8006cb0:	f109 0901 	add.w	r9, r9, #1
 8006cb4:	e7ee      	b.n	8006c94 <_printf_float+0x2b8>
 8006cb6:	bf00      	nop
 8006cb8:	7fefffff 	.word	0x7fefffff
 8006cbc:	0803ab9c 	.word	0x0803ab9c
 8006cc0:	0803aba0 	.word	0x0803aba0
 8006cc4:	0803aba8 	.word	0x0803aba8
 8006cc8:	0803aba4 	.word	0x0803aba4
 8006ccc:	0803abac 	.word	0x0803abac
 8006cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	bfa8      	it	ge
 8006cd8:	461a      	movge	r2, r3
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	4691      	mov	r9, r2
 8006cde:	dc37      	bgt.n	8006d50 <_printf_float+0x374>
 8006ce0:	f04f 0b00 	mov.w	fp, #0
 8006ce4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ce8:	f104 021a 	add.w	r2, r4, #26
 8006cec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cee:	9305      	str	r3, [sp, #20]
 8006cf0:	eba3 0309 	sub.w	r3, r3, r9
 8006cf4:	455b      	cmp	r3, fp
 8006cf6:	dc33      	bgt.n	8006d60 <_printf_float+0x384>
 8006cf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	db3b      	blt.n	8006d78 <_printf_float+0x39c>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	07da      	lsls	r2, r3, #31
 8006d04:	d438      	bmi.n	8006d78 <_printf_float+0x39c>
 8006d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d08:	9a05      	ldr	r2, [sp, #20]
 8006d0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d0c:	1a9a      	subs	r2, r3, r2
 8006d0e:	eba3 0901 	sub.w	r9, r3, r1
 8006d12:	4591      	cmp	r9, r2
 8006d14:	bfa8      	it	ge
 8006d16:	4691      	movge	r9, r2
 8006d18:	f1b9 0f00 	cmp.w	r9, #0
 8006d1c:	dc35      	bgt.n	8006d8a <_printf_float+0x3ae>
 8006d1e:	f04f 0800 	mov.w	r8, #0
 8006d22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d26:	f104 0a1a 	add.w	sl, r4, #26
 8006d2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d2e:	1a9b      	subs	r3, r3, r2
 8006d30:	eba3 0309 	sub.w	r3, r3, r9
 8006d34:	4543      	cmp	r3, r8
 8006d36:	f77f af79 	ble.w	8006c2c <_printf_float+0x250>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f aeaa 	beq.w	8006a9e <_printf_float+0xc2>
 8006d4a:	f108 0801 	add.w	r8, r8, #1
 8006d4e:	e7ec      	b.n	8006d2a <_printf_float+0x34e>
 8006d50:	4613      	mov	r3, r2
 8006d52:	4631      	mov	r1, r6
 8006d54:	4642      	mov	r2, r8
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b8      	blx	r7
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d1c0      	bne.n	8006ce0 <_printf_float+0x304>
 8006d5e:	e69e      	b.n	8006a9e <_printf_float+0xc2>
 8006d60:	2301      	movs	r3, #1
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	9205      	str	r2, [sp, #20]
 8006d68:	47b8      	blx	r7
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	f43f ae97 	beq.w	8006a9e <_printf_float+0xc2>
 8006d70:	9a05      	ldr	r2, [sp, #20]
 8006d72:	f10b 0b01 	add.w	fp, fp, #1
 8006d76:	e7b9      	b.n	8006cec <_printf_float+0x310>
 8006d78:	ee18 3a10 	vmov	r3, s16
 8006d7c:	4652      	mov	r2, sl
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	d1be      	bne.n	8006d06 <_printf_float+0x32a>
 8006d88:	e689      	b.n	8006a9e <_printf_float+0xc2>
 8006d8a:	9a05      	ldr	r2, [sp, #20]
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	4442      	add	r2, r8
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	d1c1      	bne.n	8006d1e <_printf_float+0x342>
 8006d9a:	e680      	b.n	8006a9e <_printf_float+0xc2>
 8006d9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d9e:	2a01      	cmp	r2, #1
 8006da0:	dc01      	bgt.n	8006da6 <_printf_float+0x3ca>
 8006da2:	07db      	lsls	r3, r3, #31
 8006da4:	d538      	bpl.n	8006e18 <_printf_float+0x43c>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4642      	mov	r2, r8
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f ae74 	beq.w	8006a9e <_printf_float+0xc2>
 8006db6:	ee18 3a10 	vmov	r3, s16
 8006dba:	4652      	mov	r2, sl
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	47b8      	blx	r7
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f43f ae6b 	beq.w	8006a9e <_printf_float+0xc2>
 8006dc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f7f9 fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dd4:	b9d8      	cbnz	r0, 8006e0e <_printf_float+0x432>
 8006dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd8:	f108 0201 	add.w	r2, r8, #1
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b8      	blx	r7
 8006de4:	3001      	adds	r0, #1
 8006de6:	d10e      	bne.n	8006e06 <_printf_float+0x42a>
 8006de8:	e659      	b.n	8006a9e <_printf_float+0xc2>
 8006dea:	2301      	movs	r3, #1
 8006dec:	4652      	mov	r2, sl
 8006dee:	4631      	mov	r1, r6
 8006df0:	4628      	mov	r0, r5
 8006df2:	47b8      	blx	r7
 8006df4:	3001      	adds	r0, #1
 8006df6:	f43f ae52 	beq.w	8006a9e <_printf_float+0xc2>
 8006dfa:	f108 0801 	add.w	r8, r8, #1
 8006dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e00:	3b01      	subs	r3, #1
 8006e02:	4543      	cmp	r3, r8
 8006e04:	dcf1      	bgt.n	8006dea <_printf_float+0x40e>
 8006e06:	464b      	mov	r3, r9
 8006e08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e0c:	e6dc      	b.n	8006bc8 <_printf_float+0x1ec>
 8006e0e:	f04f 0800 	mov.w	r8, #0
 8006e12:	f104 0a1a 	add.w	sl, r4, #26
 8006e16:	e7f2      	b.n	8006dfe <_printf_float+0x422>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	e7df      	b.n	8006dde <_printf_float+0x402>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	464a      	mov	r2, r9
 8006e22:	4631      	mov	r1, r6
 8006e24:	4628      	mov	r0, r5
 8006e26:	47b8      	blx	r7
 8006e28:	3001      	adds	r0, #1
 8006e2a:	f43f ae38 	beq.w	8006a9e <_printf_float+0xc2>
 8006e2e:	f108 0801 	add.w	r8, r8, #1
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e36:	1a5b      	subs	r3, r3, r1
 8006e38:	4543      	cmp	r3, r8
 8006e3a:	dcf0      	bgt.n	8006e1e <_printf_float+0x442>
 8006e3c:	e6fa      	b.n	8006c34 <_printf_float+0x258>
 8006e3e:	f04f 0800 	mov.w	r8, #0
 8006e42:	f104 0919 	add.w	r9, r4, #25
 8006e46:	e7f4      	b.n	8006e32 <_printf_float+0x456>

08006e48 <_printf_common>:
 8006e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e4c:	4616      	mov	r6, r2
 8006e4e:	4699      	mov	r9, r3
 8006e50:	688a      	ldr	r2, [r1, #8]
 8006e52:	690b      	ldr	r3, [r1, #16]
 8006e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	bfb8      	it	lt
 8006e5c:	4613      	movlt	r3, r2
 8006e5e:	6033      	str	r3, [r6, #0]
 8006e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e64:	4607      	mov	r7, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	b10a      	cbz	r2, 8006e6e <_printf_common+0x26>
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	6033      	str	r3, [r6, #0]
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	0699      	lsls	r1, r3, #26
 8006e72:	bf42      	ittt	mi
 8006e74:	6833      	ldrmi	r3, [r6, #0]
 8006e76:	3302      	addmi	r3, #2
 8006e78:	6033      	strmi	r3, [r6, #0]
 8006e7a:	6825      	ldr	r5, [r4, #0]
 8006e7c:	f015 0506 	ands.w	r5, r5, #6
 8006e80:	d106      	bne.n	8006e90 <_printf_common+0x48>
 8006e82:	f104 0a19 	add.w	sl, r4, #25
 8006e86:	68e3      	ldr	r3, [r4, #12]
 8006e88:	6832      	ldr	r2, [r6, #0]
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	42ab      	cmp	r3, r5
 8006e8e:	dc26      	bgt.n	8006ede <_printf_common+0x96>
 8006e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e94:	1e13      	subs	r3, r2, #0
 8006e96:	6822      	ldr	r2, [r4, #0]
 8006e98:	bf18      	it	ne
 8006e9a:	2301      	movne	r3, #1
 8006e9c:	0692      	lsls	r2, r2, #26
 8006e9e:	d42b      	bmi.n	8006ef8 <_printf_common+0xb0>
 8006ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	47c0      	blx	r8
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d01e      	beq.n	8006eec <_printf_common+0xa4>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	68e5      	ldr	r5, [r4, #12]
 8006eb2:	6832      	ldr	r2, [r6, #0]
 8006eb4:	f003 0306 	and.w	r3, r3, #6
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	bf08      	it	eq
 8006ebc:	1aad      	subeq	r5, r5, r2
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	6922      	ldr	r2, [r4, #16]
 8006ec2:	bf0c      	ite	eq
 8006ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec8:	2500      	movne	r5, #0
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	bfc4      	itt	gt
 8006ece:	1a9b      	subgt	r3, r3, r2
 8006ed0:	18ed      	addgt	r5, r5, r3
 8006ed2:	2600      	movs	r6, #0
 8006ed4:	341a      	adds	r4, #26
 8006ed6:	42b5      	cmp	r5, r6
 8006ed8:	d11a      	bne.n	8006f10 <_printf_common+0xc8>
 8006eda:	2000      	movs	r0, #0
 8006edc:	e008      	b.n	8006ef0 <_printf_common+0xa8>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	47c0      	blx	r8
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d103      	bne.n	8006ef4 <_printf_common+0xac>
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef4:	3501      	adds	r5, #1
 8006ef6:	e7c6      	b.n	8006e86 <_printf_common+0x3e>
 8006ef8:	18e1      	adds	r1, r4, r3
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	2030      	movs	r0, #48	; 0x30
 8006efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f02:	4422      	add	r2, r4
 8006f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f0c:	3302      	adds	r3, #2
 8006f0e:	e7c7      	b.n	8006ea0 <_printf_common+0x58>
 8006f10:	2301      	movs	r3, #1
 8006f12:	4622      	mov	r2, r4
 8006f14:	4649      	mov	r1, r9
 8006f16:	4638      	mov	r0, r7
 8006f18:	47c0      	blx	r8
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d0e6      	beq.n	8006eec <_printf_common+0xa4>
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7d9      	b.n	8006ed6 <_printf_common+0x8e>
	...

08006f24 <_printf_i>:
 8006f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	7e0f      	ldrb	r7, [r1, #24]
 8006f2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f2c:	2f78      	cmp	r7, #120	; 0x78
 8006f2e:	4691      	mov	r9, r2
 8006f30:	4680      	mov	r8, r0
 8006f32:	460c      	mov	r4, r1
 8006f34:	469a      	mov	sl, r3
 8006f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f3a:	d807      	bhi.n	8006f4c <_printf_i+0x28>
 8006f3c:	2f62      	cmp	r7, #98	; 0x62
 8006f3e:	d80a      	bhi.n	8006f56 <_printf_i+0x32>
 8006f40:	2f00      	cmp	r7, #0
 8006f42:	f000 80d8 	beq.w	80070f6 <_printf_i+0x1d2>
 8006f46:	2f58      	cmp	r7, #88	; 0x58
 8006f48:	f000 80a3 	beq.w	8007092 <_printf_i+0x16e>
 8006f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f54:	e03a      	b.n	8006fcc <_printf_i+0xa8>
 8006f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f5a:	2b15      	cmp	r3, #21
 8006f5c:	d8f6      	bhi.n	8006f4c <_printf_i+0x28>
 8006f5e:	a101      	add	r1, pc, #4	; (adr r1, 8006f64 <_printf_i+0x40>)
 8006f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f64:	08006fbd 	.word	0x08006fbd
 8006f68:	08006fd1 	.word	0x08006fd1
 8006f6c:	08006f4d 	.word	0x08006f4d
 8006f70:	08006f4d 	.word	0x08006f4d
 8006f74:	08006f4d 	.word	0x08006f4d
 8006f78:	08006f4d 	.word	0x08006f4d
 8006f7c:	08006fd1 	.word	0x08006fd1
 8006f80:	08006f4d 	.word	0x08006f4d
 8006f84:	08006f4d 	.word	0x08006f4d
 8006f88:	08006f4d 	.word	0x08006f4d
 8006f8c:	08006f4d 	.word	0x08006f4d
 8006f90:	080070dd 	.word	0x080070dd
 8006f94:	08007001 	.word	0x08007001
 8006f98:	080070bf 	.word	0x080070bf
 8006f9c:	08006f4d 	.word	0x08006f4d
 8006fa0:	08006f4d 	.word	0x08006f4d
 8006fa4:	080070ff 	.word	0x080070ff
 8006fa8:	08006f4d 	.word	0x08006f4d
 8006fac:	08007001 	.word	0x08007001
 8006fb0:	08006f4d 	.word	0x08006f4d
 8006fb4:	08006f4d 	.word	0x08006f4d
 8006fb8:	080070c7 	.word	0x080070c7
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	1d1a      	adds	r2, r3, #4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	602a      	str	r2, [r5, #0]
 8006fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0a3      	b.n	8007118 <_printf_i+0x1f4>
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	6829      	ldr	r1, [r5, #0]
 8006fd4:	0606      	lsls	r6, r0, #24
 8006fd6:	f101 0304 	add.w	r3, r1, #4
 8006fda:	d50a      	bpl.n	8006ff2 <_printf_i+0xce>
 8006fdc:	680e      	ldr	r6, [r1, #0]
 8006fde:	602b      	str	r3, [r5, #0]
 8006fe0:	2e00      	cmp	r6, #0
 8006fe2:	da03      	bge.n	8006fec <_printf_i+0xc8>
 8006fe4:	232d      	movs	r3, #45	; 0x2d
 8006fe6:	4276      	negs	r6, r6
 8006fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fec:	485e      	ldr	r0, [pc, #376]	; (8007168 <_printf_i+0x244>)
 8006fee:	230a      	movs	r3, #10
 8006ff0:	e019      	b.n	8007026 <_printf_i+0x102>
 8006ff2:	680e      	ldr	r6, [r1, #0]
 8006ff4:	602b      	str	r3, [r5, #0]
 8006ff6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ffa:	bf18      	it	ne
 8006ffc:	b236      	sxthne	r6, r6
 8006ffe:	e7ef      	b.n	8006fe0 <_printf_i+0xbc>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	6820      	ldr	r0, [r4, #0]
 8007004:	1d19      	adds	r1, r3, #4
 8007006:	6029      	str	r1, [r5, #0]
 8007008:	0601      	lsls	r1, r0, #24
 800700a:	d501      	bpl.n	8007010 <_printf_i+0xec>
 800700c:	681e      	ldr	r6, [r3, #0]
 800700e:	e002      	b.n	8007016 <_printf_i+0xf2>
 8007010:	0646      	lsls	r6, r0, #25
 8007012:	d5fb      	bpl.n	800700c <_printf_i+0xe8>
 8007014:	881e      	ldrh	r6, [r3, #0]
 8007016:	4854      	ldr	r0, [pc, #336]	; (8007168 <_printf_i+0x244>)
 8007018:	2f6f      	cmp	r7, #111	; 0x6f
 800701a:	bf0c      	ite	eq
 800701c:	2308      	moveq	r3, #8
 800701e:	230a      	movne	r3, #10
 8007020:	2100      	movs	r1, #0
 8007022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007026:	6865      	ldr	r5, [r4, #4]
 8007028:	60a5      	str	r5, [r4, #8]
 800702a:	2d00      	cmp	r5, #0
 800702c:	bfa2      	ittt	ge
 800702e:	6821      	ldrge	r1, [r4, #0]
 8007030:	f021 0104 	bicge.w	r1, r1, #4
 8007034:	6021      	strge	r1, [r4, #0]
 8007036:	b90e      	cbnz	r6, 800703c <_printf_i+0x118>
 8007038:	2d00      	cmp	r5, #0
 800703a:	d04d      	beq.n	80070d8 <_printf_i+0x1b4>
 800703c:	4615      	mov	r5, r2
 800703e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007042:	fb03 6711 	mls	r7, r3, r1, r6
 8007046:	5dc7      	ldrb	r7, [r0, r7]
 8007048:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800704c:	4637      	mov	r7, r6
 800704e:	42bb      	cmp	r3, r7
 8007050:	460e      	mov	r6, r1
 8007052:	d9f4      	bls.n	800703e <_printf_i+0x11a>
 8007054:	2b08      	cmp	r3, #8
 8007056:	d10b      	bne.n	8007070 <_printf_i+0x14c>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	07de      	lsls	r6, r3, #31
 800705c:	d508      	bpl.n	8007070 <_printf_i+0x14c>
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	6861      	ldr	r1, [r4, #4]
 8007062:	4299      	cmp	r1, r3
 8007064:	bfde      	ittt	le
 8007066:	2330      	movle	r3, #48	; 0x30
 8007068:	f805 3c01 	strble.w	r3, [r5, #-1]
 800706c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007070:	1b52      	subs	r2, r2, r5
 8007072:	6122      	str	r2, [r4, #16]
 8007074:	f8cd a000 	str.w	sl, [sp]
 8007078:	464b      	mov	r3, r9
 800707a:	aa03      	add	r2, sp, #12
 800707c:	4621      	mov	r1, r4
 800707e:	4640      	mov	r0, r8
 8007080:	f7ff fee2 	bl	8006e48 <_printf_common>
 8007084:	3001      	adds	r0, #1
 8007086:	d14c      	bne.n	8007122 <_printf_i+0x1fe>
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	b004      	add	sp, #16
 800708e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007092:	4835      	ldr	r0, [pc, #212]	; (8007168 <_printf_i+0x244>)
 8007094:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007098:	6829      	ldr	r1, [r5, #0]
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	f851 6b04 	ldr.w	r6, [r1], #4
 80070a0:	6029      	str	r1, [r5, #0]
 80070a2:	061d      	lsls	r5, r3, #24
 80070a4:	d514      	bpl.n	80070d0 <_printf_i+0x1ac>
 80070a6:	07df      	lsls	r7, r3, #31
 80070a8:	bf44      	itt	mi
 80070aa:	f043 0320 	orrmi.w	r3, r3, #32
 80070ae:	6023      	strmi	r3, [r4, #0]
 80070b0:	b91e      	cbnz	r6, 80070ba <_printf_i+0x196>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	f023 0320 	bic.w	r3, r3, #32
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	2310      	movs	r3, #16
 80070bc:	e7b0      	b.n	8007020 <_printf_i+0xfc>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	f043 0320 	orr.w	r3, r3, #32
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	2378      	movs	r3, #120	; 0x78
 80070c8:	4828      	ldr	r0, [pc, #160]	; (800716c <_printf_i+0x248>)
 80070ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070ce:	e7e3      	b.n	8007098 <_printf_i+0x174>
 80070d0:	0659      	lsls	r1, r3, #25
 80070d2:	bf48      	it	mi
 80070d4:	b2b6      	uxthmi	r6, r6
 80070d6:	e7e6      	b.n	80070a6 <_printf_i+0x182>
 80070d8:	4615      	mov	r5, r2
 80070da:	e7bb      	b.n	8007054 <_printf_i+0x130>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	6826      	ldr	r6, [r4, #0]
 80070e0:	6961      	ldr	r1, [r4, #20]
 80070e2:	1d18      	adds	r0, r3, #4
 80070e4:	6028      	str	r0, [r5, #0]
 80070e6:	0635      	lsls	r5, r6, #24
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	d501      	bpl.n	80070f0 <_printf_i+0x1cc>
 80070ec:	6019      	str	r1, [r3, #0]
 80070ee:	e002      	b.n	80070f6 <_printf_i+0x1d2>
 80070f0:	0670      	lsls	r0, r6, #25
 80070f2:	d5fb      	bpl.n	80070ec <_printf_i+0x1c8>
 80070f4:	8019      	strh	r1, [r3, #0]
 80070f6:	2300      	movs	r3, #0
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	4615      	mov	r5, r2
 80070fc:	e7ba      	b.n	8007074 <_printf_i+0x150>
 80070fe:	682b      	ldr	r3, [r5, #0]
 8007100:	1d1a      	adds	r2, r3, #4
 8007102:	602a      	str	r2, [r5, #0]
 8007104:	681d      	ldr	r5, [r3, #0]
 8007106:	6862      	ldr	r2, [r4, #4]
 8007108:	2100      	movs	r1, #0
 800710a:	4628      	mov	r0, r5
 800710c:	f7f9 f870 	bl	80001f0 <memchr>
 8007110:	b108      	cbz	r0, 8007116 <_printf_i+0x1f2>
 8007112:	1b40      	subs	r0, r0, r5
 8007114:	6060      	str	r0, [r4, #4]
 8007116:	6863      	ldr	r3, [r4, #4]
 8007118:	6123      	str	r3, [r4, #16]
 800711a:	2300      	movs	r3, #0
 800711c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007120:	e7a8      	b.n	8007074 <_printf_i+0x150>
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	462a      	mov	r2, r5
 8007126:	4649      	mov	r1, r9
 8007128:	4640      	mov	r0, r8
 800712a:	47d0      	blx	sl
 800712c:	3001      	adds	r0, #1
 800712e:	d0ab      	beq.n	8007088 <_printf_i+0x164>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	079b      	lsls	r3, r3, #30
 8007134:	d413      	bmi.n	800715e <_printf_i+0x23a>
 8007136:	68e0      	ldr	r0, [r4, #12]
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	4298      	cmp	r0, r3
 800713c:	bfb8      	it	lt
 800713e:	4618      	movlt	r0, r3
 8007140:	e7a4      	b.n	800708c <_printf_i+0x168>
 8007142:	2301      	movs	r3, #1
 8007144:	4632      	mov	r2, r6
 8007146:	4649      	mov	r1, r9
 8007148:	4640      	mov	r0, r8
 800714a:	47d0      	blx	sl
 800714c:	3001      	adds	r0, #1
 800714e:	d09b      	beq.n	8007088 <_printf_i+0x164>
 8007150:	3501      	adds	r5, #1
 8007152:	68e3      	ldr	r3, [r4, #12]
 8007154:	9903      	ldr	r1, [sp, #12]
 8007156:	1a5b      	subs	r3, r3, r1
 8007158:	42ab      	cmp	r3, r5
 800715a:	dcf2      	bgt.n	8007142 <_printf_i+0x21e>
 800715c:	e7eb      	b.n	8007136 <_printf_i+0x212>
 800715e:	2500      	movs	r5, #0
 8007160:	f104 0619 	add.w	r6, r4, #25
 8007164:	e7f5      	b.n	8007152 <_printf_i+0x22e>
 8007166:	bf00      	nop
 8007168:	0803abae 	.word	0x0803abae
 800716c:	0803abbf 	.word	0x0803abbf

08007170 <iprintf>:
 8007170:	b40f      	push	{r0, r1, r2, r3}
 8007172:	4b0a      	ldr	r3, [pc, #40]	; (800719c <iprintf+0x2c>)
 8007174:	b513      	push	{r0, r1, r4, lr}
 8007176:	681c      	ldr	r4, [r3, #0]
 8007178:	b124      	cbz	r4, 8007184 <iprintf+0x14>
 800717a:	69a3      	ldr	r3, [r4, #24]
 800717c:	b913      	cbnz	r3, 8007184 <iprintf+0x14>
 800717e:	4620      	mov	r0, r4
 8007180:	f000 ff10 	bl	8007fa4 <__sinit>
 8007184:	ab05      	add	r3, sp, #20
 8007186:	9a04      	ldr	r2, [sp, #16]
 8007188:	68a1      	ldr	r1, [r4, #8]
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	4620      	mov	r0, r4
 800718e:	f001 fd09 	bl	8008ba4 <_vfiprintf_r>
 8007192:	b002      	add	sp, #8
 8007194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007198:	b004      	add	sp, #16
 800719a:	4770      	bx	lr
 800719c:	20000950 	.word	0x20000950

080071a0 <_sbrk_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d06      	ldr	r5, [pc, #24]	; (80071bc <_sbrk_r+0x1c>)
 80071a4:	2300      	movs	r3, #0
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	602b      	str	r3, [r5, #0]
 80071ac:	f7fa f8b2 	bl	8001314 <_sbrk>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_sbrk_r+0x1a>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_sbrk_r+0x1a>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	20007590 	.word	0x20007590

080071c0 <siprintf>:
 80071c0:	b40e      	push	{r1, r2, r3}
 80071c2:	b500      	push	{lr}
 80071c4:	b09c      	sub	sp, #112	; 0x70
 80071c6:	ab1d      	add	r3, sp, #116	; 0x74
 80071c8:	9002      	str	r0, [sp, #8]
 80071ca:	9006      	str	r0, [sp, #24]
 80071cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071d0:	4809      	ldr	r0, [pc, #36]	; (80071f8 <siprintf+0x38>)
 80071d2:	9107      	str	r1, [sp, #28]
 80071d4:	9104      	str	r1, [sp, #16]
 80071d6:	4909      	ldr	r1, [pc, #36]	; (80071fc <siprintf+0x3c>)
 80071d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071dc:	9105      	str	r1, [sp, #20]
 80071de:	6800      	ldr	r0, [r0, #0]
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	a902      	add	r1, sp, #8
 80071e4:	f001 fbb4 	bl	8008950 <_svfiprintf_r>
 80071e8:	9b02      	ldr	r3, [sp, #8]
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	b01c      	add	sp, #112	; 0x70
 80071f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f4:	b003      	add	sp, #12
 80071f6:	4770      	bx	lr
 80071f8:	20000950 	.word	0x20000950
 80071fc:	ffff0208 	.word	0xffff0208

08007200 <quorem>:
 8007200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	6903      	ldr	r3, [r0, #16]
 8007206:	690c      	ldr	r4, [r1, #16]
 8007208:	42a3      	cmp	r3, r4
 800720a:	4607      	mov	r7, r0
 800720c:	f2c0 8081 	blt.w	8007312 <quorem+0x112>
 8007210:	3c01      	subs	r4, #1
 8007212:	f101 0814 	add.w	r8, r1, #20
 8007216:	f100 0514 	add.w	r5, r0, #20
 800721a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007224:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007228:	3301      	adds	r3, #1
 800722a:	429a      	cmp	r2, r3
 800722c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007230:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007234:	fbb2 f6f3 	udiv	r6, r2, r3
 8007238:	d331      	bcc.n	800729e <quorem+0x9e>
 800723a:	f04f 0e00 	mov.w	lr, #0
 800723e:	4640      	mov	r0, r8
 8007240:	46ac      	mov	ip, r5
 8007242:	46f2      	mov	sl, lr
 8007244:	f850 2b04 	ldr.w	r2, [r0], #4
 8007248:	b293      	uxth	r3, r2
 800724a:	fb06 e303 	mla	r3, r6, r3, lr
 800724e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007252:	b29b      	uxth	r3, r3
 8007254:	ebaa 0303 	sub.w	r3, sl, r3
 8007258:	f8dc a000 	ldr.w	sl, [ip]
 800725c:	0c12      	lsrs	r2, r2, #16
 800725e:	fa13 f38a 	uxtah	r3, r3, sl
 8007262:	fb06 e202 	mla	r2, r6, r2, lr
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	9b00      	ldr	r3, [sp, #0]
 800726a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800726e:	b292      	uxth	r2, r2
 8007270:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007278:	f8bd 3000 	ldrh.w	r3, [sp]
 800727c:	4581      	cmp	r9, r0
 800727e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007282:	f84c 3b04 	str.w	r3, [ip], #4
 8007286:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800728a:	d2db      	bcs.n	8007244 <quorem+0x44>
 800728c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007290:	b92b      	cbnz	r3, 800729e <quorem+0x9e>
 8007292:	9b01      	ldr	r3, [sp, #4]
 8007294:	3b04      	subs	r3, #4
 8007296:	429d      	cmp	r5, r3
 8007298:	461a      	mov	r2, r3
 800729a:	d32e      	bcc.n	80072fa <quorem+0xfa>
 800729c:	613c      	str	r4, [r7, #16]
 800729e:	4638      	mov	r0, r7
 80072a0:	f001 f9b4 	bl	800860c <__mcmp>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	db24      	blt.n	80072f2 <quorem+0xf2>
 80072a8:	3601      	adds	r6, #1
 80072aa:	4628      	mov	r0, r5
 80072ac:	f04f 0c00 	mov.w	ip, #0
 80072b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80072b4:	f8d0 e000 	ldr.w	lr, [r0]
 80072b8:	b293      	uxth	r3, r2
 80072ba:	ebac 0303 	sub.w	r3, ip, r3
 80072be:	0c12      	lsrs	r2, r2, #16
 80072c0:	fa13 f38e 	uxtah	r3, r3, lr
 80072c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80072c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072d2:	45c1      	cmp	r9, r8
 80072d4:	f840 3b04 	str.w	r3, [r0], #4
 80072d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80072dc:	d2e8      	bcs.n	80072b0 <quorem+0xb0>
 80072de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072e6:	b922      	cbnz	r2, 80072f2 <quorem+0xf2>
 80072e8:	3b04      	subs	r3, #4
 80072ea:	429d      	cmp	r5, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	d30a      	bcc.n	8007306 <quorem+0x106>
 80072f0:	613c      	str	r4, [r7, #16]
 80072f2:	4630      	mov	r0, r6
 80072f4:	b003      	add	sp, #12
 80072f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fa:	6812      	ldr	r2, [r2, #0]
 80072fc:	3b04      	subs	r3, #4
 80072fe:	2a00      	cmp	r2, #0
 8007300:	d1cc      	bne.n	800729c <quorem+0x9c>
 8007302:	3c01      	subs	r4, #1
 8007304:	e7c7      	b.n	8007296 <quorem+0x96>
 8007306:	6812      	ldr	r2, [r2, #0]
 8007308:	3b04      	subs	r3, #4
 800730a:	2a00      	cmp	r2, #0
 800730c:	d1f0      	bne.n	80072f0 <quorem+0xf0>
 800730e:	3c01      	subs	r4, #1
 8007310:	e7eb      	b.n	80072ea <quorem+0xea>
 8007312:	2000      	movs	r0, #0
 8007314:	e7ee      	b.n	80072f4 <quorem+0xf4>
	...

08007318 <_dtoa_r>:
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	ed2d 8b04 	vpush	{d8-d9}
 8007320:	ec57 6b10 	vmov	r6, r7, d0
 8007324:	b093      	sub	sp, #76	; 0x4c
 8007326:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007328:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800732c:	9106      	str	r1, [sp, #24]
 800732e:	ee10 aa10 	vmov	sl, s0
 8007332:	4604      	mov	r4, r0
 8007334:	9209      	str	r2, [sp, #36]	; 0x24
 8007336:	930c      	str	r3, [sp, #48]	; 0x30
 8007338:	46bb      	mov	fp, r7
 800733a:	b975      	cbnz	r5, 800735a <_dtoa_r+0x42>
 800733c:	2010      	movs	r0, #16
 800733e:	f7ff f9af 	bl	80066a0 <malloc>
 8007342:	4602      	mov	r2, r0
 8007344:	6260      	str	r0, [r4, #36]	; 0x24
 8007346:	b920      	cbnz	r0, 8007352 <_dtoa_r+0x3a>
 8007348:	4ba7      	ldr	r3, [pc, #668]	; (80075e8 <_dtoa_r+0x2d0>)
 800734a:	21ea      	movs	r1, #234	; 0xea
 800734c:	48a7      	ldr	r0, [pc, #668]	; (80075ec <_dtoa_r+0x2d4>)
 800734e:	f001 fe6f 	bl	8009030 <__assert_func>
 8007352:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007356:	6005      	str	r5, [r0, #0]
 8007358:	60c5      	str	r5, [r0, #12]
 800735a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800735c:	6819      	ldr	r1, [r3, #0]
 800735e:	b151      	cbz	r1, 8007376 <_dtoa_r+0x5e>
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	604a      	str	r2, [r1, #4]
 8007364:	2301      	movs	r3, #1
 8007366:	4093      	lsls	r3, r2
 8007368:	608b      	str	r3, [r1, #8]
 800736a:	4620      	mov	r0, r4
 800736c:	f000 ff0c 	bl	8008188 <_Bfree>
 8007370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	1e3b      	subs	r3, r7, #0
 8007378:	bfaa      	itet	ge
 800737a:	2300      	movge	r3, #0
 800737c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007380:	f8c8 3000 	strge.w	r3, [r8]
 8007384:	4b9a      	ldr	r3, [pc, #616]	; (80075f0 <_dtoa_r+0x2d8>)
 8007386:	bfbc      	itt	lt
 8007388:	2201      	movlt	r2, #1
 800738a:	f8c8 2000 	strlt.w	r2, [r8]
 800738e:	ea33 030b 	bics.w	r3, r3, fp
 8007392:	d11b      	bne.n	80073cc <_dtoa_r+0xb4>
 8007394:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007396:	f242 730f 	movw	r3, #9999	; 0x270f
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073a0:	4333      	orrs	r3, r6
 80073a2:	f000 8592 	beq.w	8007eca <_dtoa_r+0xbb2>
 80073a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073a8:	b963      	cbnz	r3, 80073c4 <_dtoa_r+0xac>
 80073aa:	4b92      	ldr	r3, [pc, #584]	; (80075f4 <_dtoa_r+0x2dc>)
 80073ac:	e022      	b.n	80073f4 <_dtoa_r+0xdc>
 80073ae:	4b92      	ldr	r3, [pc, #584]	; (80075f8 <_dtoa_r+0x2e0>)
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	3308      	adds	r3, #8
 80073b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	9801      	ldr	r0, [sp, #4]
 80073ba:	b013      	add	sp, #76	; 0x4c
 80073bc:	ecbd 8b04 	vpop	{d8-d9}
 80073c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c4:	4b8b      	ldr	r3, [pc, #556]	; (80075f4 <_dtoa_r+0x2dc>)
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	3303      	adds	r3, #3
 80073ca:	e7f3      	b.n	80073b4 <_dtoa_r+0x9c>
 80073cc:	2200      	movs	r2, #0
 80073ce:	2300      	movs	r3, #0
 80073d0:	4650      	mov	r0, sl
 80073d2:	4659      	mov	r1, fp
 80073d4:	f7f9 fb80 	bl	8000ad8 <__aeabi_dcmpeq>
 80073d8:	ec4b ab19 	vmov	d9, sl, fp
 80073dc:	4680      	mov	r8, r0
 80073de:	b158      	cbz	r0, 80073f8 <_dtoa_r+0xe0>
 80073e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073e2:	2301      	movs	r3, #1
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 856b 	beq.w	8007ec4 <_dtoa_r+0xbac>
 80073ee:	4883      	ldr	r0, [pc, #524]	; (80075fc <_dtoa_r+0x2e4>)
 80073f0:	6018      	str	r0, [r3, #0]
 80073f2:	1e43      	subs	r3, r0, #1
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	e7df      	b.n	80073b8 <_dtoa_r+0xa0>
 80073f8:	ec4b ab10 	vmov	d0, sl, fp
 80073fc:	aa10      	add	r2, sp, #64	; 0x40
 80073fe:	a911      	add	r1, sp, #68	; 0x44
 8007400:	4620      	mov	r0, r4
 8007402:	f001 f9a9 	bl	8008758 <__d2b>
 8007406:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800740a:	ee08 0a10 	vmov	s16, r0
 800740e:	2d00      	cmp	r5, #0
 8007410:	f000 8084 	beq.w	800751c <_dtoa_r+0x204>
 8007414:	ee19 3a90 	vmov	r3, s19
 8007418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800741c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007420:	4656      	mov	r6, sl
 8007422:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007426:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800742a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800742e:	4b74      	ldr	r3, [pc, #464]	; (8007600 <_dtoa_r+0x2e8>)
 8007430:	2200      	movs	r2, #0
 8007432:	4630      	mov	r0, r6
 8007434:	4639      	mov	r1, r7
 8007436:	f7f8 ff2f 	bl	8000298 <__aeabi_dsub>
 800743a:	a365      	add	r3, pc, #404	; (adr r3, 80075d0 <_dtoa_r+0x2b8>)
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f7f9 f8e2 	bl	8000608 <__aeabi_dmul>
 8007444:	a364      	add	r3, pc, #400	; (adr r3, 80075d8 <_dtoa_r+0x2c0>)
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	f7f8 ff27 	bl	800029c <__adddf3>
 800744e:	4606      	mov	r6, r0
 8007450:	4628      	mov	r0, r5
 8007452:	460f      	mov	r7, r1
 8007454:	f7f9 f86e 	bl	8000534 <__aeabi_i2d>
 8007458:	a361      	add	r3, pc, #388	; (adr r3, 80075e0 <_dtoa_r+0x2c8>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	f7f9 f8d3 	bl	8000608 <__aeabi_dmul>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4630      	mov	r0, r6
 8007468:	4639      	mov	r1, r7
 800746a:	f7f8 ff17 	bl	800029c <__adddf3>
 800746e:	4606      	mov	r6, r0
 8007470:	460f      	mov	r7, r1
 8007472:	f7f9 fb79 	bl	8000b68 <__aeabi_d2iz>
 8007476:	2200      	movs	r2, #0
 8007478:	9000      	str	r0, [sp, #0]
 800747a:	2300      	movs	r3, #0
 800747c:	4630      	mov	r0, r6
 800747e:	4639      	mov	r1, r7
 8007480:	f7f9 fb34 	bl	8000aec <__aeabi_dcmplt>
 8007484:	b150      	cbz	r0, 800749c <_dtoa_r+0x184>
 8007486:	9800      	ldr	r0, [sp, #0]
 8007488:	f7f9 f854 	bl	8000534 <__aeabi_i2d>
 800748c:	4632      	mov	r2, r6
 800748e:	463b      	mov	r3, r7
 8007490:	f7f9 fb22 	bl	8000ad8 <__aeabi_dcmpeq>
 8007494:	b910      	cbnz	r0, 800749c <_dtoa_r+0x184>
 8007496:	9b00      	ldr	r3, [sp, #0]
 8007498:	3b01      	subs	r3, #1
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	9b00      	ldr	r3, [sp, #0]
 800749e:	2b16      	cmp	r3, #22
 80074a0:	d85a      	bhi.n	8007558 <_dtoa_r+0x240>
 80074a2:	9a00      	ldr	r2, [sp, #0]
 80074a4:	4b57      	ldr	r3, [pc, #348]	; (8007604 <_dtoa_r+0x2ec>)
 80074a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	ec51 0b19 	vmov	r0, r1, d9
 80074b2:	f7f9 fb1b 	bl	8000aec <__aeabi_dcmplt>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d050      	beq.n	800755c <_dtoa_r+0x244>
 80074ba:	9b00      	ldr	r3, [sp, #0]
 80074bc:	3b01      	subs	r3, #1
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	2300      	movs	r3, #0
 80074c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074c6:	1b5d      	subs	r5, r3, r5
 80074c8:	1e6b      	subs	r3, r5, #1
 80074ca:	9305      	str	r3, [sp, #20]
 80074cc:	bf45      	ittet	mi
 80074ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80074d2:	9304      	strmi	r3, [sp, #16]
 80074d4:	2300      	movpl	r3, #0
 80074d6:	2300      	movmi	r3, #0
 80074d8:	bf4c      	ite	mi
 80074da:	9305      	strmi	r3, [sp, #20]
 80074dc:	9304      	strpl	r3, [sp, #16]
 80074de:	9b00      	ldr	r3, [sp, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	db3d      	blt.n	8007560 <_dtoa_r+0x248>
 80074e4:	9b05      	ldr	r3, [sp, #20]
 80074e6:	9a00      	ldr	r2, [sp, #0]
 80074e8:	920a      	str	r2, [sp, #40]	; 0x28
 80074ea:	4413      	add	r3, r2
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	2300      	movs	r3, #0
 80074f0:	9307      	str	r3, [sp, #28]
 80074f2:	9b06      	ldr	r3, [sp, #24]
 80074f4:	2b09      	cmp	r3, #9
 80074f6:	f200 8089 	bhi.w	800760c <_dtoa_r+0x2f4>
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	bfc4      	itt	gt
 80074fe:	3b04      	subgt	r3, #4
 8007500:	9306      	strgt	r3, [sp, #24]
 8007502:	9b06      	ldr	r3, [sp, #24]
 8007504:	f1a3 0302 	sub.w	r3, r3, #2
 8007508:	bfcc      	ite	gt
 800750a:	2500      	movgt	r5, #0
 800750c:	2501      	movle	r5, #1
 800750e:	2b03      	cmp	r3, #3
 8007510:	f200 8087 	bhi.w	8007622 <_dtoa_r+0x30a>
 8007514:	e8df f003 	tbb	[pc, r3]
 8007518:	59383a2d 	.word	0x59383a2d
 800751c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007520:	441d      	add	r5, r3
 8007522:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007526:	2b20      	cmp	r3, #32
 8007528:	bfc1      	itttt	gt
 800752a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800752e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007532:	fa0b f303 	lslgt.w	r3, fp, r3
 8007536:	fa26 f000 	lsrgt.w	r0, r6, r0
 800753a:	bfda      	itte	le
 800753c:	f1c3 0320 	rsble	r3, r3, #32
 8007540:	fa06 f003 	lslle.w	r0, r6, r3
 8007544:	4318      	orrgt	r0, r3
 8007546:	f7f8 ffe5 	bl	8000514 <__aeabi_ui2d>
 800754a:	2301      	movs	r3, #1
 800754c:	4606      	mov	r6, r0
 800754e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007552:	3d01      	subs	r5, #1
 8007554:	930e      	str	r3, [sp, #56]	; 0x38
 8007556:	e76a      	b.n	800742e <_dtoa_r+0x116>
 8007558:	2301      	movs	r3, #1
 800755a:	e7b2      	b.n	80074c2 <_dtoa_r+0x1aa>
 800755c:	900b      	str	r0, [sp, #44]	; 0x2c
 800755e:	e7b1      	b.n	80074c4 <_dtoa_r+0x1ac>
 8007560:	9b04      	ldr	r3, [sp, #16]
 8007562:	9a00      	ldr	r2, [sp, #0]
 8007564:	1a9b      	subs	r3, r3, r2
 8007566:	9304      	str	r3, [sp, #16]
 8007568:	4253      	negs	r3, r2
 800756a:	9307      	str	r3, [sp, #28]
 800756c:	2300      	movs	r3, #0
 800756e:	930a      	str	r3, [sp, #40]	; 0x28
 8007570:	e7bf      	b.n	80074f2 <_dtoa_r+0x1da>
 8007572:	2300      	movs	r3, #0
 8007574:	9308      	str	r3, [sp, #32]
 8007576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007578:	2b00      	cmp	r3, #0
 800757a:	dc55      	bgt.n	8007628 <_dtoa_r+0x310>
 800757c:	2301      	movs	r3, #1
 800757e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007582:	461a      	mov	r2, r3
 8007584:	9209      	str	r2, [sp, #36]	; 0x24
 8007586:	e00c      	b.n	80075a2 <_dtoa_r+0x28a>
 8007588:	2301      	movs	r3, #1
 800758a:	e7f3      	b.n	8007574 <_dtoa_r+0x25c>
 800758c:	2300      	movs	r3, #0
 800758e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007590:	9308      	str	r3, [sp, #32]
 8007592:	9b00      	ldr	r3, [sp, #0]
 8007594:	4413      	add	r3, r2
 8007596:	9302      	str	r3, [sp, #8]
 8007598:	3301      	adds	r3, #1
 800759a:	2b01      	cmp	r3, #1
 800759c:	9303      	str	r3, [sp, #12]
 800759e:	bfb8      	it	lt
 80075a0:	2301      	movlt	r3, #1
 80075a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80075a4:	2200      	movs	r2, #0
 80075a6:	6042      	str	r2, [r0, #4]
 80075a8:	2204      	movs	r2, #4
 80075aa:	f102 0614 	add.w	r6, r2, #20
 80075ae:	429e      	cmp	r6, r3
 80075b0:	6841      	ldr	r1, [r0, #4]
 80075b2:	d93d      	bls.n	8007630 <_dtoa_r+0x318>
 80075b4:	4620      	mov	r0, r4
 80075b6:	f000 fda7 	bl	8008108 <_Balloc>
 80075ba:	9001      	str	r0, [sp, #4]
 80075bc:	2800      	cmp	r0, #0
 80075be:	d13b      	bne.n	8007638 <_dtoa_r+0x320>
 80075c0:	4b11      	ldr	r3, [pc, #68]	; (8007608 <_dtoa_r+0x2f0>)
 80075c2:	4602      	mov	r2, r0
 80075c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075c8:	e6c0      	b.n	800734c <_dtoa_r+0x34>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e7df      	b.n	800758e <_dtoa_r+0x276>
 80075ce:	bf00      	nop
 80075d0:	636f4361 	.word	0x636f4361
 80075d4:	3fd287a7 	.word	0x3fd287a7
 80075d8:	8b60c8b3 	.word	0x8b60c8b3
 80075dc:	3fc68a28 	.word	0x3fc68a28
 80075e0:	509f79fb 	.word	0x509f79fb
 80075e4:	3fd34413 	.word	0x3fd34413
 80075e8:	0803abdd 	.word	0x0803abdd
 80075ec:	0803abf4 	.word	0x0803abf4
 80075f0:	7ff00000 	.word	0x7ff00000
 80075f4:	0803abd9 	.word	0x0803abd9
 80075f8:	0803abd0 	.word	0x0803abd0
 80075fc:	0803abad 	.word	0x0803abad
 8007600:	3ff80000 	.word	0x3ff80000
 8007604:	0803ad48 	.word	0x0803ad48
 8007608:	0803ac4f 	.word	0x0803ac4f
 800760c:	2501      	movs	r5, #1
 800760e:	2300      	movs	r3, #0
 8007610:	9306      	str	r3, [sp, #24]
 8007612:	9508      	str	r5, [sp, #32]
 8007614:	f04f 33ff 	mov.w	r3, #4294967295
 8007618:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	2312      	movs	r3, #18
 8007620:	e7b0      	b.n	8007584 <_dtoa_r+0x26c>
 8007622:	2301      	movs	r3, #1
 8007624:	9308      	str	r3, [sp, #32]
 8007626:	e7f5      	b.n	8007614 <_dtoa_r+0x2fc>
 8007628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800762e:	e7b8      	b.n	80075a2 <_dtoa_r+0x28a>
 8007630:	3101      	adds	r1, #1
 8007632:	6041      	str	r1, [r0, #4]
 8007634:	0052      	lsls	r2, r2, #1
 8007636:	e7b8      	b.n	80075aa <_dtoa_r+0x292>
 8007638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800763a:	9a01      	ldr	r2, [sp, #4]
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	9b03      	ldr	r3, [sp, #12]
 8007640:	2b0e      	cmp	r3, #14
 8007642:	f200 809d 	bhi.w	8007780 <_dtoa_r+0x468>
 8007646:	2d00      	cmp	r5, #0
 8007648:	f000 809a 	beq.w	8007780 <_dtoa_r+0x468>
 800764c:	9b00      	ldr	r3, [sp, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	dd32      	ble.n	80076b8 <_dtoa_r+0x3a0>
 8007652:	4ab7      	ldr	r2, [pc, #732]	; (8007930 <_dtoa_r+0x618>)
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800765c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007660:	9b00      	ldr	r3, [sp, #0]
 8007662:	05d8      	lsls	r0, r3, #23
 8007664:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007668:	d516      	bpl.n	8007698 <_dtoa_r+0x380>
 800766a:	4bb2      	ldr	r3, [pc, #712]	; (8007934 <_dtoa_r+0x61c>)
 800766c:	ec51 0b19 	vmov	r0, r1, d9
 8007670:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007674:	f7f9 f8f2 	bl	800085c <__aeabi_ddiv>
 8007678:	f007 070f 	and.w	r7, r7, #15
 800767c:	4682      	mov	sl, r0
 800767e:	468b      	mov	fp, r1
 8007680:	2503      	movs	r5, #3
 8007682:	4eac      	ldr	r6, [pc, #688]	; (8007934 <_dtoa_r+0x61c>)
 8007684:	b957      	cbnz	r7, 800769c <_dtoa_r+0x384>
 8007686:	4642      	mov	r2, r8
 8007688:	464b      	mov	r3, r9
 800768a:	4650      	mov	r0, sl
 800768c:	4659      	mov	r1, fp
 800768e:	f7f9 f8e5 	bl	800085c <__aeabi_ddiv>
 8007692:	4682      	mov	sl, r0
 8007694:	468b      	mov	fp, r1
 8007696:	e028      	b.n	80076ea <_dtoa_r+0x3d2>
 8007698:	2502      	movs	r5, #2
 800769a:	e7f2      	b.n	8007682 <_dtoa_r+0x36a>
 800769c:	07f9      	lsls	r1, r7, #31
 800769e:	d508      	bpl.n	80076b2 <_dtoa_r+0x39a>
 80076a0:	4640      	mov	r0, r8
 80076a2:	4649      	mov	r1, r9
 80076a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076a8:	f7f8 ffae 	bl	8000608 <__aeabi_dmul>
 80076ac:	3501      	adds	r5, #1
 80076ae:	4680      	mov	r8, r0
 80076b0:	4689      	mov	r9, r1
 80076b2:	107f      	asrs	r7, r7, #1
 80076b4:	3608      	adds	r6, #8
 80076b6:	e7e5      	b.n	8007684 <_dtoa_r+0x36c>
 80076b8:	f000 809b 	beq.w	80077f2 <_dtoa_r+0x4da>
 80076bc:	9b00      	ldr	r3, [sp, #0]
 80076be:	4f9d      	ldr	r7, [pc, #628]	; (8007934 <_dtoa_r+0x61c>)
 80076c0:	425e      	negs	r6, r3
 80076c2:	4b9b      	ldr	r3, [pc, #620]	; (8007930 <_dtoa_r+0x618>)
 80076c4:	f006 020f 	and.w	r2, r6, #15
 80076c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	ec51 0b19 	vmov	r0, r1, d9
 80076d4:	f7f8 ff98 	bl	8000608 <__aeabi_dmul>
 80076d8:	1136      	asrs	r6, r6, #4
 80076da:	4682      	mov	sl, r0
 80076dc:	468b      	mov	fp, r1
 80076de:	2300      	movs	r3, #0
 80076e0:	2502      	movs	r5, #2
 80076e2:	2e00      	cmp	r6, #0
 80076e4:	d17a      	bne.n	80077dc <_dtoa_r+0x4c4>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1d3      	bne.n	8007692 <_dtoa_r+0x37a>
 80076ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 8082 	beq.w	80077f6 <_dtoa_r+0x4de>
 80076f2:	4b91      	ldr	r3, [pc, #580]	; (8007938 <_dtoa_r+0x620>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	4650      	mov	r0, sl
 80076f8:	4659      	mov	r1, fp
 80076fa:	f7f9 f9f7 	bl	8000aec <__aeabi_dcmplt>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d079      	beq.n	80077f6 <_dtoa_r+0x4de>
 8007702:	9b03      	ldr	r3, [sp, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d076      	beq.n	80077f6 <_dtoa_r+0x4de>
 8007708:	9b02      	ldr	r3, [sp, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	dd36      	ble.n	800777c <_dtoa_r+0x464>
 800770e:	9b00      	ldr	r3, [sp, #0]
 8007710:	4650      	mov	r0, sl
 8007712:	4659      	mov	r1, fp
 8007714:	1e5f      	subs	r7, r3, #1
 8007716:	2200      	movs	r2, #0
 8007718:	4b88      	ldr	r3, [pc, #544]	; (800793c <_dtoa_r+0x624>)
 800771a:	f7f8 ff75 	bl	8000608 <__aeabi_dmul>
 800771e:	9e02      	ldr	r6, [sp, #8]
 8007720:	4682      	mov	sl, r0
 8007722:	468b      	mov	fp, r1
 8007724:	3501      	adds	r5, #1
 8007726:	4628      	mov	r0, r5
 8007728:	f7f8 ff04 	bl	8000534 <__aeabi_i2d>
 800772c:	4652      	mov	r2, sl
 800772e:	465b      	mov	r3, fp
 8007730:	f7f8 ff6a 	bl	8000608 <__aeabi_dmul>
 8007734:	4b82      	ldr	r3, [pc, #520]	; (8007940 <_dtoa_r+0x628>)
 8007736:	2200      	movs	r2, #0
 8007738:	f7f8 fdb0 	bl	800029c <__adddf3>
 800773c:	46d0      	mov	r8, sl
 800773e:	46d9      	mov	r9, fp
 8007740:	4682      	mov	sl, r0
 8007742:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007746:	2e00      	cmp	r6, #0
 8007748:	d158      	bne.n	80077fc <_dtoa_r+0x4e4>
 800774a:	4b7e      	ldr	r3, [pc, #504]	; (8007944 <_dtoa_r+0x62c>)
 800774c:	2200      	movs	r2, #0
 800774e:	4640      	mov	r0, r8
 8007750:	4649      	mov	r1, r9
 8007752:	f7f8 fda1 	bl	8000298 <__aeabi_dsub>
 8007756:	4652      	mov	r2, sl
 8007758:	465b      	mov	r3, fp
 800775a:	4680      	mov	r8, r0
 800775c:	4689      	mov	r9, r1
 800775e:	f7f9 f9e3 	bl	8000b28 <__aeabi_dcmpgt>
 8007762:	2800      	cmp	r0, #0
 8007764:	f040 8295 	bne.w	8007c92 <_dtoa_r+0x97a>
 8007768:	4652      	mov	r2, sl
 800776a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800776e:	4640      	mov	r0, r8
 8007770:	4649      	mov	r1, r9
 8007772:	f7f9 f9bb 	bl	8000aec <__aeabi_dcmplt>
 8007776:	2800      	cmp	r0, #0
 8007778:	f040 8289 	bne.w	8007c8e <_dtoa_r+0x976>
 800777c:	ec5b ab19 	vmov	sl, fp, d9
 8007780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007782:	2b00      	cmp	r3, #0
 8007784:	f2c0 8148 	blt.w	8007a18 <_dtoa_r+0x700>
 8007788:	9a00      	ldr	r2, [sp, #0]
 800778a:	2a0e      	cmp	r2, #14
 800778c:	f300 8144 	bgt.w	8007a18 <_dtoa_r+0x700>
 8007790:	4b67      	ldr	r3, [pc, #412]	; (8007930 <_dtoa_r+0x618>)
 8007792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007796:	e9d3 8900 	ldrd	r8, r9, [r3]
 800779a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	f280 80d5 	bge.w	800794c <_dtoa_r+0x634>
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f300 80d1 	bgt.w	800794c <_dtoa_r+0x634>
 80077aa:	f040 826f 	bne.w	8007c8c <_dtoa_r+0x974>
 80077ae:	4b65      	ldr	r3, [pc, #404]	; (8007944 <_dtoa_r+0x62c>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	4640      	mov	r0, r8
 80077b4:	4649      	mov	r1, r9
 80077b6:	f7f8 ff27 	bl	8000608 <__aeabi_dmul>
 80077ba:	4652      	mov	r2, sl
 80077bc:	465b      	mov	r3, fp
 80077be:	f7f9 f9a9 	bl	8000b14 <__aeabi_dcmpge>
 80077c2:	9e03      	ldr	r6, [sp, #12]
 80077c4:	4637      	mov	r7, r6
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f040 8245 	bne.w	8007c56 <_dtoa_r+0x93e>
 80077cc:	9d01      	ldr	r5, [sp, #4]
 80077ce:	2331      	movs	r3, #49	; 0x31
 80077d0:	f805 3b01 	strb.w	r3, [r5], #1
 80077d4:	9b00      	ldr	r3, [sp, #0]
 80077d6:	3301      	adds	r3, #1
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	e240      	b.n	8007c5e <_dtoa_r+0x946>
 80077dc:	07f2      	lsls	r2, r6, #31
 80077de:	d505      	bpl.n	80077ec <_dtoa_r+0x4d4>
 80077e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077e4:	f7f8 ff10 	bl	8000608 <__aeabi_dmul>
 80077e8:	3501      	adds	r5, #1
 80077ea:	2301      	movs	r3, #1
 80077ec:	1076      	asrs	r6, r6, #1
 80077ee:	3708      	adds	r7, #8
 80077f0:	e777      	b.n	80076e2 <_dtoa_r+0x3ca>
 80077f2:	2502      	movs	r5, #2
 80077f4:	e779      	b.n	80076ea <_dtoa_r+0x3d2>
 80077f6:	9f00      	ldr	r7, [sp, #0]
 80077f8:	9e03      	ldr	r6, [sp, #12]
 80077fa:	e794      	b.n	8007726 <_dtoa_r+0x40e>
 80077fc:	9901      	ldr	r1, [sp, #4]
 80077fe:	4b4c      	ldr	r3, [pc, #304]	; (8007930 <_dtoa_r+0x618>)
 8007800:	4431      	add	r1, r6
 8007802:	910d      	str	r1, [sp, #52]	; 0x34
 8007804:	9908      	ldr	r1, [sp, #32]
 8007806:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800780a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800780e:	2900      	cmp	r1, #0
 8007810:	d043      	beq.n	800789a <_dtoa_r+0x582>
 8007812:	494d      	ldr	r1, [pc, #308]	; (8007948 <_dtoa_r+0x630>)
 8007814:	2000      	movs	r0, #0
 8007816:	f7f9 f821 	bl	800085c <__aeabi_ddiv>
 800781a:	4652      	mov	r2, sl
 800781c:	465b      	mov	r3, fp
 800781e:	f7f8 fd3b 	bl	8000298 <__aeabi_dsub>
 8007822:	9d01      	ldr	r5, [sp, #4]
 8007824:	4682      	mov	sl, r0
 8007826:	468b      	mov	fp, r1
 8007828:	4649      	mov	r1, r9
 800782a:	4640      	mov	r0, r8
 800782c:	f7f9 f99c 	bl	8000b68 <__aeabi_d2iz>
 8007830:	4606      	mov	r6, r0
 8007832:	f7f8 fe7f 	bl	8000534 <__aeabi_i2d>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4640      	mov	r0, r8
 800783c:	4649      	mov	r1, r9
 800783e:	f7f8 fd2b 	bl	8000298 <__aeabi_dsub>
 8007842:	3630      	adds	r6, #48	; 0x30
 8007844:	f805 6b01 	strb.w	r6, [r5], #1
 8007848:	4652      	mov	r2, sl
 800784a:	465b      	mov	r3, fp
 800784c:	4680      	mov	r8, r0
 800784e:	4689      	mov	r9, r1
 8007850:	f7f9 f94c 	bl	8000aec <__aeabi_dcmplt>
 8007854:	2800      	cmp	r0, #0
 8007856:	d163      	bne.n	8007920 <_dtoa_r+0x608>
 8007858:	4642      	mov	r2, r8
 800785a:	464b      	mov	r3, r9
 800785c:	4936      	ldr	r1, [pc, #216]	; (8007938 <_dtoa_r+0x620>)
 800785e:	2000      	movs	r0, #0
 8007860:	f7f8 fd1a 	bl	8000298 <__aeabi_dsub>
 8007864:	4652      	mov	r2, sl
 8007866:	465b      	mov	r3, fp
 8007868:	f7f9 f940 	bl	8000aec <__aeabi_dcmplt>
 800786c:	2800      	cmp	r0, #0
 800786e:	f040 80b5 	bne.w	80079dc <_dtoa_r+0x6c4>
 8007872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007874:	429d      	cmp	r5, r3
 8007876:	d081      	beq.n	800777c <_dtoa_r+0x464>
 8007878:	4b30      	ldr	r3, [pc, #192]	; (800793c <_dtoa_r+0x624>)
 800787a:	2200      	movs	r2, #0
 800787c:	4650      	mov	r0, sl
 800787e:	4659      	mov	r1, fp
 8007880:	f7f8 fec2 	bl	8000608 <__aeabi_dmul>
 8007884:	4b2d      	ldr	r3, [pc, #180]	; (800793c <_dtoa_r+0x624>)
 8007886:	4682      	mov	sl, r0
 8007888:	468b      	mov	fp, r1
 800788a:	4640      	mov	r0, r8
 800788c:	4649      	mov	r1, r9
 800788e:	2200      	movs	r2, #0
 8007890:	f7f8 feba 	bl	8000608 <__aeabi_dmul>
 8007894:	4680      	mov	r8, r0
 8007896:	4689      	mov	r9, r1
 8007898:	e7c6      	b.n	8007828 <_dtoa_r+0x510>
 800789a:	4650      	mov	r0, sl
 800789c:	4659      	mov	r1, fp
 800789e:	f7f8 feb3 	bl	8000608 <__aeabi_dmul>
 80078a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078a4:	9d01      	ldr	r5, [sp, #4]
 80078a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078a8:	4682      	mov	sl, r0
 80078aa:	468b      	mov	fp, r1
 80078ac:	4649      	mov	r1, r9
 80078ae:	4640      	mov	r0, r8
 80078b0:	f7f9 f95a 	bl	8000b68 <__aeabi_d2iz>
 80078b4:	4606      	mov	r6, r0
 80078b6:	f7f8 fe3d 	bl	8000534 <__aeabi_i2d>
 80078ba:	3630      	adds	r6, #48	; 0x30
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	f7f8 fce8 	bl	8000298 <__aeabi_dsub>
 80078c8:	f805 6b01 	strb.w	r6, [r5], #1
 80078cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ce:	429d      	cmp	r5, r3
 80078d0:	4680      	mov	r8, r0
 80078d2:	4689      	mov	r9, r1
 80078d4:	f04f 0200 	mov.w	r2, #0
 80078d8:	d124      	bne.n	8007924 <_dtoa_r+0x60c>
 80078da:	4b1b      	ldr	r3, [pc, #108]	; (8007948 <_dtoa_r+0x630>)
 80078dc:	4650      	mov	r0, sl
 80078de:	4659      	mov	r1, fp
 80078e0:	f7f8 fcdc 	bl	800029c <__adddf3>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	4640      	mov	r0, r8
 80078ea:	4649      	mov	r1, r9
 80078ec:	f7f9 f91c 	bl	8000b28 <__aeabi_dcmpgt>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d173      	bne.n	80079dc <_dtoa_r+0x6c4>
 80078f4:	4652      	mov	r2, sl
 80078f6:	465b      	mov	r3, fp
 80078f8:	4913      	ldr	r1, [pc, #76]	; (8007948 <_dtoa_r+0x630>)
 80078fa:	2000      	movs	r0, #0
 80078fc:	f7f8 fccc 	bl	8000298 <__aeabi_dsub>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4640      	mov	r0, r8
 8007906:	4649      	mov	r1, r9
 8007908:	f7f9 f8f0 	bl	8000aec <__aeabi_dcmplt>
 800790c:	2800      	cmp	r0, #0
 800790e:	f43f af35 	beq.w	800777c <_dtoa_r+0x464>
 8007912:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007914:	1e6b      	subs	r3, r5, #1
 8007916:	930f      	str	r3, [sp, #60]	; 0x3c
 8007918:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800791c:	2b30      	cmp	r3, #48	; 0x30
 800791e:	d0f8      	beq.n	8007912 <_dtoa_r+0x5fa>
 8007920:	9700      	str	r7, [sp, #0]
 8007922:	e049      	b.n	80079b8 <_dtoa_r+0x6a0>
 8007924:	4b05      	ldr	r3, [pc, #20]	; (800793c <_dtoa_r+0x624>)
 8007926:	f7f8 fe6f 	bl	8000608 <__aeabi_dmul>
 800792a:	4680      	mov	r8, r0
 800792c:	4689      	mov	r9, r1
 800792e:	e7bd      	b.n	80078ac <_dtoa_r+0x594>
 8007930:	0803ad48 	.word	0x0803ad48
 8007934:	0803ad20 	.word	0x0803ad20
 8007938:	3ff00000 	.word	0x3ff00000
 800793c:	40240000 	.word	0x40240000
 8007940:	401c0000 	.word	0x401c0000
 8007944:	40140000 	.word	0x40140000
 8007948:	3fe00000 	.word	0x3fe00000
 800794c:	9d01      	ldr	r5, [sp, #4]
 800794e:	4656      	mov	r6, sl
 8007950:	465f      	mov	r7, fp
 8007952:	4642      	mov	r2, r8
 8007954:	464b      	mov	r3, r9
 8007956:	4630      	mov	r0, r6
 8007958:	4639      	mov	r1, r7
 800795a:	f7f8 ff7f 	bl	800085c <__aeabi_ddiv>
 800795e:	f7f9 f903 	bl	8000b68 <__aeabi_d2iz>
 8007962:	4682      	mov	sl, r0
 8007964:	f7f8 fde6 	bl	8000534 <__aeabi_i2d>
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	f7f8 fe4c 	bl	8000608 <__aeabi_dmul>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4630      	mov	r0, r6
 8007976:	4639      	mov	r1, r7
 8007978:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800797c:	f7f8 fc8c 	bl	8000298 <__aeabi_dsub>
 8007980:	f805 6b01 	strb.w	r6, [r5], #1
 8007984:	9e01      	ldr	r6, [sp, #4]
 8007986:	9f03      	ldr	r7, [sp, #12]
 8007988:	1bae      	subs	r6, r5, r6
 800798a:	42b7      	cmp	r7, r6
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	d135      	bne.n	80079fe <_dtoa_r+0x6e6>
 8007992:	f7f8 fc83 	bl	800029c <__adddf3>
 8007996:	4642      	mov	r2, r8
 8007998:	464b      	mov	r3, r9
 800799a:	4606      	mov	r6, r0
 800799c:	460f      	mov	r7, r1
 800799e:	f7f9 f8c3 	bl	8000b28 <__aeabi_dcmpgt>
 80079a2:	b9d0      	cbnz	r0, 80079da <_dtoa_r+0x6c2>
 80079a4:	4642      	mov	r2, r8
 80079a6:	464b      	mov	r3, r9
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f9 f894 	bl	8000ad8 <__aeabi_dcmpeq>
 80079b0:	b110      	cbz	r0, 80079b8 <_dtoa_r+0x6a0>
 80079b2:	f01a 0f01 	tst.w	sl, #1
 80079b6:	d110      	bne.n	80079da <_dtoa_r+0x6c2>
 80079b8:	4620      	mov	r0, r4
 80079ba:	ee18 1a10 	vmov	r1, s16
 80079be:	f000 fbe3 	bl	8008188 <_Bfree>
 80079c2:	2300      	movs	r3, #0
 80079c4:	9800      	ldr	r0, [sp, #0]
 80079c6:	702b      	strb	r3, [r5, #0]
 80079c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079ca:	3001      	adds	r0, #1
 80079cc:	6018      	str	r0, [r3, #0]
 80079ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f43f acf1 	beq.w	80073b8 <_dtoa_r+0xa0>
 80079d6:	601d      	str	r5, [r3, #0]
 80079d8:	e4ee      	b.n	80073b8 <_dtoa_r+0xa0>
 80079da:	9f00      	ldr	r7, [sp, #0]
 80079dc:	462b      	mov	r3, r5
 80079de:	461d      	mov	r5, r3
 80079e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079e4:	2a39      	cmp	r2, #57	; 0x39
 80079e6:	d106      	bne.n	80079f6 <_dtoa_r+0x6de>
 80079e8:	9a01      	ldr	r2, [sp, #4]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d1f7      	bne.n	80079de <_dtoa_r+0x6c6>
 80079ee:	9901      	ldr	r1, [sp, #4]
 80079f0:	2230      	movs	r2, #48	; 0x30
 80079f2:	3701      	adds	r7, #1
 80079f4:	700a      	strb	r2, [r1, #0]
 80079f6:	781a      	ldrb	r2, [r3, #0]
 80079f8:	3201      	adds	r2, #1
 80079fa:	701a      	strb	r2, [r3, #0]
 80079fc:	e790      	b.n	8007920 <_dtoa_r+0x608>
 80079fe:	4ba6      	ldr	r3, [pc, #664]	; (8007c98 <_dtoa_r+0x980>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	f7f8 fe01 	bl	8000608 <__aeabi_dmul>
 8007a06:	2200      	movs	r2, #0
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460f      	mov	r7, r1
 8007a0e:	f7f9 f863 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d09d      	beq.n	8007952 <_dtoa_r+0x63a>
 8007a16:	e7cf      	b.n	80079b8 <_dtoa_r+0x6a0>
 8007a18:	9a08      	ldr	r2, [sp, #32]
 8007a1a:	2a00      	cmp	r2, #0
 8007a1c:	f000 80d7 	beq.w	8007bce <_dtoa_r+0x8b6>
 8007a20:	9a06      	ldr	r2, [sp, #24]
 8007a22:	2a01      	cmp	r2, #1
 8007a24:	f300 80ba 	bgt.w	8007b9c <_dtoa_r+0x884>
 8007a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	f000 80b2 	beq.w	8007b94 <_dtoa_r+0x87c>
 8007a30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a34:	9e07      	ldr	r6, [sp, #28]
 8007a36:	9d04      	ldr	r5, [sp, #16]
 8007a38:	9a04      	ldr	r2, [sp, #16]
 8007a3a:	441a      	add	r2, r3
 8007a3c:	9204      	str	r2, [sp, #16]
 8007a3e:	9a05      	ldr	r2, [sp, #20]
 8007a40:	2101      	movs	r1, #1
 8007a42:	441a      	add	r2, r3
 8007a44:	4620      	mov	r0, r4
 8007a46:	9205      	str	r2, [sp, #20]
 8007a48:	f000 fc56 	bl	80082f8 <__i2b>
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	2d00      	cmp	r5, #0
 8007a50:	dd0c      	ble.n	8007a6c <_dtoa_r+0x754>
 8007a52:	9b05      	ldr	r3, [sp, #20]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	dd09      	ble.n	8007a6c <_dtoa_r+0x754>
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	9a04      	ldr	r2, [sp, #16]
 8007a5c:	bfa8      	it	ge
 8007a5e:	462b      	movge	r3, r5
 8007a60:	1ad2      	subs	r2, r2, r3
 8007a62:	9204      	str	r2, [sp, #16]
 8007a64:	9a05      	ldr	r2, [sp, #20]
 8007a66:	1aed      	subs	r5, r5, r3
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	9305      	str	r3, [sp, #20]
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	b31b      	cbz	r3, 8007ab8 <_dtoa_r+0x7a0>
 8007a70:	9b08      	ldr	r3, [sp, #32]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 80af 	beq.w	8007bd6 <_dtoa_r+0x8be>
 8007a78:	2e00      	cmp	r6, #0
 8007a7a:	dd13      	ble.n	8007aa4 <_dtoa_r+0x78c>
 8007a7c:	4639      	mov	r1, r7
 8007a7e:	4632      	mov	r2, r6
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fcf9 	bl	8008478 <__pow5mult>
 8007a86:	ee18 2a10 	vmov	r2, s16
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 fc48 	bl	8008324 <__multiply>
 8007a94:	ee18 1a10 	vmov	r1, s16
 8007a98:	4680      	mov	r8, r0
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f000 fb74 	bl	8008188 <_Bfree>
 8007aa0:	ee08 8a10 	vmov	s16, r8
 8007aa4:	9b07      	ldr	r3, [sp, #28]
 8007aa6:	1b9a      	subs	r2, r3, r6
 8007aa8:	d006      	beq.n	8007ab8 <_dtoa_r+0x7a0>
 8007aaa:	ee18 1a10 	vmov	r1, s16
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 fce2 	bl	8008478 <__pow5mult>
 8007ab4:	ee08 0a10 	vmov	s16, r0
 8007ab8:	2101      	movs	r1, #1
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 fc1c 	bl	80082f8 <__i2b>
 8007ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	f340 8088 	ble.w	8007bda <_dtoa_r+0x8c2>
 8007aca:	461a      	mov	r2, r3
 8007acc:	4601      	mov	r1, r0
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 fcd2 	bl	8008478 <__pow5mult>
 8007ad4:	9b06      	ldr	r3, [sp, #24]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	4606      	mov	r6, r0
 8007ada:	f340 8081 	ble.w	8007be0 <_dtoa_r+0x8c8>
 8007ade:	f04f 0800 	mov.w	r8, #0
 8007ae2:	6933      	ldr	r3, [r6, #16]
 8007ae4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ae8:	6918      	ldr	r0, [r3, #16]
 8007aea:	f000 fbb5 	bl	8008258 <__hi0bits>
 8007aee:	f1c0 0020 	rsb	r0, r0, #32
 8007af2:	9b05      	ldr	r3, [sp, #20]
 8007af4:	4418      	add	r0, r3
 8007af6:	f010 001f 	ands.w	r0, r0, #31
 8007afa:	f000 8092 	beq.w	8007c22 <_dtoa_r+0x90a>
 8007afe:	f1c0 0320 	rsb	r3, r0, #32
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	f340 808a 	ble.w	8007c1c <_dtoa_r+0x904>
 8007b08:	f1c0 001c 	rsb	r0, r0, #28
 8007b0c:	9b04      	ldr	r3, [sp, #16]
 8007b0e:	4403      	add	r3, r0
 8007b10:	9304      	str	r3, [sp, #16]
 8007b12:	9b05      	ldr	r3, [sp, #20]
 8007b14:	4403      	add	r3, r0
 8007b16:	4405      	add	r5, r0
 8007b18:	9305      	str	r3, [sp, #20]
 8007b1a:	9b04      	ldr	r3, [sp, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	dd07      	ble.n	8007b30 <_dtoa_r+0x818>
 8007b20:	ee18 1a10 	vmov	r1, s16
 8007b24:	461a      	mov	r2, r3
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 fd00 	bl	800852c <__lshift>
 8007b2c:	ee08 0a10 	vmov	s16, r0
 8007b30:	9b05      	ldr	r3, [sp, #20]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	dd05      	ble.n	8007b42 <_dtoa_r+0x82a>
 8007b36:	4631      	mov	r1, r6
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f000 fcf6 	bl	800852c <__lshift>
 8007b40:	4606      	mov	r6, r0
 8007b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d06e      	beq.n	8007c26 <_dtoa_r+0x90e>
 8007b48:	ee18 0a10 	vmov	r0, s16
 8007b4c:	4631      	mov	r1, r6
 8007b4e:	f000 fd5d 	bl	800860c <__mcmp>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	da67      	bge.n	8007c26 <_dtoa_r+0x90e>
 8007b56:	9b00      	ldr	r3, [sp, #0]
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	ee18 1a10 	vmov	r1, s16
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	220a      	movs	r2, #10
 8007b62:	2300      	movs	r3, #0
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 fb31 	bl	80081cc <__multadd>
 8007b6a:	9b08      	ldr	r3, [sp, #32]
 8007b6c:	ee08 0a10 	vmov	s16, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 81b1 	beq.w	8007ed8 <_dtoa_r+0xbc0>
 8007b76:	2300      	movs	r3, #0
 8007b78:	4639      	mov	r1, r7
 8007b7a:	220a      	movs	r2, #10
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f000 fb25 	bl	80081cc <__multadd>
 8007b82:	9b02      	ldr	r3, [sp, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	4607      	mov	r7, r0
 8007b88:	f300 808e 	bgt.w	8007ca8 <_dtoa_r+0x990>
 8007b8c:	9b06      	ldr	r3, [sp, #24]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	dc51      	bgt.n	8007c36 <_dtoa_r+0x91e>
 8007b92:	e089      	b.n	8007ca8 <_dtoa_r+0x990>
 8007b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b9a:	e74b      	b.n	8007a34 <_dtoa_r+0x71c>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	1e5e      	subs	r6, r3, #1
 8007ba0:	9b07      	ldr	r3, [sp, #28]
 8007ba2:	42b3      	cmp	r3, r6
 8007ba4:	bfbf      	itttt	lt
 8007ba6:	9b07      	ldrlt	r3, [sp, #28]
 8007ba8:	9607      	strlt	r6, [sp, #28]
 8007baa:	1af2      	sublt	r2, r6, r3
 8007bac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007bae:	bfb6      	itet	lt
 8007bb0:	189b      	addlt	r3, r3, r2
 8007bb2:	1b9e      	subge	r6, r3, r6
 8007bb4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	bfb8      	it	lt
 8007bba:	2600      	movlt	r6, #0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bfb7      	itett	lt
 8007bc0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007bc4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007bc8:	1a9d      	sublt	r5, r3, r2
 8007bca:	2300      	movlt	r3, #0
 8007bcc:	e734      	b.n	8007a38 <_dtoa_r+0x720>
 8007bce:	9e07      	ldr	r6, [sp, #28]
 8007bd0:	9d04      	ldr	r5, [sp, #16]
 8007bd2:	9f08      	ldr	r7, [sp, #32]
 8007bd4:	e73b      	b.n	8007a4e <_dtoa_r+0x736>
 8007bd6:	9a07      	ldr	r2, [sp, #28]
 8007bd8:	e767      	b.n	8007aaa <_dtoa_r+0x792>
 8007bda:	9b06      	ldr	r3, [sp, #24]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	dc18      	bgt.n	8007c12 <_dtoa_r+0x8fa>
 8007be0:	f1ba 0f00 	cmp.w	sl, #0
 8007be4:	d115      	bne.n	8007c12 <_dtoa_r+0x8fa>
 8007be6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bea:	b993      	cbnz	r3, 8007c12 <_dtoa_r+0x8fa>
 8007bec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bf0:	0d1b      	lsrs	r3, r3, #20
 8007bf2:	051b      	lsls	r3, r3, #20
 8007bf4:	b183      	cbz	r3, 8007c18 <_dtoa_r+0x900>
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	9b05      	ldr	r3, [sp, #20]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	9305      	str	r3, [sp, #20]
 8007c02:	f04f 0801 	mov.w	r8, #1
 8007c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f47f af6a 	bne.w	8007ae2 <_dtoa_r+0x7ca>
 8007c0e:	2001      	movs	r0, #1
 8007c10:	e76f      	b.n	8007af2 <_dtoa_r+0x7da>
 8007c12:	f04f 0800 	mov.w	r8, #0
 8007c16:	e7f6      	b.n	8007c06 <_dtoa_r+0x8ee>
 8007c18:	4698      	mov	r8, r3
 8007c1a:	e7f4      	b.n	8007c06 <_dtoa_r+0x8ee>
 8007c1c:	f43f af7d 	beq.w	8007b1a <_dtoa_r+0x802>
 8007c20:	4618      	mov	r0, r3
 8007c22:	301c      	adds	r0, #28
 8007c24:	e772      	b.n	8007b0c <_dtoa_r+0x7f4>
 8007c26:	9b03      	ldr	r3, [sp, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	dc37      	bgt.n	8007c9c <_dtoa_r+0x984>
 8007c2c:	9b06      	ldr	r3, [sp, #24]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	dd34      	ble.n	8007c9c <_dtoa_r+0x984>
 8007c32:	9b03      	ldr	r3, [sp, #12]
 8007c34:	9302      	str	r3, [sp, #8]
 8007c36:	9b02      	ldr	r3, [sp, #8]
 8007c38:	b96b      	cbnz	r3, 8007c56 <_dtoa_r+0x93e>
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	2205      	movs	r2, #5
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 fac4 	bl	80081cc <__multadd>
 8007c44:	4601      	mov	r1, r0
 8007c46:	4606      	mov	r6, r0
 8007c48:	ee18 0a10 	vmov	r0, s16
 8007c4c:	f000 fcde 	bl	800860c <__mcmp>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	f73f adbb 	bgt.w	80077cc <_dtoa_r+0x4b4>
 8007c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c58:	9d01      	ldr	r5, [sp, #4]
 8007c5a:	43db      	mvns	r3, r3
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	f04f 0800 	mov.w	r8, #0
 8007c62:	4631      	mov	r1, r6
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 fa8f 	bl	8008188 <_Bfree>
 8007c6a:	2f00      	cmp	r7, #0
 8007c6c:	f43f aea4 	beq.w	80079b8 <_dtoa_r+0x6a0>
 8007c70:	f1b8 0f00 	cmp.w	r8, #0
 8007c74:	d005      	beq.n	8007c82 <_dtoa_r+0x96a>
 8007c76:	45b8      	cmp	r8, r7
 8007c78:	d003      	beq.n	8007c82 <_dtoa_r+0x96a>
 8007c7a:	4641      	mov	r1, r8
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f000 fa83 	bl	8008188 <_Bfree>
 8007c82:	4639      	mov	r1, r7
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 fa7f 	bl	8008188 <_Bfree>
 8007c8a:	e695      	b.n	80079b8 <_dtoa_r+0x6a0>
 8007c8c:	2600      	movs	r6, #0
 8007c8e:	4637      	mov	r7, r6
 8007c90:	e7e1      	b.n	8007c56 <_dtoa_r+0x93e>
 8007c92:	9700      	str	r7, [sp, #0]
 8007c94:	4637      	mov	r7, r6
 8007c96:	e599      	b.n	80077cc <_dtoa_r+0x4b4>
 8007c98:	40240000 	.word	0x40240000
 8007c9c:	9b08      	ldr	r3, [sp, #32]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 80ca 	beq.w	8007e38 <_dtoa_r+0xb20>
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	9302      	str	r3, [sp, #8]
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	dd05      	ble.n	8007cb8 <_dtoa_r+0x9a0>
 8007cac:	4639      	mov	r1, r7
 8007cae:	462a      	mov	r2, r5
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f000 fc3b 	bl	800852c <__lshift>
 8007cb6:	4607      	mov	r7, r0
 8007cb8:	f1b8 0f00 	cmp.w	r8, #0
 8007cbc:	d05b      	beq.n	8007d76 <_dtoa_r+0xa5e>
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 fa21 	bl	8008108 <_Balloc>
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	b928      	cbnz	r0, 8007cd6 <_dtoa_r+0x9be>
 8007cca:	4b87      	ldr	r3, [pc, #540]	; (8007ee8 <_dtoa_r+0xbd0>)
 8007ccc:	4602      	mov	r2, r0
 8007cce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007cd2:	f7ff bb3b 	b.w	800734c <_dtoa_r+0x34>
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	3202      	adds	r2, #2
 8007cda:	0092      	lsls	r2, r2, #2
 8007cdc:	f107 010c 	add.w	r1, r7, #12
 8007ce0:	300c      	adds	r0, #12
 8007ce2:	f7fe fce5 	bl	80066b0 <memcpy>
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 fc1e 	bl	800852c <__lshift>
 8007cf0:	9b01      	ldr	r3, [sp, #4]
 8007cf2:	f103 0901 	add.w	r9, r3, #1
 8007cf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	9305      	str	r3, [sp, #20]
 8007cfe:	f00a 0301 	and.w	r3, sl, #1
 8007d02:	46b8      	mov	r8, r7
 8007d04:	9304      	str	r3, [sp, #16]
 8007d06:	4607      	mov	r7, r0
 8007d08:	4631      	mov	r1, r6
 8007d0a:	ee18 0a10 	vmov	r0, s16
 8007d0e:	f7ff fa77 	bl	8007200 <quorem>
 8007d12:	4641      	mov	r1, r8
 8007d14:	9002      	str	r0, [sp, #8]
 8007d16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d1a:	ee18 0a10 	vmov	r0, s16
 8007d1e:	f000 fc75 	bl	800860c <__mcmp>
 8007d22:	463a      	mov	r2, r7
 8007d24:	9003      	str	r0, [sp, #12]
 8007d26:	4631      	mov	r1, r6
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 fc8b 	bl	8008644 <__mdiff>
 8007d2e:	68c2      	ldr	r2, [r0, #12]
 8007d30:	f109 3bff 	add.w	fp, r9, #4294967295
 8007d34:	4605      	mov	r5, r0
 8007d36:	bb02      	cbnz	r2, 8007d7a <_dtoa_r+0xa62>
 8007d38:	4601      	mov	r1, r0
 8007d3a:	ee18 0a10 	vmov	r0, s16
 8007d3e:	f000 fc65 	bl	800860c <__mcmp>
 8007d42:	4602      	mov	r2, r0
 8007d44:	4629      	mov	r1, r5
 8007d46:	4620      	mov	r0, r4
 8007d48:	9207      	str	r2, [sp, #28]
 8007d4a:	f000 fa1d 	bl	8008188 <_Bfree>
 8007d4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007d52:	ea43 0102 	orr.w	r1, r3, r2
 8007d56:	9b04      	ldr	r3, [sp, #16]
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	464d      	mov	r5, r9
 8007d5c:	d10f      	bne.n	8007d7e <_dtoa_r+0xa66>
 8007d5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d62:	d02a      	beq.n	8007dba <_dtoa_r+0xaa2>
 8007d64:	9b03      	ldr	r3, [sp, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	dd02      	ble.n	8007d70 <_dtoa_r+0xa58>
 8007d6a:	9b02      	ldr	r3, [sp, #8]
 8007d6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007d70:	f88b a000 	strb.w	sl, [fp]
 8007d74:	e775      	b.n	8007c62 <_dtoa_r+0x94a>
 8007d76:	4638      	mov	r0, r7
 8007d78:	e7ba      	b.n	8007cf0 <_dtoa_r+0x9d8>
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	e7e2      	b.n	8007d44 <_dtoa_r+0xa2c>
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	db04      	blt.n	8007d8e <_dtoa_r+0xa76>
 8007d84:	9906      	ldr	r1, [sp, #24]
 8007d86:	430b      	orrs	r3, r1
 8007d88:	9904      	ldr	r1, [sp, #16]
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	d122      	bne.n	8007dd4 <_dtoa_r+0xabc>
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	ddee      	ble.n	8007d70 <_dtoa_r+0xa58>
 8007d92:	ee18 1a10 	vmov	r1, s16
 8007d96:	2201      	movs	r2, #1
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f000 fbc7 	bl	800852c <__lshift>
 8007d9e:	4631      	mov	r1, r6
 8007da0:	ee08 0a10 	vmov	s16, r0
 8007da4:	f000 fc32 	bl	800860c <__mcmp>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	dc03      	bgt.n	8007db4 <_dtoa_r+0xa9c>
 8007dac:	d1e0      	bne.n	8007d70 <_dtoa_r+0xa58>
 8007dae:	f01a 0f01 	tst.w	sl, #1
 8007db2:	d0dd      	beq.n	8007d70 <_dtoa_r+0xa58>
 8007db4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007db8:	d1d7      	bne.n	8007d6a <_dtoa_r+0xa52>
 8007dba:	2339      	movs	r3, #57	; 0x39
 8007dbc:	f88b 3000 	strb.w	r3, [fp]
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	461d      	mov	r5, r3
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007dca:	2a39      	cmp	r2, #57	; 0x39
 8007dcc:	d071      	beq.n	8007eb2 <_dtoa_r+0xb9a>
 8007dce:	3201      	adds	r2, #1
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	e746      	b.n	8007c62 <_dtoa_r+0x94a>
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	dd07      	ble.n	8007de8 <_dtoa_r+0xad0>
 8007dd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ddc:	d0ed      	beq.n	8007dba <_dtoa_r+0xaa2>
 8007dde:	f10a 0301 	add.w	r3, sl, #1
 8007de2:	f88b 3000 	strb.w	r3, [fp]
 8007de6:	e73c      	b.n	8007c62 <_dtoa_r+0x94a>
 8007de8:	9b05      	ldr	r3, [sp, #20]
 8007dea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007dee:	4599      	cmp	r9, r3
 8007df0:	d047      	beq.n	8007e82 <_dtoa_r+0xb6a>
 8007df2:	ee18 1a10 	vmov	r1, s16
 8007df6:	2300      	movs	r3, #0
 8007df8:	220a      	movs	r2, #10
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 f9e6 	bl	80081cc <__multadd>
 8007e00:	45b8      	cmp	r8, r7
 8007e02:	ee08 0a10 	vmov	s16, r0
 8007e06:	f04f 0300 	mov.w	r3, #0
 8007e0a:	f04f 020a 	mov.w	r2, #10
 8007e0e:	4641      	mov	r1, r8
 8007e10:	4620      	mov	r0, r4
 8007e12:	d106      	bne.n	8007e22 <_dtoa_r+0xb0a>
 8007e14:	f000 f9da 	bl	80081cc <__multadd>
 8007e18:	4680      	mov	r8, r0
 8007e1a:	4607      	mov	r7, r0
 8007e1c:	f109 0901 	add.w	r9, r9, #1
 8007e20:	e772      	b.n	8007d08 <_dtoa_r+0x9f0>
 8007e22:	f000 f9d3 	bl	80081cc <__multadd>
 8007e26:	4639      	mov	r1, r7
 8007e28:	4680      	mov	r8, r0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	220a      	movs	r2, #10
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 f9cc 	bl	80081cc <__multadd>
 8007e34:	4607      	mov	r7, r0
 8007e36:	e7f1      	b.n	8007e1c <_dtoa_r+0xb04>
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	9302      	str	r3, [sp, #8]
 8007e3c:	9d01      	ldr	r5, [sp, #4]
 8007e3e:	ee18 0a10 	vmov	r0, s16
 8007e42:	4631      	mov	r1, r6
 8007e44:	f7ff f9dc 	bl	8007200 <quorem>
 8007e48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e4c:	9b01      	ldr	r3, [sp, #4]
 8007e4e:	f805 ab01 	strb.w	sl, [r5], #1
 8007e52:	1aea      	subs	r2, r5, r3
 8007e54:	9b02      	ldr	r3, [sp, #8]
 8007e56:	4293      	cmp	r3, r2
 8007e58:	dd09      	ble.n	8007e6e <_dtoa_r+0xb56>
 8007e5a:	ee18 1a10 	vmov	r1, s16
 8007e5e:	2300      	movs	r3, #0
 8007e60:	220a      	movs	r2, #10
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 f9b2 	bl	80081cc <__multadd>
 8007e68:	ee08 0a10 	vmov	s16, r0
 8007e6c:	e7e7      	b.n	8007e3e <_dtoa_r+0xb26>
 8007e6e:	9b02      	ldr	r3, [sp, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bfc8      	it	gt
 8007e74:	461d      	movgt	r5, r3
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	bfd8      	it	le
 8007e7a:	2501      	movle	r5, #1
 8007e7c:	441d      	add	r5, r3
 8007e7e:	f04f 0800 	mov.w	r8, #0
 8007e82:	ee18 1a10 	vmov	r1, s16
 8007e86:	2201      	movs	r2, #1
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 fb4f 	bl	800852c <__lshift>
 8007e8e:	4631      	mov	r1, r6
 8007e90:	ee08 0a10 	vmov	s16, r0
 8007e94:	f000 fbba 	bl	800860c <__mcmp>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	dc91      	bgt.n	8007dc0 <_dtoa_r+0xaa8>
 8007e9c:	d102      	bne.n	8007ea4 <_dtoa_r+0xb8c>
 8007e9e:	f01a 0f01 	tst.w	sl, #1
 8007ea2:	d18d      	bne.n	8007dc0 <_dtoa_r+0xaa8>
 8007ea4:	462b      	mov	r3, r5
 8007ea6:	461d      	mov	r5, r3
 8007ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eac:	2a30      	cmp	r2, #48	; 0x30
 8007eae:	d0fa      	beq.n	8007ea6 <_dtoa_r+0xb8e>
 8007eb0:	e6d7      	b.n	8007c62 <_dtoa_r+0x94a>
 8007eb2:	9a01      	ldr	r2, [sp, #4]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d184      	bne.n	8007dc2 <_dtoa_r+0xaaa>
 8007eb8:	9b00      	ldr	r3, [sp, #0]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	2331      	movs	r3, #49	; 0x31
 8007ec0:	7013      	strb	r3, [r2, #0]
 8007ec2:	e6ce      	b.n	8007c62 <_dtoa_r+0x94a>
 8007ec4:	4b09      	ldr	r3, [pc, #36]	; (8007eec <_dtoa_r+0xbd4>)
 8007ec6:	f7ff ba95 	b.w	80073f4 <_dtoa_r+0xdc>
 8007eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f47f aa6e 	bne.w	80073ae <_dtoa_r+0x96>
 8007ed2:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <_dtoa_r+0xbd8>)
 8007ed4:	f7ff ba8e 	b.w	80073f4 <_dtoa_r+0xdc>
 8007ed8:	9b02      	ldr	r3, [sp, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	dcae      	bgt.n	8007e3c <_dtoa_r+0xb24>
 8007ede:	9b06      	ldr	r3, [sp, #24]
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	f73f aea8 	bgt.w	8007c36 <_dtoa_r+0x91e>
 8007ee6:	e7a9      	b.n	8007e3c <_dtoa_r+0xb24>
 8007ee8:	0803ac4f 	.word	0x0803ac4f
 8007eec:	0803abac 	.word	0x0803abac
 8007ef0:	0803abd0 	.word	0x0803abd0

08007ef4 <std>:
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	4604      	mov	r4, r0
 8007efa:	e9c0 3300 	strd	r3, r3, [r0]
 8007efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f02:	6083      	str	r3, [r0, #8]
 8007f04:	8181      	strh	r1, [r0, #12]
 8007f06:	6643      	str	r3, [r0, #100]	; 0x64
 8007f08:	81c2      	strh	r2, [r0, #14]
 8007f0a:	6183      	str	r3, [r0, #24]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	2208      	movs	r2, #8
 8007f10:	305c      	adds	r0, #92	; 0x5c
 8007f12:	f7fe fbdb 	bl	80066cc <memset>
 8007f16:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <std+0x38>)
 8007f18:	6263      	str	r3, [r4, #36]	; 0x24
 8007f1a:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <std+0x3c>)
 8007f1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f1e:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <std+0x40>)
 8007f20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f22:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <std+0x44>)
 8007f24:	6224      	str	r4, [r4, #32]
 8007f26:	6323      	str	r3, [r4, #48]	; 0x30
 8007f28:	bd10      	pop	{r4, pc}
 8007f2a:	bf00      	nop
 8007f2c:	08008e05 	.word	0x08008e05
 8007f30:	08008e27 	.word	0x08008e27
 8007f34:	08008e5f 	.word	0x08008e5f
 8007f38:	08008e83 	.word	0x08008e83

08007f3c <_cleanup_r>:
 8007f3c:	4901      	ldr	r1, [pc, #4]	; (8007f44 <_cleanup_r+0x8>)
 8007f3e:	f000 b8af 	b.w	80080a0 <_fwalk_reent>
 8007f42:	bf00      	nop
 8007f44:	08009199 	.word	0x08009199

08007f48 <__sfmoreglue>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	2268      	movs	r2, #104	; 0x68
 8007f4c:	1e4d      	subs	r5, r1, #1
 8007f4e:	4355      	muls	r5, r2
 8007f50:	460e      	mov	r6, r1
 8007f52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f56:	f7fe fc2d 	bl	80067b4 <_malloc_r>
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	b140      	cbz	r0, 8007f70 <__sfmoreglue+0x28>
 8007f5e:	2100      	movs	r1, #0
 8007f60:	e9c0 1600 	strd	r1, r6, [r0]
 8007f64:	300c      	adds	r0, #12
 8007f66:	60a0      	str	r0, [r4, #8]
 8007f68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f6c:	f7fe fbae 	bl	80066cc <memset>
 8007f70:	4620      	mov	r0, r4
 8007f72:	bd70      	pop	{r4, r5, r6, pc}

08007f74 <__sfp_lock_acquire>:
 8007f74:	4801      	ldr	r0, [pc, #4]	; (8007f7c <__sfp_lock_acquire+0x8>)
 8007f76:	f000 b8b8 	b.w	80080ea <__retarget_lock_acquire_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	2000758d 	.word	0x2000758d

08007f80 <__sfp_lock_release>:
 8007f80:	4801      	ldr	r0, [pc, #4]	; (8007f88 <__sfp_lock_release+0x8>)
 8007f82:	f000 b8b3 	b.w	80080ec <__retarget_lock_release_recursive>
 8007f86:	bf00      	nop
 8007f88:	2000758d 	.word	0x2000758d

08007f8c <__sinit_lock_acquire>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__sinit_lock_acquire+0x8>)
 8007f8e:	f000 b8ac 	b.w	80080ea <__retarget_lock_acquire_recursive>
 8007f92:	bf00      	nop
 8007f94:	2000758e 	.word	0x2000758e

08007f98 <__sinit_lock_release>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__sinit_lock_release+0x8>)
 8007f9a:	f000 b8a7 	b.w	80080ec <__retarget_lock_release_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	2000758e 	.word	0x2000758e

08007fa4 <__sinit>:
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	f7ff fff0 	bl	8007f8c <__sinit_lock_acquire>
 8007fac:	69a3      	ldr	r3, [r4, #24]
 8007fae:	b11b      	cbz	r3, 8007fb8 <__sinit+0x14>
 8007fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb4:	f7ff bff0 	b.w	8007f98 <__sinit_lock_release>
 8007fb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fbc:	6523      	str	r3, [r4, #80]	; 0x50
 8007fbe:	4b13      	ldr	r3, [pc, #76]	; (800800c <__sinit+0x68>)
 8007fc0:	4a13      	ldr	r2, [pc, #76]	; (8008010 <__sinit+0x6c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fc6:	42a3      	cmp	r3, r4
 8007fc8:	bf04      	itt	eq
 8007fca:	2301      	moveq	r3, #1
 8007fcc:	61a3      	streq	r3, [r4, #24]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 f820 	bl	8008014 <__sfp>
 8007fd4:	6060      	str	r0, [r4, #4]
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 f81c 	bl	8008014 <__sfp>
 8007fdc:	60a0      	str	r0, [r4, #8]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 f818 	bl	8008014 <__sfp>
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	60e0      	str	r0, [r4, #12]
 8007fe8:	2104      	movs	r1, #4
 8007fea:	6860      	ldr	r0, [r4, #4]
 8007fec:	f7ff ff82 	bl	8007ef4 <std>
 8007ff0:	68a0      	ldr	r0, [r4, #8]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	2109      	movs	r1, #9
 8007ff6:	f7ff ff7d 	bl	8007ef4 <std>
 8007ffa:	68e0      	ldr	r0, [r4, #12]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	2112      	movs	r1, #18
 8008000:	f7ff ff78 	bl	8007ef4 <std>
 8008004:	2301      	movs	r3, #1
 8008006:	61a3      	str	r3, [r4, #24]
 8008008:	e7d2      	b.n	8007fb0 <__sinit+0xc>
 800800a:	bf00      	nop
 800800c:	0803ab98 	.word	0x0803ab98
 8008010:	08007f3d 	.word	0x08007f3d

08008014 <__sfp>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	4607      	mov	r7, r0
 8008018:	f7ff ffac 	bl	8007f74 <__sfp_lock_acquire>
 800801c:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <__sfp+0x84>)
 800801e:	681e      	ldr	r6, [r3, #0]
 8008020:	69b3      	ldr	r3, [r6, #24]
 8008022:	b913      	cbnz	r3, 800802a <__sfp+0x16>
 8008024:	4630      	mov	r0, r6
 8008026:	f7ff ffbd 	bl	8007fa4 <__sinit>
 800802a:	3648      	adds	r6, #72	; 0x48
 800802c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008030:	3b01      	subs	r3, #1
 8008032:	d503      	bpl.n	800803c <__sfp+0x28>
 8008034:	6833      	ldr	r3, [r6, #0]
 8008036:	b30b      	cbz	r3, 800807c <__sfp+0x68>
 8008038:	6836      	ldr	r6, [r6, #0]
 800803a:	e7f7      	b.n	800802c <__sfp+0x18>
 800803c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008040:	b9d5      	cbnz	r5, 8008078 <__sfp+0x64>
 8008042:	4b16      	ldr	r3, [pc, #88]	; (800809c <__sfp+0x88>)
 8008044:	60e3      	str	r3, [r4, #12]
 8008046:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800804a:	6665      	str	r5, [r4, #100]	; 0x64
 800804c:	f000 f84c 	bl	80080e8 <__retarget_lock_init_recursive>
 8008050:	f7ff ff96 	bl	8007f80 <__sfp_lock_release>
 8008054:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008058:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800805c:	6025      	str	r5, [r4, #0]
 800805e:	61a5      	str	r5, [r4, #24]
 8008060:	2208      	movs	r2, #8
 8008062:	4629      	mov	r1, r5
 8008064:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008068:	f7fe fb30 	bl	80066cc <memset>
 800806c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008070:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008074:	4620      	mov	r0, r4
 8008076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008078:	3468      	adds	r4, #104	; 0x68
 800807a:	e7d9      	b.n	8008030 <__sfp+0x1c>
 800807c:	2104      	movs	r1, #4
 800807e:	4638      	mov	r0, r7
 8008080:	f7ff ff62 	bl	8007f48 <__sfmoreglue>
 8008084:	4604      	mov	r4, r0
 8008086:	6030      	str	r0, [r6, #0]
 8008088:	2800      	cmp	r0, #0
 800808a:	d1d5      	bne.n	8008038 <__sfp+0x24>
 800808c:	f7ff ff78 	bl	8007f80 <__sfp_lock_release>
 8008090:	230c      	movs	r3, #12
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	e7ee      	b.n	8008074 <__sfp+0x60>
 8008096:	bf00      	nop
 8008098:	0803ab98 	.word	0x0803ab98
 800809c:	ffff0001 	.word	0xffff0001

080080a0 <_fwalk_reent>:
 80080a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a4:	4606      	mov	r6, r0
 80080a6:	4688      	mov	r8, r1
 80080a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080ac:	2700      	movs	r7, #0
 80080ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080b2:	f1b9 0901 	subs.w	r9, r9, #1
 80080b6:	d505      	bpl.n	80080c4 <_fwalk_reent+0x24>
 80080b8:	6824      	ldr	r4, [r4, #0]
 80080ba:	2c00      	cmp	r4, #0
 80080bc:	d1f7      	bne.n	80080ae <_fwalk_reent+0xe>
 80080be:	4638      	mov	r0, r7
 80080c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080c4:	89ab      	ldrh	r3, [r5, #12]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d907      	bls.n	80080da <_fwalk_reent+0x3a>
 80080ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080ce:	3301      	adds	r3, #1
 80080d0:	d003      	beq.n	80080da <_fwalk_reent+0x3a>
 80080d2:	4629      	mov	r1, r5
 80080d4:	4630      	mov	r0, r6
 80080d6:	47c0      	blx	r8
 80080d8:	4307      	orrs	r7, r0
 80080da:	3568      	adds	r5, #104	; 0x68
 80080dc:	e7e9      	b.n	80080b2 <_fwalk_reent+0x12>
	...

080080e0 <_localeconv_r>:
 80080e0:	4800      	ldr	r0, [pc, #0]	; (80080e4 <_localeconv_r+0x4>)
 80080e2:	4770      	bx	lr
 80080e4:	20000aa4 	.word	0x20000aa4

080080e8 <__retarget_lock_init_recursive>:
 80080e8:	4770      	bx	lr

080080ea <__retarget_lock_acquire_recursive>:
 80080ea:	4770      	bx	lr

080080ec <__retarget_lock_release_recursive>:
 80080ec:	4770      	bx	lr
	...

080080f0 <__malloc_lock>:
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <__malloc_lock+0x8>)
 80080f2:	f7ff bffa 	b.w	80080ea <__retarget_lock_acquire_recursive>
 80080f6:	bf00      	nop
 80080f8:	2000758c 	.word	0x2000758c

080080fc <__malloc_unlock>:
 80080fc:	4801      	ldr	r0, [pc, #4]	; (8008104 <__malloc_unlock+0x8>)
 80080fe:	f7ff bff5 	b.w	80080ec <__retarget_lock_release_recursive>
 8008102:	bf00      	nop
 8008104:	2000758c 	.word	0x2000758c

08008108 <_Balloc>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800810c:	4604      	mov	r4, r0
 800810e:	460d      	mov	r5, r1
 8008110:	b976      	cbnz	r6, 8008130 <_Balloc+0x28>
 8008112:	2010      	movs	r0, #16
 8008114:	f7fe fac4 	bl	80066a0 <malloc>
 8008118:	4602      	mov	r2, r0
 800811a:	6260      	str	r0, [r4, #36]	; 0x24
 800811c:	b920      	cbnz	r0, 8008128 <_Balloc+0x20>
 800811e:	4b18      	ldr	r3, [pc, #96]	; (8008180 <_Balloc+0x78>)
 8008120:	4818      	ldr	r0, [pc, #96]	; (8008184 <_Balloc+0x7c>)
 8008122:	2166      	movs	r1, #102	; 0x66
 8008124:	f000 ff84 	bl	8009030 <__assert_func>
 8008128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800812c:	6006      	str	r6, [r0, #0]
 800812e:	60c6      	str	r6, [r0, #12]
 8008130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008132:	68f3      	ldr	r3, [r6, #12]
 8008134:	b183      	cbz	r3, 8008158 <_Balloc+0x50>
 8008136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800813e:	b9b8      	cbnz	r0, 8008170 <_Balloc+0x68>
 8008140:	2101      	movs	r1, #1
 8008142:	fa01 f605 	lsl.w	r6, r1, r5
 8008146:	1d72      	adds	r2, r6, #5
 8008148:	0092      	lsls	r2, r2, #2
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fb60 	bl	8008810 <_calloc_r>
 8008150:	b160      	cbz	r0, 800816c <_Balloc+0x64>
 8008152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008156:	e00e      	b.n	8008176 <_Balloc+0x6e>
 8008158:	2221      	movs	r2, #33	; 0x21
 800815a:	2104      	movs	r1, #4
 800815c:	4620      	mov	r0, r4
 800815e:	f000 fb57 	bl	8008810 <_calloc_r>
 8008162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008164:	60f0      	str	r0, [r6, #12]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e4      	bne.n	8008136 <_Balloc+0x2e>
 800816c:	2000      	movs	r0, #0
 800816e:	bd70      	pop	{r4, r5, r6, pc}
 8008170:	6802      	ldr	r2, [r0, #0]
 8008172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008176:	2300      	movs	r3, #0
 8008178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800817c:	e7f7      	b.n	800816e <_Balloc+0x66>
 800817e:	bf00      	nop
 8008180:	0803abdd 	.word	0x0803abdd
 8008184:	0803acc0 	.word	0x0803acc0

08008188 <_Bfree>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800818c:	4605      	mov	r5, r0
 800818e:	460c      	mov	r4, r1
 8008190:	b976      	cbnz	r6, 80081b0 <_Bfree+0x28>
 8008192:	2010      	movs	r0, #16
 8008194:	f7fe fa84 	bl	80066a0 <malloc>
 8008198:	4602      	mov	r2, r0
 800819a:	6268      	str	r0, [r5, #36]	; 0x24
 800819c:	b920      	cbnz	r0, 80081a8 <_Bfree+0x20>
 800819e:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <_Bfree+0x3c>)
 80081a0:	4809      	ldr	r0, [pc, #36]	; (80081c8 <_Bfree+0x40>)
 80081a2:	218a      	movs	r1, #138	; 0x8a
 80081a4:	f000 ff44 	bl	8009030 <__assert_func>
 80081a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081ac:	6006      	str	r6, [r0, #0]
 80081ae:	60c6      	str	r6, [r0, #12]
 80081b0:	b13c      	cbz	r4, 80081c2 <_Bfree+0x3a>
 80081b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081b4:	6862      	ldr	r2, [r4, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081bc:	6021      	str	r1, [r4, #0]
 80081be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	0803abdd 	.word	0x0803abdd
 80081c8:	0803acc0 	.word	0x0803acc0

080081cc <__multadd>:
 80081cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d0:	690d      	ldr	r5, [r1, #16]
 80081d2:	4607      	mov	r7, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	461e      	mov	r6, r3
 80081d8:	f101 0c14 	add.w	ip, r1, #20
 80081dc:	2000      	movs	r0, #0
 80081de:	f8dc 3000 	ldr.w	r3, [ip]
 80081e2:	b299      	uxth	r1, r3
 80081e4:	fb02 6101 	mla	r1, r2, r1, r6
 80081e8:	0c1e      	lsrs	r6, r3, #16
 80081ea:	0c0b      	lsrs	r3, r1, #16
 80081ec:	fb02 3306 	mla	r3, r2, r6, r3
 80081f0:	b289      	uxth	r1, r1
 80081f2:	3001      	adds	r0, #1
 80081f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081f8:	4285      	cmp	r5, r0
 80081fa:	f84c 1b04 	str.w	r1, [ip], #4
 80081fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008202:	dcec      	bgt.n	80081de <__multadd+0x12>
 8008204:	b30e      	cbz	r6, 800824a <__multadd+0x7e>
 8008206:	68a3      	ldr	r3, [r4, #8]
 8008208:	42ab      	cmp	r3, r5
 800820a:	dc19      	bgt.n	8008240 <__multadd+0x74>
 800820c:	6861      	ldr	r1, [r4, #4]
 800820e:	4638      	mov	r0, r7
 8008210:	3101      	adds	r1, #1
 8008212:	f7ff ff79 	bl	8008108 <_Balloc>
 8008216:	4680      	mov	r8, r0
 8008218:	b928      	cbnz	r0, 8008226 <__multadd+0x5a>
 800821a:	4602      	mov	r2, r0
 800821c:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <__multadd+0x84>)
 800821e:	480d      	ldr	r0, [pc, #52]	; (8008254 <__multadd+0x88>)
 8008220:	21b5      	movs	r1, #181	; 0xb5
 8008222:	f000 ff05 	bl	8009030 <__assert_func>
 8008226:	6922      	ldr	r2, [r4, #16]
 8008228:	3202      	adds	r2, #2
 800822a:	f104 010c 	add.w	r1, r4, #12
 800822e:	0092      	lsls	r2, r2, #2
 8008230:	300c      	adds	r0, #12
 8008232:	f7fe fa3d 	bl	80066b0 <memcpy>
 8008236:	4621      	mov	r1, r4
 8008238:	4638      	mov	r0, r7
 800823a:	f7ff ffa5 	bl	8008188 <_Bfree>
 800823e:	4644      	mov	r4, r8
 8008240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008244:	3501      	adds	r5, #1
 8008246:	615e      	str	r6, [r3, #20]
 8008248:	6125      	str	r5, [r4, #16]
 800824a:	4620      	mov	r0, r4
 800824c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008250:	0803ac4f 	.word	0x0803ac4f
 8008254:	0803acc0 	.word	0x0803acc0

08008258 <__hi0bits>:
 8008258:	0c03      	lsrs	r3, r0, #16
 800825a:	041b      	lsls	r3, r3, #16
 800825c:	b9d3      	cbnz	r3, 8008294 <__hi0bits+0x3c>
 800825e:	0400      	lsls	r0, r0, #16
 8008260:	2310      	movs	r3, #16
 8008262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008266:	bf04      	itt	eq
 8008268:	0200      	lsleq	r0, r0, #8
 800826a:	3308      	addeq	r3, #8
 800826c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008270:	bf04      	itt	eq
 8008272:	0100      	lsleq	r0, r0, #4
 8008274:	3304      	addeq	r3, #4
 8008276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800827a:	bf04      	itt	eq
 800827c:	0080      	lsleq	r0, r0, #2
 800827e:	3302      	addeq	r3, #2
 8008280:	2800      	cmp	r0, #0
 8008282:	db05      	blt.n	8008290 <__hi0bits+0x38>
 8008284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008288:	f103 0301 	add.w	r3, r3, #1
 800828c:	bf08      	it	eq
 800828e:	2320      	moveq	r3, #32
 8008290:	4618      	mov	r0, r3
 8008292:	4770      	bx	lr
 8008294:	2300      	movs	r3, #0
 8008296:	e7e4      	b.n	8008262 <__hi0bits+0xa>

08008298 <__lo0bits>:
 8008298:	6803      	ldr	r3, [r0, #0]
 800829a:	f013 0207 	ands.w	r2, r3, #7
 800829e:	4601      	mov	r1, r0
 80082a0:	d00b      	beq.n	80082ba <__lo0bits+0x22>
 80082a2:	07da      	lsls	r2, r3, #31
 80082a4:	d423      	bmi.n	80082ee <__lo0bits+0x56>
 80082a6:	0798      	lsls	r0, r3, #30
 80082a8:	bf49      	itett	mi
 80082aa:	085b      	lsrmi	r3, r3, #1
 80082ac:	089b      	lsrpl	r3, r3, #2
 80082ae:	2001      	movmi	r0, #1
 80082b0:	600b      	strmi	r3, [r1, #0]
 80082b2:	bf5c      	itt	pl
 80082b4:	600b      	strpl	r3, [r1, #0]
 80082b6:	2002      	movpl	r0, #2
 80082b8:	4770      	bx	lr
 80082ba:	b298      	uxth	r0, r3
 80082bc:	b9a8      	cbnz	r0, 80082ea <__lo0bits+0x52>
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	2010      	movs	r0, #16
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	b90a      	cbnz	r2, 80082ca <__lo0bits+0x32>
 80082c6:	3008      	adds	r0, #8
 80082c8:	0a1b      	lsrs	r3, r3, #8
 80082ca:	071a      	lsls	r2, r3, #28
 80082cc:	bf04      	itt	eq
 80082ce:	091b      	lsreq	r3, r3, #4
 80082d0:	3004      	addeq	r0, #4
 80082d2:	079a      	lsls	r2, r3, #30
 80082d4:	bf04      	itt	eq
 80082d6:	089b      	lsreq	r3, r3, #2
 80082d8:	3002      	addeq	r0, #2
 80082da:	07da      	lsls	r2, r3, #31
 80082dc:	d403      	bmi.n	80082e6 <__lo0bits+0x4e>
 80082de:	085b      	lsrs	r3, r3, #1
 80082e0:	f100 0001 	add.w	r0, r0, #1
 80082e4:	d005      	beq.n	80082f2 <__lo0bits+0x5a>
 80082e6:	600b      	str	r3, [r1, #0]
 80082e8:	4770      	bx	lr
 80082ea:	4610      	mov	r0, r2
 80082ec:	e7e9      	b.n	80082c2 <__lo0bits+0x2a>
 80082ee:	2000      	movs	r0, #0
 80082f0:	4770      	bx	lr
 80082f2:	2020      	movs	r0, #32
 80082f4:	4770      	bx	lr
	...

080082f8 <__i2b>:
 80082f8:	b510      	push	{r4, lr}
 80082fa:	460c      	mov	r4, r1
 80082fc:	2101      	movs	r1, #1
 80082fe:	f7ff ff03 	bl	8008108 <_Balloc>
 8008302:	4602      	mov	r2, r0
 8008304:	b928      	cbnz	r0, 8008312 <__i2b+0x1a>
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <__i2b+0x24>)
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <__i2b+0x28>)
 800830a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800830e:	f000 fe8f 	bl	8009030 <__assert_func>
 8008312:	2301      	movs	r3, #1
 8008314:	6144      	str	r4, [r0, #20]
 8008316:	6103      	str	r3, [r0, #16]
 8008318:	bd10      	pop	{r4, pc}
 800831a:	bf00      	nop
 800831c:	0803ac4f 	.word	0x0803ac4f
 8008320:	0803acc0 	.word	0x0803acc0

08008324 <__multiply>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	4691      	mov	r9, r2
 800832a:	690a      	ldr	r2, [r1, #16]
 800832c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008330:	429a      	cmp	r2, r3
 8008332:	bfb8      	it	lt
 8008334:	460b      	movlt	r3, r1
 8008336:	460c      	mov	r4, r1
 8008338:	bfbc      	itt	lt
 800833a:	464c      	movlt	r4, r9
 800833c:	4699      	movlt	r9, r3
 800833e:	6927      	ldr	r7, [r4, #16]
 8008340:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008344:	68a3      	ldr	r3, [r4, #8]
 8008346:	6861      	ldr	r1, [r4, #4]
 8008348:	eb07 060a 	add.w	r6, r7, sl
 800834c:	42b3      	cmp	r3, r6
 800834e:	b085      	sub	sp, #20
 8008350:	bfb8      	it	lt
 8008352:	3101      	addlt	r1, #1
 8008354:	f7ff fed8 	bl	8008108 <_Balloc>
 8008358:	b930      	cbnz	r0, 8008368 <__multiply+0x44>
 800835a:	4602      	mov	r2, r0
 800835c:	4b44      	ldr	r3, [pc, #272]	; (8008470 <__multiply+0x14c>)
 800835e:	4845      	ldr	r0, [pc, #276]	; (8008474 <__multiply+0x150>)
 8008360:	f240 115d 	movw	r1, #349	; 0x15d
 8008364:	f000 fe64 	bl	8009030 <__assert_func>
 8008368:	f100 0514 	add.w	r5, r0, #20
 800836c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008370:	462b      	mov	r3, r5
 8008372:	2200      	movs	r2, #0
 8008374:	4543      	cmp	r3, r8
 8008376:	d321      	bcc.n	80083bc <__multiply+0x98>
 8008378:	f104 0314 	add.w	r3, r4, #20
 800837c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008380:	f109 0314 	add.w	r3, r9, #20
 8008384:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008388:	9202      	str	r2, [sp, #8]
 800838a:	1b3a      	subs	r2, r7, r4
 800838c:	3a15      	subs	r2, #21
 800838e:	f022 0203 	bic.w	r2, r2, #3
 8008392:	3204      	adds	r2, #4
 8008394:	f104 0115 	add.w	r1, r4, #21
 8008398:	428f      	cmp	r7, r1
 800839a:	bf38      	it	cc
 800839c:	2204      	movcc	r2, #4
 800839e:	9201      	str	r2, [sp, #4]
 80083a0:	9a02      	ldr	r2, [sp, #8]
 80083a2:	9303      	str	r3, [sp, #12]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d80c      	bhi.n	80083c2 <__multiply+0x9e>
 80083a8:	2e00      	cmp	r6, #0
 80083aa:	dd03      	ble.n	80083b4 <__multiply+0x90>
 80083ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d05a      	beq.n	800846a <__multiply+0x146>
 80083b4:	6106      	str	r6, [r0, #16]
 80083b6:	b005      	add	sp, #20
 80083b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083bc:	f843 2b04 	str.w	r2, [r3], #4
 80083c0:	e7d8      	b.n	8008374 <__multiply+0x50>
 80083c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80083c6:	f1ba 0f00 	cmp.w	sl, #0
 80083ca:	d024      	beq.n	8008416 <__multiply+0xf2>
 80083cc:	f104 0e14 	add.w	lr, r4, #20
 80083d0:	46a9      	mov	r9, r5
 80083d2:	f04f 0c00 	mov.w	ip, #0
 80083d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083da:	f8d9 1000 	ldr.w	r1, [r9]
 80083de:	fa1f fb82 	uxth.w	fp, r2
 80083e2:	b289      	uxth	r1, r1
 80083e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80083e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80083ec:	f8d9 2000 	ldr.w	r2, [r9]
 80083f0:	4461      	add	r1, ip
 80083f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80083fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80083fe:	b289      	uxth	r1, r1
 8008400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008404:	4577      	cmp	r7, lr
 8008406:	f849 1b04 	str.w	r1, [r9], #4
 800840a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800840e:	d8e2      	bhi.n	80083d6 <__multiply+0xb2>
 8008410:	9a01      	ldr	r2, [sp, #4]
 8008412:	f845 c002 	str.w	ip, [r5, r2]
 8008416:	9a03      	ldr	r2, [sp, #12]
 8008418:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800841c:	3304      	adds	r3, #4
 800841e:	f1b9 0f00 	cmp.w	r9, #0
 8008422:	d020      	beq.n	8008466 <__multiply+0x142>
 8008424:	6829      	ldr	r1, [r5, #0]
 8008426:	f104 0c14 	add.w	ip, r4, #20
 800842a:	46ae      	mov	lr, r5
 800842c:	f04f 0a00 	mov.w	sl, #0
 8008430:	f8bc b000 	ldrh.w	fp, [ip]
 8008434:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008438:	fb09 220b 	mla	r2, r9, fp, r2
 800843c:	4492      	add	sl, r2
 800843e:	b289      	uxth	r1, r1
 8008440:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008444:	f84e 1b04 	str.w	r1, [lr], #4
 8008448:	f85c 2b04 	ldr.w	r2, [ip], #4
 800844c:	f8be 1000 	ldrh.w	r1, [lr]
 8008450:	0c12      	lsrs	r2, r2, #16
 8008452:	fb09 1102 	mla	r1, r9, r2, r1
 8008456:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800845a:	4567      	cmp	r7, ip
 800845c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008460:	d8e6      	bhi.n	8008430 <__multiply+0x10c>
 8008462:	9a01      	ldr	r2, [sp, #4]
 8008464:	50a9      	str	r1, [r5, r2]
 8008466:	3504      	adds	r5, #4
 8008468:	e79a      	b.n	80083a0 <__multiply+0x7c>
 800846a:	3e01      	subs	r6, #1
 800846c:	e79c      	b.n	80083a8 <__multiply+0x84>
 800846e:	bf00      	nop
 8008470:	0803ac4f 	.word	0x0803ac4f
 8008474:	0803acc0 	.word	0x0803acc0

08008478 <__pow5mult>:
 8008478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800847c:	4615      	mov	r5, r2
 800847e:	f012 0203 	ands.w	r2, r2, #3
 8008482:	4606      	mov	r6, r0
 8008484:	460f      	mov	r7, r1
 8008486:	d007      	beq.n	8008498 <__pow5mult+0x20>
 8008488:	4c25      	ldr	r4, [pc, #148]	; (8008520 <__pow5mult+0xa8>)
 800848a:	3a01      	subs	r2, #1
 800848c:	2300      	movs	r3, #0
 800848e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008492:	f7ff fe9b 	bl	80081cc <__multadd>
 8008496:	4607      	mov	r7, r0
 8008498:	10ad      	asrs	r5, r5, #2
 800849a:	d03d      	beq.n	8008518 <__pow5mult+0xa0>
 800849c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800849e:	b97c      	cbnz	r4, 80084c0 <__pow5mult+0x48>
 80084a0:	2010      	movs	r0, #16
 80084a2:	f7fe f8fd 	bl	80066a0 <malloc>
 80084a6:	4602      	mov	r2, r0
 80084a8:	6270      	str	r0, [r6, #36]	; 0x24
 80084aa:	b928      	cbnz	r0, 80084b8 <__pow5mult+0x40>
 80084ac:	4b1d      	ldr	r3, [pc, #116]	; (8008524 <__pow5mult+0xac>)
 80084ae:	481e      	ldr	r0, [pc, #120]	; (8008528 <__pow5mult+0xb0>)
 80084b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084b4:	f000 fdbc 	bl	8009030 <__assert_func>
 80084b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084bc:	6004      	str	r4, [r0, #0]
 80084be:	60c4      	str	r4, [r0, #12]
 80084c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084c8:	b94c      	cbnz	r4, 80084de <__pow5mult+0x66>
 80084ca:	f240 2171 	movw	r1, #625	; 0x271
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7ff ff12 	bl	80082f8 <__i2b>
 80084d4:	2300      	movs	r3, #0
 80084d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80084da:	4604      	mov	r4, r0
 80084dc:	6003      	str	r3, [r0, #0]
 80084de:	f04f 0900 	mov.w	r9, #0
 80084e2:	07eb      	lsls	r3, r5, #31
 80084e4:	d50a      	bpl.n	80084fc <__pow5mult+0x84>
 80084e6:	4639      	mov	r1, r7
 80084e8:	4622      	mov	r2, r4
 80084ea:	4630      	mov	r0, r6
 80084ec:	f7ff ff1a 	bl	8008324 <__multiply>
 80084f0:	4639      	mov	r1, r7
 80084f2:	4680      	mov	r8, r0
 80084f4:	4630      	mov	r0, r6
 80084f6:	f7ff fe47 	bl	8008188 <_Bfree>
 80084fa:	4647      	mov	r7, r8
 80084fc:	106d      	asrs	r5, r5, #1
 80084fe:	d00b      	beq.n	8008518 <__pow5mult+0xa0>
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	b938      	cbnz	r0, 8008514 <__pow5mult+0x9c>
 8008504:	4622      	mov	r2, r4
 8008506:	4621      	mov	r1, r4
 8008508:	4630      	mov	r0, r6
 800850a:	f7ff ff0b 	bl	8008324 <__multiply>
 800850e:	6020      	str	r0, [r4, #0]
 8008510:	f8c0 9000 	str.w	r9, [r0]
 8008514:	4604      	mov	r4, r0
 8008516:	e7e4      	b.n	80084e2 <__pow5mult+0x6a>
 8008518:	4638      	mov	r0, r7
 800851a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800851e:	bf00      	nop
 8008520:	0803ae10 	.word	0x0803ae10
 8008524:	0803abdd 	.word	0x0803abdd
 8008528:	0803acc0 	.word	0x0803acc0

0800852c <__lshift>:
 800852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	460c      	mov	r4, r1
 8008532:	6849      	ldr	r1, [r1, #4]
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800853a:	68a3      	ldr	r3, [r4, #8]
 800853c:	4607      	mov	r7, r0
 800853e:	4691      	mov	r9, r2
 8008540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008544:	f108 0601 	add.w	r6, r8, #1
 8008548:	42b3      	cmp	r3, r6
 800854a:	db0b      	blt.n	8008564 <__lshift+0x38>
 800854c:	4638      	mov	r0, r7
 800854e:	f7ff fddb 	bl	8008108 <_Balloc>
 8008552:	4605      	mov	r5, r0
 8008554:	b948      	cbnz	r0, 800856a <__lshift+0x3e>
 8008556:	4602      	mov	r2, r0
 8008558:	4b2a      	ldr	r3, [pc, #168]	; (8008604 <__lshift+0xd8>)
 800855a:	482b      	ldr	r0, [pc, #172]	; (8008608 <__lshift+0xdc>)
 800855c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008560:	f000 fd66 	bl	8009030 <__assert_func>
 8008564:	3101      	adds	r1, #1
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	e7ee      	b.n	8008548 <__lshift+0x1c>
 800856a:	2300      	movs	r3, #0
 800856c:	f100 0114 	add.w	r1, r0, #20
 8008570:	f100 0210 	add.w	r2, r0, #16
 8008574:	4618      	mov	r0, r3
 8008576:	4553      	cmp	r3, sl
 8008578:	db37      	blt.n	80085ea <__lshift+0xbe>
 800857a:	6920      	ldr	r0, [r4, #16]
 800857c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008580:	f104 0314 	add.w	r3, r4, #20
 8008584:	f019 091f 	ands.w	r9, r9, #31
 8008588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800858c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008590:	d02f      	beq.n	80085f2 <__lshift+0xc6>
 8008592:	f1c9 0e20 	rsb	lr, r9, #32
 8008596:	468a      	mov	sl, r1
 8008598:	f04f 0c00 	mov.w	ip, #0
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	fa02 f209 	lsl.w	r2, r2, r9
 80085a2:	ea42 020c 	orr.w	r2, r2, ip
 80085a6:	f84a 2b04 	str.w	r2, [sl], #4
 80085aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ae:	4298      	cmp	r0, r3
 80085b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085b4:	d8f2      	bhi.n	800859c <__lshift+0x70>
 80085b6:	1b03      	subs	r3, r0, r4
 80085b8:	3b15      	subs	r3, #21
 80085ba:	f023 0303 	bic.w	r3, r3, #3
 80085be:	3304      	adds	r3, #4
 80085c0:	f104 0215 	add.w	r2, r4, #21
 80085c4:	4290      	cmp	r0, r2
 80085c6:	bf38      	it	cc
 80085c8:	2304      	movcc	r3, #4
 80085ca:	f841 c003 	str.w	ip, [r1, r3]
 80085ce:	f1bc 0f00 	cmp.w	ip, #0
 80085d2:	d001      	beq.n	80085d8 <__lshift+0xac>
 80085d4:	f108 0602 	add.w	r6, r8, #2
 80085d8:	3e01      	subs	r6, #1
 80085da:	4638      	mov	r0, r7
 80085dc:	612e      	str	r6, [r5, #16]
 80085de:	4621      	mov	r1, r4
 80085e0:	f7ff fdd2 	bl	8008188 <_Bfree>
 80085e4:	4628      	mov	r0, r5
 80085e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80085ee:	3301      	adds	r3, #1
 80085f0:	e7c1      	b.n	8008576 <__lshift+0x4a>
 80085f2:	3904      	subs	r1, #4
 80085f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80085fc:	4298      	cmp	r0, r3
 80085fe:	d8f9      	bhi.n	80085f4 <__lshift+0xc8>
 8008600:	e7ea      	b.n	80085d8 <__lshift+0xac>
 8008602:	bf00      	nop
 8008604:	0803ac4f 	.word	0x0803ac4f
 8008608:	0803acc0 	.word	0x0803acc0

0800860c <__mcmp>:
 800860c:	b530      	push	{r4, r5, lr}
 800860e:	6902      	ldr	r2, [r0, #16]
 8008610:	690c      	ldr	r4, [r1, #16]
 8008612:	1b12      	subs	r2, r2, r4
 8008614:	d10e      	bne.n	8008634 <__mcmp+0x28>
 8008616:	f100 0314 	add.w	r3, r0, #20
 800861a:	3114      	adds	r1, #20
 800861c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008624:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008628:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800862c:	42a5      	cmp	r5, r4
 800862e:	d003      	beq.n	8008638 <__mcmp+0x2c>
 8008630:	d305      	bcc.n	800863e <__mcmp+0x32>
 8008632:	2201      	movs	r2, #1
 8008634:	4610      	mov	r0, r2
 8008636:	bd30      	pop	{r4, r5, pc}
 8008638:	4283      	cmp	r3, r0
 800863a:	d3f3      	bcc.n	8008624 <__mcmp+0x18>
 800863c:	e7fa      	b.n	8008634 <__mcmp+0x28>
 800863e:	f04f 32ff 	mov.w	r2, #4294967295
 8008642:	e7f7      	b.n	8008634 <__mcmp+0x28>

08008644 <__mdiff>:
 8008644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008648:	460c      	mov	r4, r1
 800864a:	4606      	mov	r6, r0
 800864c:	4611      	mov	r1, r2
 800864e:	4620      	mov	r0, r4
 8008650:	4690      	mov	r8, r2
 8008652:	f7ff ffdb 	bl	800860c <__mcmp>
 8008656:	1e05      	subs	r5, r0, #0
 8008658:	d110      	bne.n	800867c <__mdiff+0x38>
 800865a:	4629      	mov	r1, r5
 800865c:	4630      	mov	r0, r6
 800865e:	f7ff fd53 	bl	8008108 <_Balloc>
 8008662:	b930      	cbnz	r0, 8008672 <__mdiff+0x2e>
 8008664:	4b3a      	ldr	r3, [pc, #232]	; (8008750 <__mdiff+0x10c>)
 8008666:	4602      	mov	r2, r0
 8008668:	f240 2132 	movw	r1, #562	; 0x232
 800866c:	4839      	ldr	r0, [pc, #228]	; (8008754 <__mdiff+0x110>)
 800866e:	f000 fcdf 	bl	8009030 <__assert_func>
 8008672:	2301      	movs	r3, #1
 8008674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867c:	bfa4      	itt	ge
 800867e:	4643      	movge	r3, r8
 8008680:	46a0      	movge	r8, r4
 8008682:	4630      	mov	r0, r6
 8008684:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008688:	bfa6      	itte	ge
 800868a:	461c      	movge	r4, r3
 800868c:	2500      	movge	r5, #0
 800868e:	2501      	movlt	r5, #1
 8008690:	f7ff fd3a 	bl	8008108 <_Balloc>
 8008694:	b920      	cbnz	r0, 80086a0 <__mdiff+0x5c>
 8008696:	4b2e      	ldr	r3, [pc, #184]	; (8008750 <__mdiff+0x10c>)
 8008698:	4602      	mov	r2, r0
 800869a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800869e:	e7e5      	b.n	800866c <__mdiff+0x28>
 80086a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086a4:	6926      	ldr	r6, [r4, #16]
 80086a6:	60c5      	str	r5, [r0, #12]
 80086a8:	f104 0914 	add.w	r9, r4, #20
 80086ac:	f108 0514 	add.w	r5, r8, #20
 80086b0:	f100 0e14 	add.w	lr, r0, #20
 80086b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086bc:	f108 0210 	add.w	r2, r8, #16
 80086c0:	46f2      	mov	sl, lr
 80086c2:	2100      	movs	r1, #0
 80086c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80086c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086cc:	fa1f f883 	uxth.w	r8, r3
 80086d0:	fa11 f18b 	uxtah	r1, r1, fp
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	eba1 0808 	sub.w	r8, r1, r8
 80086da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086e2:	fa1f f888 	uxth.w	r8, r8
 80086e6:	1419      	asrs	r1, r3, #16
 80086e8:	454e      	cmp	r6, r9
 80086ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80086ee:	f84a 3b04 	str.w	r3, [sl], #4
 80086f2:	d8e7      	bhi.n	80086c4 <__mdiff+0x80>
 80086f4:	1b33      	subs	r3, r6, r4
 80086f6:	3b15      	subs	r3, #21
 80086f8:	f023 0303 	bic.w	r3, r3, #3
 80086fc:	3304      	adds	r3, #4
 80086fe:	3415      	adds	r4, #21
 8008700:	42a6      	cmp	r6, r4
 8008702:	bf38      	it	cc
 8008704:	2304      	movcc	r3, #4
 8008706:	441d      	add	r5, r3
 8008708:	4473      	add	r3, lr
 800870a:	469e      	mov	lr, r3
 800870c:	462e      	mov	r6, r5
 800870e:	4566      	cmp	r6, ip
 8008710:	d30e      	bcc.n	8008730 <__mdiff+0xec>
 8008712:	f10c 0203 	add.w	r2, ip, #3
 8008716:	1b52      	subs	r2, r2, r5
 8008718:	f022 0203 	bic.w	r2, r2, #3
 800871c:	3d03      	subs	r5, #3
 800871e:	45ac      	cmp	ip, r5
 8008720:	bf38      	it	cc
 8008722:	2200      	movcc	r2, #0
 8008724:	441a      	add	r2, r3
 8008726:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800872a:	b17b      	cbz	r3, 800874c <__mdiff+0x108>
 800872c:	6107      	str	r7, [r0, #16]
 800872e:	e7a3      	b.n	8008678 <__mdiff+0x34>
 8008730:	f856 8b04 	ldr.w	r8, [r6], #4
 8008734:	fa11 f288 	uxtah	r2, r1, r8
 8008738:	1414      	asrs	r4, r2, #16
 800873a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800873e:	b292      	uxth	r2, r2
 8008740:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008744:	f84e 2b04 	str.w	r2, [lr], #4
 8008748:	1421      	asrs	r1, r4, #16
 800874a:	e7e0      	b.n	800870e <__mdiff+0xca>
 800874c:	3f01      	subs	r7, #1
 800874e:	e7ea      	b.n	8008726 <__mdiff+0xe2>
 8008750:	0803ac4f 	.word	0x0803ac4f
 8008754:	0803acc0 	.word	0x0803acc0

08008758 <__d2b>:
 8008758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800875c:	4689      	mov	r9, r1
 800875e:	2101      	movs	r1, #1
 8008760:	ec57 6b10 	vmov	r6, r7, d0
 8008764:	4690      	mov	r8, r2
 8008766:	f7ff fccf 	bl	8008108 <_Balloc>
 800876a:	4604      	mov	r4, r0
 800876c:	b930      	cbnz	r0, 800877c <__d2b+0x24>
 800876e:	4602      	mov	r2, r0
 8008770:	4b25      	ldr	r3, [pc, #148]	; (8008808 <__d2b+0xb0>)
 8008772:	4826      	ldr	r0, [pc, #152]	; (800880c <__d2b+0xb4>)
 8008774:	f240 310a 	movw	r1, #778	; 0x30a
 8008778:	f000 fc5a 	bl	8009030 <__assert_func>
 800877c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008780:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008784:	bb35      	cbnz	r5, 80087d4 <__d2b+0x7c>
 8008786:	2e00      	cmp	r6, #0
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	d028      	beq.n	80087de <__d2b+0x86>
 800878c:	4668      	mov	r0, sp
 800878e:	9600      	str	r6, [sp, #0]
 8008790:	f7ff fd82 	bl	8008298 <__lo0bits>
 8008794:	9900      	ldr	r1, [sp, #0]
 8008796:	b300      	cbz	r0, 80087da <__d2b+0x82>
 8008798:	9a01      	ldr	r2, [sp, #4]
 800879a:	f1c0 0320 	rsb	r3, r0, #32
 800879e:	fa02 f303 	lsl.w	r3, r2, r3
 80087a2:	430b      	orrs	r3, r1
 80087a4:	40c2      	lsrs	r2, r0
 80087a6:	6163      	str	r3, [r4, #20]
 80087a8:	9201      	str	r2, [sp, #4]
 80087aa:	9b01      	ldr	r3, [sp, #4]
 80087ac:	61a3      	str	r3, [r4, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	bf14      	ite	ne
 80087b2:	2202      	movne	r2, #2
 80087b4:	2201      	moveq	r2, #1
 80087b6:	6122      	str	r2, [r4, #16]
 80087b8:	b1d5      	cbz	r5, 80087f0 <__d2b+0x98>
 80087ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087be:	4405      	add	r5, r0
 80087c0:	f8c9 5000 	str.w	r5, [r9]
 80087c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087c8:	f8c8 0000 	str.w	r0, [r8]
 80087cc:	4620      	mov	r0, r4
 80087ce:	b003      	add	sp, #12
 80087d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087d8:	e7d5      	b.n	8008786 <__d2b+0x2e>
 80087da:	6161      	str	r1, [r4, #20]
 80087dc:	e7e5      	b.n	80087aa <__d2b+0x52>
 80087de:	a801      	add	r0, sp, #4
 80087e0:	f7ff fd5a 	bl	8008298 <__lo0bits>
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	6163      	str	r3, [r4, #20]
 80087e8:	2201      	movs	r2, #1
 80087ea:	6122      	str	r2, [r4, #16]
 80087ec:	3020      	adds	r0, #32
 80087ee:	e7e3      	b.n	80087b8 <__d2b+0x60>
 80087f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087f8:	f8c9 0000 	str.w	r0, [r9]
 80087fc:	6918      	ldr	r0, [r3, #16]
 80087fe:	f7ff fd2b 	bl	8008258 <__hi0bits>
 8008802:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008806:	e7df      	b.n	80087c8 <__d2b+0x70>
 8008808:	0803ac4f 	.word	0x0803ac4f
 800880c:	0803acc0 	.word	0x0803acc0

08008810 <_calloc_r>:
 8008810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008812:	fba1 2402 	umull	r2, r4, r1, r2
 8008816:	b94c      	cbnz	r4, 800882c <_calloc_r+0x1c>
 8008818:	4611      	mov	r1, r2
 800881a:	9201      	str	r2, [sp, #4]
 800881c:	f7fd ffca 	bl	80067b4 <_malloc_r>
 8008820:	9a01      	ldr	r2, [sp, #4]
 8008822:	4605      	mov	r5, r0
 8008824:	b930      	cbnz	r0, 8008834 <_calloc_r+0x24>
 8008826:	4628      	mov	r0, r5
 8008828:	b003      	add	sp, #12
 800882a:	bd30      	pop	{r4, r5, pc}
 800882c:	220c      	movs	r2, #12
 800882e:	6002      	str	r2, [r0, #0]
 8008830:	2500      	movs	r5, #0
 8008832:	e7f8      	b.n	8008826 <_calloc_r+0x16>
 8008834:	4621      	mov	r1, r4
 8008836:	f7fd ff49 	bl	80066cc <memset>
 800883a:	e7f4      	b.n	8008826 <_calloc_r+0x16>

0800883c <_realloc_r>:
 800883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008840:	4680      	mov	r8, r0
 8008842:	4614      	mov	r4, r2
 8008844:	460e      	mov	r6, r1
 8008846:	b921      	cbnz	r1, 8008852 <_realloc_r+0x16>
 8008848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800884c:	4611      	mov	r1, r2
 800884e:	f7fd bfb1 	b.w	80067b4 <_malloc_r>
 8008852:	b92a      	cbnz	r2, 8008860 <_realloc_r+0x24>
 8008854:	f7fd ff42 	bl	80066dc <_free_r>
 8008858:	4625      	mov	r5, r4
 800885a:	4628      	mov	r0, r5
 800885c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008860:	f000 fd8c 	bl	800937c <_malloc_usable_size_r>
 8008864:	4284      	cmp	r4, r0
 8008866:	4607      	mov	r7, r0
 8008868:	d802      	bhi.n	8008870 <_realloc_r+0x34>
 800886a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800886e:	d812      	bhi.n	8008896 <_realloc_r+0x5a>
 8008870:	4621      	mov	r1, r4
 8008872:	4640      	mov	r0, r8
 8008874:	f7fd ff9e 	bl	80067b4 <_malloc_r>
 8008878:	4605      	mov	r5, r0
 800887a:	2800      	cmp	r0, #0
 800887c:	d0ed      	beq.n	800885a <_realloc_r+0x1e>
 800887e:	42bc      	cmp	r4, r7
 8008880:	4622      	mov	r2, r4
 8008882:	4631      	mov	r1, r6
 8008884:	bf28      	it	cs
 8008886:	463a      	movcs	r2, r7
 8008888:	f7fd ff12 	bl	80066b0 <memcpy>
 800888c:	4631      	mov	r1, r6
 800888e:	4640      	mov	r0, r8
 8008890:	f7fd ff24 	bl	80066dc <_free_r>
 8008894:	e7e1      	b.n	800885a <_realloc_r+0x1e>
 8008896:	4635      	mov	r5, r6
 8008898:	e7df      	b.n	800885a <_realloc_r+0x1e>

0800889a <__ssputs_r>:
 800889a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800889e:	688e      	ldr	r6, [r1, #8]
 80088a0:	429e      	cmp	r6, r3
 80088a2:	4682      	mov	sl, r0
 80088a4:	460c      	mov	r4, r1
 80088a6:	4690      	mov	r8, r2
 80088a8:	461f      	mov	r7, r3
 80088aa:	d838      	bhi.n	800891e <__ssputs_r+0x84>
 80088ac:	898a      	ldrh	r2, [r1, #12]
 80088ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088b2:	d032      	beq.n	800891a <__ssputs_r+0x80>
 80088b4:	6825      	ldr	r5, [r4, #0]
 80088b6:	6909      	ldr	r1, [r1, #16]
 80088b8:	eba5 0901 	sub.w	r9, r5, r1
 80088bc:	6965      	ldr	r5, [r4, #20]
 80088be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088c6:	3301      	adds	r3, #1
 80088c8:	444b      	add	r3, r9
 80088ca:	106d      	asrs	r5, r5, #1
 80088cc:	429d      	cmp	r5, r3
 80088ce:	bf38      	it	cc
 80088d0:	461d      	movcc	r5, r3
 80088d2:	0553      	lsls	r3, r2, #21
 80088d4:	d531      	bpl.n	800893a <__ssputs_r+0xa0>
 80088d6:	4629      	mov	r1, r5
 80088d8:	f7fd ff6c 	bl	80067b4 <_malloc_r>
 80088dc:	4606      	mov	r6, r0
 80088de:	b950      	cbnz	r0, 80088f6 <__ssputs_r+0x5c>
 80088e0:	230c      	movs	r3, #12
 80088e2:	f8ca 3000 	str.w	r3, [sl]
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	f04f 30ff 	mov.w	r0, #4294967295
 80088f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f6:	6921      	ldr	r1, [r4, #16]
 80088f8:	464a      	mov	r2, r9
 80088fa:	f7fd fed9 	bl	80066b0 <memcpy>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008908:	81a3      	strh	r3, [r4, #12]
 800890a:	6126      	str	r6, [r4, #16]
 800890c:	6165      	str	r5, [r4, #20]
 800890e:	444e      	add	r6, r9
 8008910:	eba5 0509 	sub.w	r5, r5, r9
 8008914:	6026      	str	r6, [r4, #0]
 8008916:	60a5      	str	r5, [r4, #8]
 8008918:	463e      	mov	r6, r7
 800891a:	42be      	cmp	r6, r7
 800891c:	d900      	bls.n	8008920 <__ssputs_r+0x86>
 800891e:	463e      	mov	r6, r7
 8008920:	6820      	ldr	r0, [r4, #0]
 8008922:	4632      	mov	r2, r6
 8008924:	4641      	mov	r1, r8
 8008926:	f000 fd0f 	bl	8009348 <memmove>
 800892a:	68a3      	ldr	r3, [r4, #8]
 800892c:	1b9b      	subs	r3, r3, r6
 800892e:	60a3      	str	r3, [r4, #8]
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	4433      	add	r3, r6
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	2000      	movs	r0, #0
 8008938:	e7db      	b.n	80088f2 <__ssputs_r+0x58>
 800893a:	462a      	mov	r2, r5
 800893c:	f7ff ff7e 	bl	800883c <_realloc_r>
 8008940:	4606      	mov	r6, r0
 8008942:	2800      	cmp	r0, #0
 8008944:	d1e1      	bne.n	800890a <__ssputs_r+0x70>
 8008946:	6921      	ldr	r1, [r4, #16]
 8008948:	4650      	mov	r0, sl
 800894a:	f7fd fec7 	bl	80066dc <_free_r>
 800894e:	e7c7      	b.n	80088e0 <__ssputs_r+0x46>

08008950 <_svfiprintf_r>:
 8008950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008954:	4698      	mov	r8, r3
 8008956:	898b      	ldrh	r3, [r1, #12]
 8008958:	061b      	lsls	r3, r3, #24
 800895a:	b09d      	sub	sp, #116	; 0x74
 800895c:	4607      	mov	r7, r0
 800895e:	460d      	mov	r5, r1
 8008960:	4614      	mov	r4, r2
 8008962:	d50e      	bpl.n	8008982 <_svfiprintf_r+0x32>
 8008964:	690b      	ldr	r3, [r1, #16]
 8008966:	b963      	cbnz	r3, 8008982 <_svfiprintf_r+0x32>
 8008968:	2140      	movs	r1, #64	; 0x40
 800896a:	f7fd ff23 	bl	80067b4 <_malloc_r>
 800896e:	6028      	str	r0, [r5, #0]
 8008970:	6128      	str	r0, [r5, #16]
 8008972:	b920      	cbnz	r0, 800897e <_svfiprintf_r+0x2e>
 8008974:	230c      	movs	r3, #12
 8008976:	603b      	str	r3, [r7, #0]
 8008978:	f04f 30ff 	mov.w	r0, #4294967295
 800897c:	e0d1      	b.n	8008b22 <_svfiprintf_r+0x1d2>
 800897e:	2340      	movs	r3, #64	; 0x40
 8008980:	616b      	str	r3, [r5, #20]
 8008982:	2300      	movs	r3, #0
 8008984:	9309      	str	r3, [sp, #36]	; 0x24
 8008986:	2320      	movs	r3, #32
 8008988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800898c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008990:	2330      	movs	r3, #48	; 0x30
 8008992:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b3c <_svfiprintf_r+0x1ec>
 8008996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800899a:	f04f 0901 	mov.w	r9, #1
 800899e:	4623      	mov	r3, r4
 80089a0:	469a      	mov	sl, r3
 80089a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a6:	b10a      	cbz	r2, 80089ac <_svfiprintf_r+0x5c>
 80089a8:	2a25      	cmp	r2, #37	; 0x25
 80089aa:	d1f9      	bne.n	80089a0 <_svfiprintf_r+0x50>
 80089ac:	ebba 0b04 	subs.w	fp, sl, r4
 80089b0:	d00b      	beq.n	80089ca <_svfiprintf_r+0x7a>
 80089b2:	465b      	mov	r3, fp
 80089b4:	4622      	mov	r2, r4
 80089b6:	4629      	mov	r1, r5
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7ff ff6e 	bl	800889a <__ssputs_r>
 80089be:	3001      	adds	r0, #1
 80089c0:	f000 80aa 	beq.w	8008b18 <_svfiprintf_r+0x1c8>
 80089c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089c6:	445a      	add	r2, fp
 80089c8:	9209      	str	r2, [sp, #36]	; 0x24
 80089ca:	f89a 3000 	ldrb.w	r3, [sl]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 80a2 	beq.w	8008b18 <_svfiprintf_r+0x1c8>
 80089d4:	2300      	movs	r3, #0
 80089d6:	f04f 32ff 	mov.w	r2, #4294967295
 80089da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089de:	f10a 0a01 	add.w	sl, sl, #1
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	9307      	str	r3, [sp, #28]
 80089e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089ea:	931a      	str	r3, [sp, #104]	; 0x68
 80089ec:	4654      	mov	r4, sl
 80089ee:	2205      	movs	r2, #5
 80089f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f4:	4851      	ldr	r0, [pc, #324]	; (8008b3c <_svfiprintf_r+0x1ec>)
 80089f6:	f7f7 fbfb 	bl	80001f0 <memchr>
 80089fa:	9a04      	ldr	r2, [sp, #16]
 80089fc:	b9d8      	cbnz	r0, 8008a36 <_svfiprintf_r+0xe6>
 80089fe:	06d0      	lsls	r0, r2, #27
 8008a00:	bf44      	itt	mi
 8008a02:	2320      	movmi	r3, #32
 8008a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a08:	0711      	lsls	r1, r2, #28
 8008a0a:	bf44      	itt	mi
 8008a0c:	232b      	movmi	r3, #43	; 0x2b
 8008a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a12:	f89a 3000 	ldrb.w	r3, [sl]
 8008a16:	2b2a      	cmp	r3, #42	; 0x2a
 8008a18:	d015      	beq.n	8008a46 <_svfiprintf_r+0xf6>
 8008a1a:	9a07      	ldr	r2, [sp, #28]
 8008a1c:	4654      	mov	r4, sl
 8008a1e:	2000      	movs	r0, #0
 8008a20:	f04f 0c0a 	mov.w	ip, #10
 8008a24:	4621      	mov	r1, r4
 8008a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a2a:	3b30      	subs	r3, #48	; 0x30
 8008a2c:	2b09      	cmp	r3, #9
 8008a2e:	d94e      	bls.n	8008ace <_svfiprintf_r+0x17e>
 8008a30:	b1b0      	cbz	r0, 8008a60 <_svfiprintf_r+0x110>
 8008a32:	9207      	str	r2, [sp, #28]
 8008a34:	e014      	b.n	8008a60 <_svfiprintf_r+0x110>
 8008a36:	eba0 0308 	sub.w	r3, r0, r8
 8008a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	9304      	str	r3, [sp, #16]
 8008a42:	46a2      	mov	sl, r4
 8008a44:	e7d2      	b.n	80089ec <_svfiprintf_r+0x9c>
 8008a46:	9b03      	ldr	r3, [sp, #12]
 8008a48:	1d19      	adds	r1, r3, #4
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	9103      	str	r1, [sp, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	bfbb      	ittet	lt
 8008a52:	425b      	neglt	r3, r3
 8008a54:	f042 0202 	orrlt.w	r2, r2, #2
 8008a58:	9307      	strge	r3, [sp, #28]
 8008a5a:	9307      	strlt	r3, [sp, #28]
 8008a5c:	bfb8      	it	lt
 8008a5e:	9204      	strlt	r2, [sp, #16]
 8008a60:	7823      	ldrb	r3, [r4, #0]
 8008a62:	2b2e      	cmp	r3, #46	; 0x2e
 8008a64:	d10c      	bne.n	8008a80 <_svfiprintf_r+0x130>
 8008a66:	7863      	ldrb	r3, [r4, #1]
 8008a68:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6a:	d135      	bne.n	8008ad8 <_svfiprintf_r+0x188>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	1d1a      	adds	r2, r3, #4
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	9203      	str	r2, [sp, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bfb8      	it	lt
 8008a78:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a7c:	3402      	adds	r4, #2
 8008a7e:	9305      	str	r3, [sp, #20]
 8008a80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b4c <_svfiprintf_r+0x1fc>
 8008a84:	7821      	ldrb	r1, [r4, #0]
 8008a86:	2203      	movs	r2, #3
 8008a88:	4650      	mov	r0, sl
 8008a8a:	f7f7 fbb1 	bl	80001f0 <memchr>
 8008a8e:	b140      	cbz	r0, 8008aa2 <_svfiprintf_r+0x152>
 8008a90:	2340      	movs	r3, #64	; 0x40
 8008a92:	eba0 000a 	sub.w	r0, r0, sl
 8008a96:	fa03 f000 	lsl.w	r0, r3, r0
 8008a9a:	9b04      	ldr	r3, [sp, #16]
 8008a9c:	4303      	orrs	r3, r0
 8008a9e:	3401      	adds	r4, #1
 8008aa0:	9304      	str	r3, [sp, #16]
 8008aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa6:	4826      	ldr	r0, [pc, #152]	; (8008b40 <_svfiprintf_r+0x1f0>)
 8008aa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008aac:	2206      	movs	r2, #6
 8008aae:	f7f7 fb9f 	bl	80001f0 <memchr>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d038      	beq.n	8008b28 <_svfiprintf_r+0x1d8>
 8008ab6:	4b23      	ldr	r3, [pc, #140]	; (8008b44 <_svfiprintf_r+0x1f4>)
 8008ab8:	bb1b      	cbnz	r3, 8008b02 <_svfiprintf_r+0x1b2>
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	3307      	adds	r3, #7
 8008abe:	f023 0307 	bic.w	r3, r3, #7
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	9303      	str	r3, [sp, #12]
 8008ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac8:	4433      	add	r3, r6
 8008aca:	9309      	str	r3, [sp, #36]	; 0x24
 8008acc:	e767      	b.n	800899e <_svfiprintf_r+0x4e>
 8008ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	2001      	movs	r0, #1
 8008ad6:	e7a5      	b.n	8008a24 <_svfiprintf_r+0xd4>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	3401      	adds	r4, #1
 8008adc:	9305      	str	r3, [sp, #20]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	f04f 0c0a 	mov.w	ip, #10
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aea:	3a30      	subs	r2, #48	; 0x30
 8008aec:	2a09      	cmp	r2, #9
 8008aee:	d903      	bls.n	8008af8 <_svfiprintf_r+0x1a8>
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0c5      	beq.n	8008a80 <_svfiprintf_r+0x130>
 8008af4:	9105      	str	r1, [sp, #20]
 8008af6:	e7c3      	b.n	8008a80 <_svfiprintf_r+0x130>
 8008af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008afc:	4604      	mov	r4, r0
 8008afe:	2301      	movs	r3, #1
 8008b00:	e7f0      	b.n	8008ae4 <_svfiprintf_r+0x194>
 8008b02:	ab03      	add	r3, sp, #12
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	462a      	mov	r2, r5
 8008b08:	4b0f      	ldr	r3, [pc, #60]	; (8008b48 <_svfiprintf_r+0x1f8>)
 8008b0a:	a904      	add	r1, sp, #16
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7fd ff65 	bl	80069dc <_printf_float>
 8008b12:	1c42      	adds	r2, r0, #1
 8008b14:	4606      	mov	r6, r0
 8008b16:	d1d6      	bne.n	8008ac6 <_svfiprintf_r+0x176>
 8008b18:	89ab      	ldrh	r3, [r5, #12]
 8008b1a:	065b      	lsls	r3, r3, #25
 8008b1c:	f53f af2c 	bmi.w	8008978 <_svfiprintf_r+0x28>
 8008b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b22:	b01d      	add	sp, #116	; 0x74
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	ab03      	add	r3, sp, #12
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	462a      	mov	r2, r5
 8008b2e:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <_svfiprintf_r+0x1f8>)
 8008b30:	a904      	add	r1, sp, #16
 8008b32:	4638      	mov	r0, r7
 8008b34:	f7fe f9f6 	bl	8006f24 <_printf_i>
 8008b38:	e7eb      	b.n	8008b12 <_svfiprintf_r+0x1c2>
 8008b3a:	bf00      	nop
 8008b3c:	0803ae1c 	.word	0x0803ae1c
 8008b40:	0803ae26 	.word	0x0803ae26
 8008b44:	080069dd 	.word	0x080069dd
 8008b48:	0800889b 	.word	0x0800889b
 8008b4c:	0803ae22 	.word	0x0803ae22

08008b50 <__sfputc_r>:
 8008b50:	6893      	ldr	r3, [r2, #8]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	b410      	push	{r4}
 8008b58:	6093      	str	r3, [r2, #8]
 8008b5a:	da08      	bge.n	8008b6e <__sfputc_r+0x1e>
 8008b5c:	6994      	ldr	r4, [r2, #24]
 8008b5e:	42a3      	cmp	r3, r4
 8008b60:	db01      	blt.n	8008b66 <__sfputc_r+0x16>
 8008b62:	290a      	cmp	r1, #10
 8008b64:	d103      	bne.n	8008b6e <__sfputc_r+0x1e>
 8008b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b6a:	f000 b98f 	b.w	8008e8c <__swbuf_r>
 8008b6e:	6813      	ldr	r3, [r2, #0]
 8008b70:	1c58      	adds	r0, r3, #1
 8008b72:	6010      	str	r0, [r2, #0]
 8008b74:	7019      	strb	r1, [r3, #0]
 8008b76:	4608      	mov	r0, r1
 8008b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <__sfputs_r>:
 8008b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b80:	4606      	mov	r6, r0
 8008b82:	460f      	mov	r7, r1
 8008b84:	4614      	mov	r4, r2
 8008b86:	18d5      	adds	r5, r2, r3
 8008b88:	42ac      	cmp	r4, r5
 8008b8a:	d101      	bne.n	8008b90 <__sfputs_r+0x12>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	e007      	b.n	8008ba0 <__sfputs_r+0x22>
 8008b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b94:	463a      	mov	r2, r7
 8008b96:	4630      	mov	r0, r6
 8008b98:	f7ff ffda 	bl	8008b50 <__sfputc_r>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d1f3      	bne.n	8008b88 <__sfputs_r+0xa>
 8008ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ba4 <_vfiprintf_r>:
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	460d      	mov	r5, r1
 8008baa:	b09d      	sub	sp, #116	; 0x74
 8008bac:	4614      	mov	r4, r2
 8008bae:	4698      	mov	r8, r3
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	b118      	cbz	r0, 8008bbc <_vfiprintf_r+0x18>
 8008bb4:	6983      	ldr	r3, [r0, #24]
 8008bb6:	b90b      	cbnz	r3, 8008bbc <_vfiprintf_r+0x18>
 8008bb8:	f7ff f9f4 	bl	8007fa4 <__sinit>
 8008bbc:	4b89      	ldr	r3, [pc, #548]	; (8008de4 <_vfiprintf_r+0x240>)
 8008bbe:	429d      	cmp	r5, r3
 8008bc0:	d11b      	bne.n	8008bfa <_vfiprintf_r+0x56>
 8008bc2:	6875      	ldr	r5, [r6, #4]
 8008bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bc6:	07d9      	lsls	r1, r3, #31
 8008bc8:	d405      	bmi.n	8008bd6 <_vfiprintf_r+0x32>
 8008bca:	89ab      	ldrh	r3, [r5, #12]
 8008bcc:	059a      	lsls	r2, r3, #22
 8008bce:	d402      	bmi.n	8008bd6 <_vfiprintf_r+0x32>
 8008bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bd2:	f7ff fa8a 	bl	80080ea <__retarget_lock_acquire_recursive>
 8008bd6:	89ab      	ldrh	r3, [r5, #12]
 8008bd8:	071b      	lsls	r3, r3, #28
 8008bda:	d501      	bpl.n	8008be0 <_vfiprintf_r+0x3c>
 8008bdc:	692b      	ldr	r3, [r5, #16]
 8008bde:	b9eb      	cbnz	r3, 8008c1c <_vfiprintf_r+0x78>
 8008be0:	4629      	mov	r1, r5
 8008be2:	4630      	mov	r0, r6
 8008be4:	f000 f9b6 	bl	8008f54 <__swsetup_r>
 8008be8:	b1c0      	cbz	r0, 8008c1c <_vfiprintf_r+0x78>
 8008bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bec:	07dc      	lsls	r4, r3, #31
 8008bee:	d50e      	bpl.n	8008c0e <_vfiprintf_r+0x6a>
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	b01d      	add	sp, #116	; 0x74
 8008bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfa:	4b7b      	ldr	r3, [pc, #492]	; (8008de8 <_vfiprintf_r+0x244>)
 8008bfc:	429d      	cmp	r5, r3
 8008bfe:	d101      	bne.n	8008c04 <_vfiprintf_r+0x60>
 8008c00:	68b5      	ldr	r5, [r6, #8]
 8008c02:	e7df      	b.n	8008bc4 <_vfiprintf_r+0x20>
 8008c04:	4b79      	ldr	r3, [pc, #484]	; (8008dec <_vfiprintf_r+0x248>)
 8008c06:	429d      	cmp	r5, r3
 8008c08:	bf08      	it	eq
 8008c0a:	68f5      	ldreq	r5, [r6, #12]
 8008c0c:	e7da      	b.n	8008bc4 <_vfiprintf_r+0x20>
 8008c0e:	89ab      	ldrh	r3, [r5, #12]
 8008c10:	0598      	lsls	r0, r3, #22
 8008c12:	d4ed      	bmi.n	8008bf0 <_vfiprintf_r+0x4c>
 8008c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c16:	f7ff fa69 	bl	80080ec <__retarget_lock_release_recursive>
 8008c1a:	e7e9      	b.n	8008bf0 <_vfiprintf_r+0x4c>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c20:	2320      	movs	r3, #32
 8008c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c2a:	2330      	movs	r3, #48	; 0x30
 8008c2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008df0 <_vfiprintf_r+0x24c>
 8008c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c34:	f04f 0901 	mov.w	r9, #1
 8008c38:	4623      	mov	r3, r4
 8008c3a:	469a      	mov	sl, r3
 8008c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c40:	b10a      	cbz	r2, 8008c46 <_vfiprintf_r+0xa2>
 8008c42:	2a25      	cmp	r2, #37	; 0x25
 8008c44:	d1f9      	bne.n	8008c3a <_vfiprintf_r+0x96>
 8008c46:	ebba 0b04 	subs.w	fp, sl, r4
 8008c4a:	d00b      	beq.n	8008c64 <_vfiprintf_r+0xc0>
 8008c4c:	465b      	mov	r3, fp
 8008c4e:	4622      	mov	r2, r4
 8008c50:	4629      	mov	r1, r5
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff ff93 	bl	8008b7e <__sfputs_r>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f000 80aa 	beq.w	8008db2 <_vfiprintf_r+0x20e>
 8008c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c60:	445a      	add	r2, fp
 8008c62:	9209      	str	r2, [sp, #36]	; 0x24
 8008c64:	f89a 3000 	ldrb.w	r3, [sl]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 80a2 	beq.w	8008db2 <_vfiprintf_r+0x20e>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f04f 32ff 	mov.w	r2, #4294967295
 8008c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c78:	f10a 0a01 	add.w	sl, sl, #1
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	9307      	str	r3, [sp, #28]
 8008c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c84:	931a      	str	r3, [sp, #104]	; 0x68
 8008c86:	4654      	mov	r4, sl
 8008c88:	2205      	movs	r2, #5
 8008c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c8e:	4858      	ldr	r0, [pc, #352]	; (8008df0 <_vfiprintf_r+0x24c>)
 8008c90:	f7f7 faae 	bl	80001f0 <memchr>
 8008c94:	9a04      	ldr	r2, [sp, #16]
 8008c96:	b9d8      	cbnz	r0, 8008cd0 <_vfiprintf_r+0x12c>
 8008c98:	06d1      	lsls	r1, r2, #27
 8008c9a:	bf44      	itt	mi
 8008c9c:	2320      	movmi	r3, #32
 8008c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca2:	0713      	lsls	r3, r2, #28
 8008ca4:	bf44      	itt	mi
 8008ca6:	232b      	movmi	r3, #43	; 0x2b
 8008ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cac:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb2:	d015      	beq.n	8008ce0 <_vfiprintf_r+0x13c>
 8008cb4:	9a07      	ldr	r2, [sp, #28]
 8008cb6:	4654      	mov	r4, sl
 8008cb8:	2000      	movs	r0, #0
 8008cba:	f04f 0c0a 	mov.w	ip, #10
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc4:	3b30      	subs	r3, #48	; 0x30
 8008cc6:	2b09      	cmp	r3, #9
 8008cc8:	d94e      	bls.n	8008d68 <_vfiprintf_r+0x1c4>
 8008cca:	b1b0      	cbz	r0, 8008cfa <_vfiprintf_r+0x156>
 8008ccc:	9207      	str	r2, [sp, #28]
 8008cce:	e014      	b.n	8008cfa <_vfiprintf_r+0x156>
 8008cd0:	eba0 0308 	sub.w	r3, r0, r8
 8008cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	46a2      	mov	sl, r4
 8008cde:	e7d2      	b.n	8008c86 <_vfiprintf_r+0xe2>
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	1d19      	adds	r1, r3, #4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	9103      	str	r1, [sp, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bfbb      	ittet	lt
 8008cec:	425b      	neglt	r3, r3
 8008cee:	f042 0202 	orrlt.w	r2, r2, #2
 8008cf2:	9307      	strge	r3, [sp, #28]
 8008cf4:	9307      	strlt	r3, [sp, #28]
 8008cf6:	bfb8      	it	lt
 8008cf8:	9204      	strlt	r2, [sp, #16]
 8008cfa:	7823      	ldrb	r3, [r4, #0]
 8008cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8008cfe:	d10c      	bne.n	8008d1a <_vfiprintf_r+0x176>
 8008d00:	7863      	ldrb	r3, [r4, #1]
 8008d02:	2b2a      	cmp	r3, #42	; 0x2a
 8008d04:	d135      	bne.n	8008d72 <_vfiprintf_r+0x1ce>
 8008d06:	9b03      	ldr	r3, [sp, #12]
 8008d08:	1d1a      	adds	r2, r3, #4
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	9203      	str	r2, [sp, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	bfb8      	it	lt
 8008d12:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d16:	3402      	adds	r4, #2
 8008d18:	9305      	str	r3, [sp, #20]
 8008d1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e00 <_vfiprintf_r+0x25c>
 8008d1e:	7821      	ldrb	r1, [r4, #0]
 8008d20:	2203      	movs	r2, #3
 8008d22:	4650      	mov	r0, sl
 8008d24:	f7f7 fa64 	bl	80001f0 <memchr>
 8008d28:	b140      	cbz	r0, 8008d3c <_vfiprintf_r+0x198>
 8008d2a:	2340      	movs	r3, #64	; 0x40
 8008d2c:	eba0 000a 	sub.w	r0, r0, sl
 8008d30:	fa03 f000 	lsl.w	r0, r3, r0
 8008d34:	9b04      	ldr	r3, [sp, #16]
 8008d36:	4303      	orrs	r3, r0
 8008d38:	3401      	adds	r4, #1
 8008d3a:	9304      	str	r3, [sp, #16]
 8008d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d40:	482c      	ldr	r0, [pc, #176]	; (8008df4 <_vfiprintf_r+0x250>)
 8008d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d46:	2206      	movs	r2, #6
 8008d48:	f7f7 fa52 	bl	80001f0 <memchr>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d03f      	beq.n	8008dd0 <_vfiprintf_r+0x22c>
 8008d50:	4b29      	ldr	r3, [pc, #164]	; (8008df8 <_vfiprintf_r+0x254>)
 8008d52:	bb1b      	cbnz	r3, 8008d9c <_vfiprintf_r+0x1f8>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	3307      	adds	r3, #7
 8008d58:	f023 0307 	bic.w	r3, r3, #7
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	9303      	str	r3, [sp, #12]
 8008d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d62:	443b      	add	r3, r7
 8008d64:	9309      	str	r3, [sp, #36]	; 0x24
 8008d66:	e767      	b.n	8008c38 <_vfiprintf_r+0x94>
 8008d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	2001      	movs	r0, #1
 8008d70:	e7a5      	b.n	8008cbe <_vfiprintf_r+0x11a>
 8008d72:	2300      	movs	r3, #0
 8008d74:	3401      	adds	r4, #1
 8008d76:	9305      	str	r3, [sp, #20]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	f04f 0c0a 	mov.w	ip, #10
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d84:	3a30      	subs	r2, #48	; 0x30
 8008d86:	2a09      	cmp	r2, #9
 8008d88:	d903      	bls.n	8008d92 <_vfiprintf_r+0x1ee>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0c5      	beq.n	8008d1a <_vfiprintf_r+0x176>
 8008d8e:	9105      	str	r1, [sp, #20]
 8008d90:	e7c3      	b.n	8008d1a <_vfiprintf_r+0x176>
 8008d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d96:	4604      	mov	r4, r0
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e7f0      	b.n	8008d7e <_vfiprintf_r+0x1da>
 8008d9c:	ab03      	add	r3, sp, #12
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	462a      	mov	r2, r5
 8008da2:	4b16      	ldr	r3, [pc, #88]	; (8008dfc <_vfiprintf_r+0x258>)
 8008da4:	a904      	add	r1, sp, #16
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7fd fe18 	bl	80069dc <_printf_float>
 8008dac:	4607      	mov	r7, r0
 8008dae:	1c78      	adds	r0, r7, #1
 8008db0:	d1d6      	bne.n	8008d60 <_vfiprintf_r+0x1bc>
 8008db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008db4:	07d9      	lsls	r1, r3, #31
 8008db6:	d405      	bmi.n	8008dc4 <_vfiprintf_r+0x220>
 8008db8:	89ab      	ldrh	r3, [r5, #12]
 8008dba:	059a      	lsls	r2, r3, #22
 8008dbc:	d402      	bmi.n	8008dc4 <_vfiprintf_r+0x220>
 8008dbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dc0:	f7ff f994 	bl	80080ec <__retarget_lock_release_recursive>
 8008dc4:	89ab      	ldrh	r3, [r5, #12]
 8008dc6:	065b      	lsls	r3, r3, #25
 8008dc8:	f53f af12 	bmi.w	8008bf0 <_vfiprintf_r+0x4c>
 8008dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dce:	e711      	b.n	8008bf4 <_vfiprintf_r+0x50>
 8008dd0:	ab03      	add	r3, sp, #12
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	462a      	mov	r2, r5
 8008dd6:	4b09      	ldr	r3, [pc, #36]	; (8008dfc <_vfiprintf_r+0x258>)
 8008dd8:	a904      	add	r1, sp, #16
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7fe f8a2 	bl	8006f24 <_printf_i>
 8008de0:	e7e4      	b.n	8008dac <_vfiprintf_r+0x208>
 8008de2:	bf00      	nop
 8008de4:	0803ac80 	.word	0x0803ac80
 8008de8:	0803aca0 	.word	0x0803aca0
 8008dec:	0803ac60 	.word	0x0803ac60
 8008df0:	0803ae1c 	.word	0x0803ae1c
 8008df4:	0803ae26 	.word	0x0803ae26
 8008df8:	080069dd 	.word	0x080069dd
 8008dfc:	08008b7f 	.word	0x08008b7f
 8008e00:	0803ae22 	.word	0x0803ae22

08008e04 <__sread>:
 8008e04:	b510      	push	{r4, lr}
 8008e06:	460c      	mov	r4, r1
 8008e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e0c:	f000 fabe 	bl	800938c <_read_r>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	bfab      	itete	ge
 8008e14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e16:	89a3      	ldrhlt	r3, [r4, #12]
 8008e18:	181b      	addge	r3, r3, r0
 8008e1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e1e:	bfac      	ite	ge
 8008e20:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e22:	81a3      	strhlt	r3, [r4, #12]
 8008e24:	bd10      	pop	{r4, pc}

08008e26 <__swrite>:
 8008e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2a:	461f      	mov	r7, r3
 8008e2c:	898b      	ldrh	r3, [r1, #12]
 8008e2e:	05db      	lsls	r3, r3, #23
 8008e30:	4605      	mov	r5, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	4616      	mov	r6, r2
 8008e36:	d505      	bpl.n	8008e44 <__swrite+0x1e>
 8008e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f000 f9f8 	bl	8009234 <_lseek_r>
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e4e:	81a3      	strh	r3, [r4, #12]
 8008e50:	4632      	mov	r2, r6
 8008e52:	463b      	mov	r3, r7
 8008e54:	4628      	mov	r0, r5
 8008e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5a:	f000 b869 	b.w	8008f30 <_write_r>

08008e5e <__sseek>:
 8008e5e:	b510      	push	{r4, lr}
 8008e60:	460c      	mov	r4, r1
 8008e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e66:	f000 f9e5 	bl	8009234 <_lseek_r>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	bf15      	itete	ne
 8008e70:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e7a:	81a3      	strheq	r3, [r4, #12]
 8008e7c:	bf18      	it	ne
 8008e7e:	81a3      	strhne	r3, [r4, #12]
 8008e80:	bd10      	pop	{r4, pc}

08008e82 <__sclose>:
 8008e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e86:	f000 b8f1 	b.w	800906c <_close_r>
	...

08008e8c <__swbuf_r>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	460e      	mov	r6, r1
 8008e90:	4614      	mov	r4, r2
 8008e92:	4605      	mov	r5, r0
 8008e94:	b118      	cbz	r0, 8008e9e <__swbuf_r+0x12>
 8008e96:	6983      	ldr	r3, [r0, #24]
 8008e98:	b90b      	cbnz	r3, 8008e9e <__swbuf_r+0x12>
 8008e9a:	f7ff f883 	bl	8007fa4 <__sinit>
 8008e9e:	4b21      	ldr	r3, [pc, #132]	; (8008f24 <__swbuf_r+0x98>)
 8008ea0:	429c      	cmp	r4, r3
 8008ea2:	d12b      	bne.n	8008efc <__swbuf_r+0x70>
 8008ea4:	686c      	ldr	r4, [r5, #4]
 8008ea6:	69a3      	ldr	r3, [r4, #24]
 8008ea8:	60a3      	str	r3, [r4, #8]
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	071a      	lsls	r2, r3, #28
 8008eae:	d52f      	bpl.n	8008f10 <__swbuf_r+0x84>
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	b36b      	cbz	r3, 8008f10 <__swbuf_r+0x84>
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	6820      	ldr	r0, [r4, #0]
 8008eb8:	1ac0      	subs	r0, r0, r3
 8008eba:	6963      	ldr	r3, [r4, #20]
 8008ebc:	b2f6      	uxtb	r6, r6
 8008ebe:	4283      	cmp	r3, r0
 8008ec0:	4637      	mov	r7, r6
 8008ec2:	dc04      	bgt.n	8008ece <__swbuf_r+0x42>
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 f966 	bl	8009198 <_fflush_r>
 8008ecc:	bb30      	cbnz	r0, 8008f1c <__swbuf_r+0x90>
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	60a3      	str	r3, [r4, #8]
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	701e      	strb	r6, [r3, #0]
 8008edc:	6963      	ldr	r3, [r4, #20]
 8008ede:	3001      	adds	r0, #1
 8008ee0:	4283      	cmp	r3, r0
 8008ee2:	d004      	beq.n	8008eee <__swbuf_r+0x62>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	07db      	lsls	r3, r3, #31
 8008ee8:	d506      	bpl.n	8008ef8 <__swbuf_r+0x6c>
 8008eea:	2e0a      	cmp	r6, #10
 8008eec:	d104      	bne.n	8008ef8 <__swbuf_r+0x6c>
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f000 f951 	bl	8009198 <_fflush_r>
 8008ef6:	b988      	cbnz	r0, 8008f1c <__swbuf_r+0x90>
 8008ef8:	4638      	mov	r0, r7
 8008efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <__swbuf_r+0x9c>)
 8008efe:	429c      	cmp	r4, r3
 8008f00:	d101      	bne.n	8008f06 <__swbuf_r+0x7a>
 8008f02:	68ac      	ldr	r4, [r5, #8]
 8008f04:	e7cf      	b.n	8008ea6 <__swbuf_r+0x1a>
 8008f06:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <__swbuf_r+0xa0>)
 8008f08:	429c      	cmp	r4, r3
 8008f0a:	bf08      	it	eq
 8008f0c:	68ec      	ldreq	r4, [r5, #12]
 8008f0e:	e7ca      	b.n	8008ea6 <__swbuf_r+0x1a>
 8008f10:	4621      	mov	r1, r4
 8008f12:	4628      	mov	r0, r5
 8008f14:	f000 f81e 	bl	8008f54 <__swsetup_r>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d0cb      	beq.n	8008eb4 <__swbuf_r+0x28>
 8008f1c:	f04f 37ff 	mov.w	r7, #4294967295
 8008f20:	e7ea      	b.n	8008ef8 <__swbuf_r+0x6c>
 8008f22:	bf00      	nop
 8008f24:	0803ac80 	.word	0x0803ac80
 8008f28:	0803aca0 	.word	0x0803aca0
 8008f2c:	0803ac60 	.word	0x0803ac60

08008f30 <_write_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d07      	ldr	r5, [pc, #28]	; (8008f50 <_write_r+0x20>)
 8008f34:	4604      	mov	r4, r0
 8008f36:	4608      	mov	r0, r1
 8008f38:	4611      	mov	r1, r2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f000 fc1c 	bl	800977c <_write>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_write_r+0x1e>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_write_r+0x1e>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	20007590 	.word	0x20007590

08008f54 <__swsetup_r>:
 8008f54:	4b32      	ldr	r3, [pc, #200]	; (8009020 <__swsetup_r+0xcc>)
 8008f56:	b570      	push	{r4, r5, r6, lr}
 8008f58:	681d      	ldr	r5, [r3, #0]
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	b125      	cbz	r5, 8008f6a <__swsetup_r+0x16>
 8008f60:	69ab      	ldr	r3, [r5, #24]
 8008f62:	b913      	cbnz	r3, 8008f6a <__swsetup_r+0x16>
 8008f64:	4628      	mov	r0, r5
 8008f66:	f7ff f81d 	bl	8007fa4 <__sinit>
 8008f6a:	4b2e      	ldr	r3, [pc, #184]	; (8009024 <__swsetup_r+0xd0>)
 8008f6c:	429c      	cmp	r4, r3
 8008f6e:	d10f      	bne.n	8008f90 <__swsetup_r+0x3c>
 8008f70:	686c      	ldr	r4, [r5, #4]
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f78:	0719      	lsls	r1, r3, #28
 8008f7a:	d42c      	bmi.n	8008fd6 <__swsetup_r+0x82>
 8008f7c:	06dd      	lsls	r5, r3, #27
 8008f7e:	d411      	bmi.n	8008fa4 <__swsetup_r+0x50>
 8008f80:	2309      	movs	r3, #9
 8008f82:	6033      	str	r3, [r6, #0]
 8008f84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f88:	81a3      	strh	r3, [r4, #12]
 8008f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8e:	e03e      	b.n	800900e <__swsetup_r+0xba>
 8008f90:	4b25      	ldr	r3, [pc, #148]	; (8009028 <__swsetup_r+0xd4>)
 8008f92:	429c      	cmp	r4, r3
 8008f94:	d101      	bne.n	8008f9a <__swsetup_r+0x46>
 8008f96:	68ac      	ldr	r4, [r5, #8]
 8008f98:	e7eb      	b.n	8008f72 <__swsetup_r+0x1e>
 8008f9a:	4b24      	ldr	r3, [pc, #144]	; (800902c <__swsetup_r+0xd8>)
 8008f9c:	429c      	cmp	r4, r3
 8008f9e:	bf08      	it	eq
 8008fa0:	68ec      	ldreq	r4, [r5, #12]
 8008fa2:	e7e6      	b.n	8008f72 <__swsetup_r+0x1e>
 8008fa4:	0758      	lsls	r0, r3, #29
 8008fa6:	d512      	bpl.n	8008fce <__swsetup_r+0x7a>
 8008fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008faa:	b141      	cbz	r1, 8008fbe <__swsetup_r+0x6a>
 8008fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fb0:	4299      	cmp	r1, r3
 8008fb2:	d002      	beq.n	8008fba <__swsetup_r+0x66>
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f7fd fb91 	bl	80066dc <_free_r>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fc4:	81a3      	strh	r3, [r4, #12]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	6063      	str	r3, [r4, #4]
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	f043 0308 	orr.w	r3, r3, #8
 8008fd4:	81a3      	strh	r3, [r4, #12]
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	b94b      	cbnz	r3, 8008fee <__swsetup_r+0x9a>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fe4:	d003      	beq.n	8008fee <__swsetup_r+0x9a>
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f000 f95b 	bl	80092a4 <__smakebuf_r>
 8008fee:	89a0      	ldrh	r0, [r4, #12]
 8008ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ff4:	f010 0301 	ands.w	r3, r0, #1
 8008ff8:	d00a      	beq.n	8009010 <__swsetup_r+0xbc>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60a3      	str	r3, [r4, #8]
 8008ffe:	6963      	ldr	r3, [r4, #20]
 8009000:	425b      	negs	r3, r3
 8009002:	61a3      	str	r3, [r4, #24]
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	b943      	cbnz	r3, 800901a <__swsetup_r+0xc6>
 8009008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800900c:	d1ba      	bne.n	8008f84 <__swsetup_r+0x30>
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	0781      	lsls	r1, r0, #30
 8009012:	bf58      	it	pl
 8009014:	6963      	ldrpl	r3, [r4, #20]
 8009016:	60a3      	str	r3, [r4, #8]
 8009018:	e7f4      	b.n	8009004 <__swsetup_r+0xb0>
 800901a:	2000      	movs	r0, #0
 800901c:	e7f7      	b.n	800900e <__swsetup_r+0xba>
 800901e:	bf00      	nop
 8009020:	20000950 	.word	0x20000950
 8009024:	0803ac80 	.word	0x0803ac80
 8009028:	0803aca0 	.word	0x0803aca0
 800902c:	0803ac60 	.word	0x0803ac60

08009030 <__assert_func>:
 8009030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009032:	4614      	mov	r4, r2
 8009034:	461a      	mov	r2, r3
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <__assert_func+0x2c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4605      	mov	r5, r0
 800903c:	68d8      	ldr	r0, [r3, #12]
 800903e:	b14c      	cbz	r4, 8009054 <__assert_func+0x24>
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <__assert_func+0x30>)
 8009042:	9100      	str	r1, [sp, #0]
 8009044:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009048:	4906      	ldr	r1, [pc, #24]	; (8009064 <__assert_func+0x34>)
 800904a:	462b      	mov	r3, r5
 800904c:	f000 f8e0 	bl	8009210 <fiprintf>
 8009050:	f000 f9bb 	bl	80093ca <abort>
 8009054:	4b04      	ldr	r3, [pc, #16]	; (8009068 <__assert_func+0x38>)
 8009056:	461c      	mov	r4, r3
 8009058:	e7f3      	b.n	8009042 <__assert_func+0x12>
 800905a:	bf00      	nop
 800905c:	20000950 	.word	0x20000950
 8009060:	0803ae2d 	.word	0x0803ae2d
 8009064:	0803ae3a 	.word	0x0803ae3a
 8009068:	08009872 	.word	0x08009872

0800906c <_close_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d06      	ldr	r5, [pc, #24]	; (8009088 <_close_r+0x1c>)
 8009070:	2300      	movs	r3, #0
 8009072:	4604      	mov	r4, r0
 8009074:	4608      	mov	r0, r1
 8009076:	602b      	str	r3, [r5, #0]
 8009078:	f000 fb48 	bl	800970c <_close>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	d102      	bne.n	8009086 <_close_r+0x1a>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	b103      	cbz	r3, 8009086 <_close_r+0x1a>
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	20007590 	.word	0x20007590

0800908c <__sflush_r>:
 800908c:	898a      	ldrh	r2, [r1, #12]
 800908e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009092:	4605      	mov	r5, r0
 8009094:	0710      	lsls	r0, r2, #28
 8009096:	460c      	mov	r4, r1
 8009098:	d458      	bmi.n	800914c <__sflush_r+0xc0>
 800909a:	684b      	ldr	r3, [r1, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	dc05      	bgt.n	80090ac <__sflush_r+0x20>
 80090a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	dc02      	bgt.n	80090ac <__sflush_r+0x20>
 80090a6:	2000      	movs	r0, #0
 80090a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ae:	2e00      	cmp	r6, #0
 80090b0:	d0f9      	beq.n	80090a6 <__sflush_r+0x1a>
 80090b2:	2300      	movs	r3, #0
 80090b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090b8:	682f      	ldr	r7, [r5, #0]
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	d032      	beq.n	8009124 <__sflush_r+0x98>
 80090be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	075a      	lsls	r2, r3, #29
 80090c4:	d505      	bpl.n	80090d2 <__sflush_r+0x46>
 80090c6:	6863      	ldr	r3, [r4, #4]
 80090c8:	1ac0      	subs	r0, r0, r3
 80090ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090cc:	b10b      	cbz	r3, 80090d2 <__sflush_r+0x46>
 80090ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090d0:	1ac0      	subs	r0, r0, r3
 80090d2:	2300      	movs	r3, #0
 80090d4:	4602      	mov	r2, r0
 80090d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090d8:	6a21      	ldr	r1, [r4, #32]
 80090da:	4628      	mov	r0, r5
 80090dc:	47b0      	blx	r6
 80090de:	1c43      	adds	r3, r0, #1
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	d106      	bne.n	80090f2 <__sflush_r+0x66>
 80090e4:	6829      	ldr	r1, [r5, #0]
 80090e6:	291d      	cmp	r1, #29
 80090e8:	d82c      	bhi.n	8009144 <__sflush_r+0xb8>
 80090ea:	4a2a      	ldr	r2, [pc, #168]	; (8009194 <__sflush_r+0x108>)
 80090ec:	40ca      	lsrs	r2, r1
 80090ee:	07d6      	lsls	r6, r2, #31
 80090f0:	d528      	bpl.n	8009144 <__sflush_r+0xb8>
 80090f2:	2200      	movs	r2, #0
 80090f4:	6062      	str	r2, [r4, #4]
 80090f6:	04d9      	lsls	r1, r3, #19
 80090f8:	6922      	ldr	r2, [r4, #16]
 80090fa:	6022      	str	r2, [r4, #0]
 80090fc:	d504      	bpl.n	8009108 <__sflush_r+0x7c>
 80090fe:	1c42      	adds	r2, r0, #1
 8009100:	d101      	bne.n	8009106 <__sflush_r+0x7a>
 8009102:	682b      	ldr	r3, [r5, #0]
 8009104:	b903      	cbnz	r3, 8009108 <__sflush_r+0x7c>
 8009106:	6560      	str	r0, [r4, #84]	; 0x54
 8009108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800910a:	602f      	str	r7, [r5, #0]
 800910c:	2900      	cmp	r1, #0
 800910e:	d0ca      	beq.n	80090a6 <__sflush_r+0x1a>
 8009110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009114:	4299      	cmp	r1, r3
 8009116:	d002      	beq.n	800911e <__sflush_r+0x92>
 8009118:	4628      	mov	r0, r5
 800911a:	f7fd fadf 	bl	80066dc <_free_r>
 800911e:	2000      	movs	r0, #0
 8009120:	6360      	str	r0, [r4, #52]	; 0x34
 8009122:	e7c1      	b.n	80090a8 <__sflush_r+0x1c>
 8009124:	6a21      	ldr	r1, [r4, #32]
 8009126:	2301      	movs	r3, #1
 8009128:	4628      	mov	r0, r5
 800912a:	47b0      	blx	r6
 800912c:	1c41      	adds	r1, r0, #1
 800912e:	d1c7      	bne.n	80090c0 <__sflush_r+0x34>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d0c4      	beq.n	80090c0 <__sflush_r+0x34>
 8009136:	2b1d      	cmp	r3, #29
 8009138:	d001      	beq.n	800913e <__sflush_r+0xb2>
 800913a:	2b16      	cmp	r3, #22
 800913c:	d101      	bne.n	8009142 <__sflush_r+0xb6>
 800913e:	602f      	str	r7, [r5, #0]
 8009140:	e7b1      	b.n	80090a6 <__sflush_r+0x1a>
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009148:	81a3      	strh	r3, [r4, #12]
 800914a:	e7ad      	b.n	80090a8 <__sflush_r+0x1c>
 800914c:	690f      	ldr	r7, [r1, #16]
 800914e:	2f00      	cmp	r7, #0
 8009150:	d0a9      	beq.n	80090a6 <__sflush_r+0x1a>
 8009152:	0793      	lsls	r3, r2, #30
 8009154:	680e      	ldr	r6, [r1, #0]
 8009156:	bf08      	it	eq
 8009158:	694b      	ldreq	r3, [r1, #20]
 800915a:	600f      	str	r7, [r1, #0]
 800915c:	bf18      	it	ne
 800915e:	2300      	movne	r3, #0
 8009160:	eba6 0807 	sub.w	r8, r6, r7
 8009164:	608b      	str	r3, [r1, #8]
 8009166:	f1b8 0f00 	cmp.w	r8, #0
 800916a:	dd9c      	ble.n	80090a6 <__sflush_r+0x1a>
 800916c:	6a21      	ldr	r1, [r4, #32]
 800916e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009170:	4643      	mov	r3, r8
 8009172:	463a      	mov	r2, r7
 8009174:	4628      	mov	r0, r5
 8009176:	47b0      	blx	r6
 8009178:	2800      	cmp	r0, #0
 800917a:	dc06      	bgt.n	800918a <__sflush_r+0xfe>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	e78e      	b.n	80090a8 <__sflush_r+0x1c>
 800918a:	4407      	add	r7, r0
 800918c:	eba8 0800 	sub.w	r8, r8, r0
 8009190:	e7e9      	b.n	8009166 <__sflush_r+0xda>
 8009192:	bf00      	nop
 8009194:	20400001 	.word	0x20400001

08009198 <_fflush_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	690b      	ldr	r3, [r1, #16]
 800919c:	4605      	mov	r5, r0
 800919e:	460c      	mov	r4, r1
 80091a0:	b913      	cbnz	r3, 80091a8 <_fflush_r+0x10>
 80091a2:	2500      	movs	r5, #0
 80091a4:	4628      	mov	r0, r5
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	b118      	cbz	r0, 80091b2 <_fflush_r+0x1a>
 80091aa:	6983      	ldr	r3, [r0, #24]
 80091ac:	b90b      	cbnz	r3, 80091b2 <_fflush_r+0x1a>
 80091ae:	f7fe fef9 	bl	8007fa4 <__sinit>
 80091b2:	4b14      	ldr	r3, [pc, #80]	; (8009204 <_fflush_r+0x6c>)
 80091b4:	429c      	cmp	r4, r3
 80091b6:	d11b      	bne.n	80091f0 <_fflush_r+0x58>
 80091b8:	686c      	ldr	r4, [r5, #4]
 80091ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d0ef      	beq.n	80091a2 <_fflush_r+0xa>
 80091c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091c4:	07d0      	lsls	r0, r2, #31
 80091c6:	d404      	bmi.n	80091d2 <_fflush_r+0x3a>
 80091c8:	0599      	lsls	r1, r3, #22
 80091ca:	d402      	bmi.n	80091d2 <_fflush_r+0x3a>
 80091cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ce:	f7fe ff8c 	bl	80080ea <__retarget_lock_acquire_recursive>
 80091d2:	4628      	mov	r0, r5
 80091d4:	4621      	mov	r1, r4
 80091d6:	f7ff ff59 	bl	800908c <__sflush_r>
 80091da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091dc:	07da      	lsls	r2, r3, #31
 80091de:	4605      	mov	r5, r0
 80091e0:	d4e0      	bmi.n	80091a4 <_fflush_r+0xc>
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	059b      	lsls	r3, r3, #22
 80091e6:	d4dd      	bmi.n	80091a4 <_fflush_r+0xc>
 80091e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ea:	f7fe ff7f 	bl	80080ec <__retarget_lock_release_recursive>
 80091ee:	e7d9      	b.n	80091a4 <_fflush_r+0xc>
 80091f0:	4b05      	ldr	r3, [pc, #20]	; (8009208 <_fflush_r+0x70>)
 80091f2:	429c      	cmp	r4, r3
 80091f4:	d101      	bne.n	80091fa <_fflush_r+0x62>
 80091f6:	68ac      	ldr	r4, [r5, #8]
 80091f8:	e7df      	b.n	80091ba <_fflush_r+0x22>
 80091fa:	4b04      	ldr	r3, [pc, #16]	; (800920c <_fflush_r+0x74>)
 80091fc:	429c      	cmp	r4, r3
 80091fe:	bf08      	it	eq
 8009200:	68ec      	ldreq	r4, [r5, #12]
 8009202:	e7da      	b.n	80091ba <_fflush_r+0x22>
 8009204:	0803ac80 	.word	0x0803ac80
 8009208:	0803aca0 	.word	0x0803aca0
 800920c:	0803ac60 	.word	0x0803ac60

08009210 <fiprintf>:
 8009210:	b40e      	push	{r1, r2, r3}
 8009212:	b503      	push	{r0, r1, lr}
 8009214:	4601      	mov	r1, r0
 8009216:	ab03      	add	r3, sp, #12
 8009218:	4805      	ldr	r0, [pc, #20]	; (8009230 <fiprintf+0x20>)
 800921a:	f853 2b04 	ldr.w	r2, [r3], #4
 800921e:	6800      	ldr	r0, [r0, #0]
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	f7ff fcbf 	bl	8008ba4 <_vfiprintf_r>
 8009226:	b002      	add	sp, #8
 8009228:	f85d eb04 	ldr.w	lr, [sp], #4
 800922c:	b003      	add	sp, #12
 800922e:	4770      	bx	lr
 8009230:	20000950 	.word	0x20000950

08009234 <_lseek_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d07      	ldr	r5, [pc, #28]	; (8009254 <_lseek_r+0x20>)
 8009238:	4604      	mov	r4, r0
 800923a:	4608      	mov	r0, r1
 800923c:	4611      	mov	r1, r2
 800923e:	2200      	movs	r2, #0
 8009240:	602a      	str	r2, [r5, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	f000 fa8a 	bl	800975c <_lseek>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_lseek_r+0x1e>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_lseek_r+0x1e>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	20007590 	.word	0x20007590

08009258 <__swhatbuf_r>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	460e      	mov	r6, r1
 800925c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009260:	2900      	cmp	r1, #0
 8009262:	b096      	sub	sp, #88	; 0x58
 8009264:	4614      	mov	r4, r2
 8009266:	461d      	mov	r5, r3
 8009268:	da08      	bge.n	800927c <__swhatbuf_r+0x24>
 800926a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	061a      	lsls	r2, r3, #24
 8009274:	d410      	bmi.n	8009298 <__swhatbuf_r+0x40>
 8009276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800927a:	e00e      	b.n	800929a <__swhatbuf_r+0x42>
 800927c:	466a      	mov	r2, sp
 800927e:	f000 f8ab 	bl	80093d8 <_fstat_r>
 8009282:	2800      	cmp	r0, #0
 8009284:	dbf1      	blt.n	800926a <__swhatbuf_r+0x12>
 8009286:	9a01      	ldr	r2, [sp, #4]
 8009288:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800928c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009290:	425a      	negs	r2, r3
 8009292:	415a      	adcs	r2, r3
 8009294:	602a      	str	r2, [r5, #0]
 8009296:	e7ee      	b.n	8009276 <__swhatbuf_r+0x1e>
 8009298:	2340      	movs	r3, #64	; 0x40
 800929a:	2000      	movs	r0, #0
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	b016      	add	sp, #88	; 0x58
 80092a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080092a4 <__smakebuf_r>:
 80092a4:	898b      	ldrh	r3, [r1, #12]
 80092a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092a8:	079d      	lsls	r5, r3, #30
 80092aa:	4606      	mov	r6, r0
 80092ac:	460c      	mov	r4, r1
 80092ae:	d507      	bpl.n	80092c0 <__smakebuf_r+0x1c>
 80092b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	6123      	str	r3, [r4, #16]
 80092b8:	2301      	movs	r3, #1
 80092ba:	6163      	str	r3, [r4, #20]
 80092bc:	b002      	add	sp, #8
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	ab01      	add	r3, sp, #4
 80092c2:	466a      	mov	r2, sp
 80092c4:	f7ff ffc8 	bl	8009258 <__swhatbuf_r>
 80092c8:	9900      	ldr	r1, [sp, #0]
 80092ca:	4605      	mov	r5, r0
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7fd fa71 	bl	80067b4 <_malloc_r>
 80092d2:	b948      	cbnz	r0, 80092e8 <__smakebuf_r+0x44>
 80092d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d8:	059a      	lsls	r2, r3, #22
 80092da:	d4ef      	bmi.n	80092bc <__smakebuf_r+0x18>
 80092dc:	f023 0303 	bic.w	r3, r3, #3
 80092e0:	f043 0302 	orr.w	r3, r3, #2
 80092e4:	81a3      	strh	r3, [r4, #12]
 80092e6:	e7e3      	b.n	80092b0 <__smakebuf_r+0xc>
 80092e8:	4b0d      	ldr	r3, [pc, #52]	; (8009320 <__smakebuf_r+0x7c>)
 80092ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	6020      	str	r0, [r4, #0]
 80092f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f4:	81a3      	strh	r3, [r4, #12]
 80092f6:	9b00      	ldr	r3, [sp, #0]
 80092f8:	6163      	str	r3, [r4, #20]
 80092fa:	9b01      	ldr	r3, [sp, #4]
 80092fc:	6120      	str	r0, [r4, #16]
 80092fe:	b15b      	cbz	r3, 8009318 <__smakebuf_r+0x74>
 8009300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009304:	4630      	mov	r0, r6
 8009306:	f000 f879 	bl	80093fc <_isatty_r>
 800930a:	b128      	cbz	r0, 8009318 <__smakebuf_r+0x74>
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	f023 0303 	bic.w	r3, r3, #3
 8009312:	f043 0301 	orr.w	r3, r3, #1
 8009316:	81a3      	strh	r3, [r4, #12]
 8009318:	89a0      	ldrh	r0, [r4, #12]
 800931a:	4305      	orrs	r5, r0
 800931c:	81a5      	strh	r5, [r4, #12]
 800931e:	e7cd      	b.n	80092bc <__smakebuf_r+0x18>
 8009320:	08007f3d 	.word	0x08007f3d

08009324 <__ascii_mbtowc>:
 8009324:	b082      	sub	sp, #8
 8009326:	b901      	cbnz	r1, 800932a <__ascii_mbtowc+0x6>
 8009328:	a901      	add	r1, sp, #4
 800932a:	b142      	cbz	r2, 800933e <__ascii_mbtowc+0x1a>
 800932c:	b14b      	cbz	r3, 8009342 <__ascii_mbtowc+0x1e>
 800932e:	7813      	ldrb	r3, [r2, #0]
 8009330:	600b      	str	r3, [r1, #0]
 8009332:	7812      	ldrb	r2, [r2, #0]
 8009334:	1e10      	subs	r0, r2, #0
 8009336:	bf18      	it	ne
 8009338:	2001      	movne	r0, #1
 800933a:	b002      	add	sp, #8
 800933c:	4770      	bx	lr
 800933e:	4610      	mov	r0, r2
 8009340:	e7fb      	b.n	800933a <__ascii_mbtowc+0x16>
 8009342:	f06f 0001 	mvn.w	r0, #1
 8009346:	e7f8      	b.n	800933a <__ascii_mbtowc+0x16>

08009348 <memmove>:
 8009348:	4288      	cmp	r0, r1
 800934a:	b510      	push	{r4, lr}
 800934c:	eb01 0402 	add.w	r4, r1, r2
 8009350:	d902      	bls.n	8009358 <memmove+0x10>
 8009352:	4284      	cmp	r4, r0
 8009354:	4623      	mov	r3, r4
 8009356:	d807      	bhi.n	8009368 <memmove+0x20>
 8009358:	1e43      	subs	r3, r0, #1
 800935a:	42a1      	cmp	r1, r4
 800935c:	d008      	beq.n	8009370 <memmove+0x28>
 800935e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009366:	e7f8      	b.n	800935a <memmove+0x12>
 8009368:	4402      	add	r2, r0
 800936a:	4601      	mov	r1, r0
 800936c:	428a      	cmp	r2, r1
 800936e:	d100      	bne.n	8009372 <memmove+0x2a>
 8009370:	bd10      	pop	{r4, pc}
 8009372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800937a:	e7f7      	b.n	800936c <memmove+0x24>

0800937c <_malloc_usable_size_r>:
 800937c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009380:	1f18      	subs	r0, r3, #4
 8009382:	2b00      	cmp	r3, #0
 8009384:	bfbc      	itt	lt
 8009386:	580b      	ldrlt	r3, [r1, r0]
 8009388:	18c0      	addlt	r0, r0, r3
 800938a:	4770      	bx	lr

0800938c <_read_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4d07      	ldr	r5, [pc, #28]	; (80093ac <_read_r+0x20>)
 8009390:	4604      	mov	r4, r0
 8009392:	4608      	mov	r0, r1
 8009394:	4611      	mov	r1, r2
 8009396:	2200      	movs	r2, #0
 8009398:	602a      	str	r2, [r5, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	f000 f9e6 	bl	800976c <_read>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_read_r+0x1e>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_read_r+0x1e>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	20007590 	.word	0x20007590

080093b0 <__ascii_wctomb>:
 80093b0:	b149      	cbz	r1, 80093c6 <__ascii_wctomb+0x16>
 80093b2:	2aff      	cmp	r2, #255	; 0xff
 80093b4:	bf85      	ittet	hi
 80093b6:	238a      	movhi	r3, #138	; 0x8a
 80093b8:	6003      	strhi	r3, [r0, #0]
 80093ba:	700a      	strbls	r2, [r1, #0]
 80093bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80093c0:	bf98      	it	ls
 80093c2:	2001      	movls	r0, #1
 80093c4:	4770      	bx	lr
 80093c6:	4608      	mov	r0, r1
 80093c8:	4770      	bx	lr

080093ca <abort>:
 80093ca:	b508      	push	{r3, lr}
 80093cc:	2006      	movs	r0, #6
 80093ce:	f000 f84d 	bl	800946c <raise>
 80093d2:	2001      	movs	r0, #1
 80093d4:	f000 f9da 	bl	800978c <_exit>

080093d8 <_fstat_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d07      	ldr	r5, [pc, #28]	; (80093f8 <_fstat_r+0x20>)
 80093dc:	2300      	movs	r3, #0
 80093de:	4604      	mov	r4, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	4611      	mov	r1, r2
 80093e4:	602b      	str	r3, [r5, #0]
 80093e6:	f000 f999 	bl	800971c <_fstat>
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	d102      	bne.n	80093f4 <_fstat_r+0x1c>
 80093ee:	682b      	ldr	r3, [r5, #0]
 80093f0:	b103      	cbz	r3, 80093f4 <_fstat_r+0x1c>
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	bd38      	pop	{r3, r4, r5, pc}
 80093f6:	bf00      	nop
 80093f8:	20007590 	.word	0x20007590

080093fc <_isatty_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	4d06      	ldr	r5, [pc, #24]	; (8009418 <_isatty_r+0x1c>)
 8009400:	2300      	movs	r3, #0
 8009402:	4604      	mov	r4, r0
 8009404:	4608      	mov	r0, r1
 8009406:	602b      	str	r3, [r5, #0]
 8009408:	f000 f998 	bl	800973c <_isatty>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	d102      	bne.n	8009416 <_isatty_r+0x1a>
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	b103      	cbz	r3, 8009416 <_isatty_r+0x1a>
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	20007590 	.word	0x20007590

0800941c <_raise_r>:
 800941c:	291f      	cmp	r1, #31
 800941e:	b538      	push	{r3, r4, r5, lr}
 8009420:	4604      	mov	r4, r0
 8009422:	460d      	mov	r5, r1
 8009424:	d904      	bls.n	8009430 <_raise_r+0x14>
 8009426:	2316      	movs	r3, #22
 8009428:	6003      	str	r3, [r0, #0]
 800942a:	f04f 30ff 	mov.w	r0, #4294967295
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009432:	b112      	cbz	r2, 800943a <_raise_r+0x1e>
 8009434:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009438:	b94b      	cbnz	r3, 800944e <_raise_r+0x32>
 800943a:	4620      	mov	r0, r4
 800943c:	f000 f830 	bl	80094a0 <_getpid_r>
 8009440:	462a      	mov	r2, r5
 8009442:	4601      	mov	r1, r0
 8009444:	4620      	mov	r0, r4
 8009446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800944a:	f000 b817 	b.w	800947c <_kill_r>
 800944e:	2b01      	cmp	r3, #1
 8009450:	d00a      	beq.n	8009468 <_raise_r+0x4c>
 8009452:	1c59      	adds	r1, r3, #1
 8009454:	d103      	bne.n	800945e <_raise_r+0x42>
 8009456:	2316      	movs	r3, #22
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	2001      	movs	r0, #1
 800945c:	e7e7      	b.n	800942e <_raise_r+0x12>
 800945e:	2400      	movs	r4, #0
 8009460:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009464:	4628      	mov	r0, r5
 8009466:	4798      	blx	r3
 8009468:	2000      	movs	r0, #0
 800946a:	e7e0      	b.n	800942e <_raise_r+0x12>

0800946c <raise>:
 800946c:	4b02      	ldr	r3, [pc, #8]	; (8009478 <raise+0xc>)
 800946e:	4601      	mov	r1, r0
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	f7ff bfd3 	b.w	800941c <_raise_r>
 8009476:	bf00      	nop
 8009478:	20000950 	.word	0x20000950

0800947c <_kill_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4d07      	ldr	r5, [pc, #28]	; (800949c <_kill_r+0x20>)
 8009480:	2300      	movs	r3, #0
 8009482:	4604      	mov	r4, r0
 8009484:	4608      	mov	r0, r1
 8009486:	4611      	mov	r1, r2
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	f000 f95f 	bl	800974c <_kill>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d102      	bne.n	8009498 <_kill_r+0x1c>
 8009492:	682b      	ldr	r3, [r5, #0]
 8009494:	b103      	cbz	r3, 8009498 <_kill_r+0x1c>
 8009496:	6023      	str	r3, [r4, #0]
 8009498:	bd38      	pop	{r3, r4, r5, pc}
 800949a:	bf00      	nop
 800949c:	20007590 	.word	0x20007590

080094a0 <_getpid_r>:
 80094a0:	f000 b944 	b.w	800972c <_getpid>

080094a4 <expf>:
 80094a4:	b508      	push	{r3, lr}
 80094a6:	ed2d 8b02 	vpush	{d8}
 80094aa:	eef0 8a40 	vmov.f32	s17, s0
 80094ae:	f000 f82f 	bl	8009510 <__ieee754_expf>
 80094b2:	eeb0 8a40 	vmov.f32	s16, s0
 80094b6:	eeb0 0a68 	vmov.f32	s0, s17
 80094ba:	f000 f919 	bl	80096f0 <finitef>
 80094be:	b160      	cbz	r0, 80094da <expf+0x36>
 80094c0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009500 <expf+0x5c>
 80094c4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80094c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094cc:	dd0a      	ble.n	80094e4 <expf+0x40>
 80094ce:	f7fd f8bd 	bl	800664c <__errno>
 80094d2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8009504 <expf+0x60>
 80094d6:	2322      	movs	r3, #34	; 0x22
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	eeb0 0a48 	vmov.f32	s0, s16
 80094de:	ecbd 8b02 	vpop	{d8}
 80094e2:	bd08      	pop	{r3, pc}
 80094e4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009508 <expf+0x64>
 80094e8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80094ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f0:	d5f3      	bpl.n	80094da <expf+0x36>
 80094f2:	f7fd f8ab 	bl	800664c <__errno>
 80094f6:	2322      	movs	r3, #34	; 0x22
 80094f8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800950c <expf+0x68>
 80094fc:	6003      	str	r3, [r0, #0]
 80094fe:	e7ec      	b.n	80094da <expf+0x36>
 8009500:	42b17180 	.word	0x42b17180
 8009504:	7f800000 	.word	0x7f800000
 8009508:	c2cff1b5 	.word	0xc2cff1b5
 800950c:	00000000 	.word	0x00000000

08009510 <__ieee754_expf>:
 8009510:	ee10 2a10 	vmov	r2, s0
 8009514:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009518:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800951c:	d902      	bls.n	8009524 <__ieee754_expf+0x14>
 800951e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009522:	4770      	bx	lr
 8009524:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8009528:	d106      	bne.n	8009538 <__ieee754_expf+0x28>
 800952a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8009664 <__ieee754_expf+0x154>
 800952e:	2b00      	cmp	r3, #0
 8009530:	bf18      	it	ne
 8009532:	eeb0 0a67 	vmovne.f32	s0, s15
 8009536:	4770      	bx	lr
 8009538:	484b      	ldr	r0, [pc, #300]	; (8009668 <__ieee754_expf+0x158>)
 800953a:	4282      	cmp	r2, r0
 800953c:	dd02      	ble.n	8009544 <__ieee754_expf+0x34>
 800953e:	2000      	movs	r0, #0
 8009540:	f000 b8d0 	b.w	80096e4 <__math_oflowf>
 8009544:	2a00      	cmp	r2, #0
 8009546:	da05      	bge.n	8009554 <__ieee754_expf+0x44>
 8009548:	4a48      	ldr	r2, [pc, #288]	; (800966c <__ieee754_expf+0x15c>)
 800954a:	4291      	cmp	r1, r2
 800954c:	d902      	bls.n	8009554 <__ieee754_expf+0x44>
 800954e:	2000      	movs	r0, #0
 8009550:	f000 b8c2 	b.w	80096d8 <__math_uflowf>
 8009554:	4a46      	ldr	r2, [pc, #280]	; (8009670 <__ieee754_expf+0x160>)
 8009556:	4291      	cmp	r1, r2
 8009558:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800955c:	d952      	bls.n	8009604 <__ieee754_expf+0xf4>
 800955e:	4a45      	ldr	r2, [pc, #276]	; (8009674 <__ieee754_expf+0x164>)
 8009560:	4291      	cmp	r1, r2
 8009562:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009566:	d834      	bhi.n	80095d2 <__ieee754_expf+0xc2>
 8009568:	4943      	ldr	r1, [pc, #268]	; (8009678 <__ieee754_expf+0x168>)
 800956a:	4411      	add	r1, r2
 800956c:	ed91 7a00 	vldr	s14, [r1]
 8009570:	4942      	ldr	r1, [pc, #264]	; (800967c <__ieee754_expf+0x16c>)
 8009572:	440a      	add	r2, r1
 8009574:	edd2 7a00 	vldr	s15, [r2]
 8009578:	ee30 7a47 	vsub.f32	s14, s0, s14
 800957c:	f1c3 0201 	rsb	r2, r3, #1
 8009580:	1ad2      	subs	r2, r2, r3
 8009582:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009586:	ee20 6a00 	vmul.f32	s12, s0, s0
 800958a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009680 <__ieee754_expf+0x170>
 800958e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009684 <__ieee754_expf+0x174>
 8009592:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009596:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009688 <__ieee754_expf+0x178>
 800959a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800959e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800968c <__ieee754_expf+0x17c>
 80095a2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80095a6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009690 <__ieee754_expf+0x180>
 80095aa:	eea6 5a86 	vfma.f32	s10, s13, s12
 80095ae:	eef0 6a40 	vmov.f32	s13, s0
 80095b2:	eee5 6a46 	vfms.f32	s13, s10, s12
 80095b6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80095ba:	ee20 5a26 	vmul.f32	s10, s0, s13
 80095be:	bb92      	cbnz	r2, 8009626 <__ieee754_expf+0x116>
 80095c0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80095c4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80095c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80095cc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80095d0:	4770      	bx	lr
 80095d2:	4b30      	ldr	r3, [pc, #192]	; (8009694 <__ieee754_expf+0x184>)
 80095d4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009698 <__ieee754_expf+0x188>
 80095d8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800969c <__ieee754_expf+0x18c>
 80095dc:	4413      	add	r3, r2
 80095de:	edd3 7a00 	vldr	s15, [r3]
 80095e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80095e6:	eeb0 7a40 	vmov.f32	s14, s0
 80095ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095ee:	ee17 2a90 	vmov	r2, s15
 80095f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095f6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80095fa:	eddf 6a29 	vldr	s13, [pc, #164]	; 80096a0 <__ieee754_expf+0x190>
 80095fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009602:	e7be      	b.n	8009582 <__ieee754_expf+0x72>
 8009604:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8009608:	d20b      	bcs.n	8009622 <__ieee754_expf+0x112>
 800960a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80096a4 <__ieee754_expf+0x194>
 800960e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009612:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961a:	dd02      	ble.n	8009622 <__ieee754_expf+0x112>
 800961c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009620:	4770      	bx	lr
 8009622:	2200      	movs	r2, #0
 8009624:	e7af      	b.n	8009586 <__ieee754_expf+0x76>
 8009626:	ee76 6a66 	vsub.f32	s13, s12, s13
 800962a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800962e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8009632:	bfb8      	it	lt
 8009634:	3264      	addlt	r2, #100	; 0x64
 8009636:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800963a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800963e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8009642:	ee17 3a90 	vmov	r3, s15
 8009646:	bfab      	itete	ge
 8009648:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800964c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009650:	ee00 3a10 	vmovge	s0, r3
 8009654:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80096a8 <__ieee754_expf+0x198>
 8009658:	bfbc      	itt	lt
 800965a:	ee00 3a10 	vmovlt	s0, r3
 800965e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009662:	4770      	bx	lr
 8009664:	00000000 	.word	0x00000000
 8009668:	42b17217 	.word	0x42b17217
 800966c:	42cff1b5 	.word	0x42cff1b5
 8009670:	3eb17218 	.word	0x3eb17218
 8009674:	3f851591 	.word	0x3f851591
 8009678:	0803af7c 	.word	0x0803af7c
 800967c:	0803af84 	.word	0x0803af84
 8009680:	3331bb4c 	.word	0x3331bb4c
 8009684:	b5ddea0e 	.word	0xb5ddea0e
 8009688:	388ab355 	.word	0x388ab355
 800968c:	bb360b61 	.word	0xbb360b61
 8009690:	3e2aaaab 	.word	0x3e2aaaab
 8009694:	0803af74 	.word	0x0803af74
 8009698:	3fb8aa3b 	.word	0x3fb8aa3b
 800969c:	3f317180 	.word	0x3f317180
 80096a0:	3717f7d1 	.word	0x3717f7d1
 80096a4:	7149f2ca 	.word	0x7149f2ca
 80096a8:	0d800000 	.word	0x0d800000

080096ac <with_errnof>:
 80096ac:	b513      	push	{r0, r1, r4, lr}
 80096ae:	4604      	mov	r4, r0
 80096b0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80096b4:	f7fc ffca 	bl	800664c <__errno>
 80096b8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80096bc:	6004      	str	r4, [r0, #0]
 80096be:	b002      	add	sp, #8
 80096c0:	bd10      	pop	{r4, pc}

080096c2 <xflowf>:
 80096c2:	b130      	cbz	r0, 80096d2 <xflowf+0x10>
 80096c4:	eef1 7a40 	vneg.f32	s15, s0
 80096c8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80096cc:	2022      	movs	r0, #34	; 0x22
 80096ce:	f7ff bfed 	b.w	80096ac <with_errnof>
 80096d2:	eef0 7a40 	vmov.f32	s15, s0
 80096d6:	e7f7      	b.n	80096c8 <xflowf+0x6>

080096d8 <__math_uflowf>:
 80096d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80096e0 <__math_uflowf+0x8>
 80096dc:	f7ff bff1 	b.w	80096c2 <xflowf>
 80096e0:	10000000 	.word	0x10000000

080096e4 <__math_oflowf>:
 80096e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80096ec <__math_oflowf+0x8>
 80096e8:	f7ff bfeb 	b.w	80096c2 <xflowf>
 80096ec:	70000000 	.word	0x70000000

080096f0 <finitef>:
 80096f0:	b082      	sub	sp, #8
 80096f2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80096f6:	9801      	ldr	r0, [sp, #4]
 80096f8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80096fc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009700:	bfac      	ite	ge
 8009702:	2000      	movge	r0, #0
 8009704:	2001      	movlt	r0, #1
 8009706:	b002      	add	sp, #8
 8009708:	4770      	bx	lr
	...

0800970c <_close>:
 800970c:	4b02      	ldr	r3, [pc, #8]	; (8009718 <_close+0xc>)
 800970e:	2258      	movs	r2, #88	; 0x58
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	f04f 30ff 	mov.w	r0, #4294967295
 8009716:	4770      	bx	lr
 8009718:	20007590 	.word	0x20007590

0800971c <_fstat>:
 800971c:	4b02      	ldr	r3, [pc, #8]	; (8009728 <_fstat+0xc>)
 800971e:	2258      	movs	r2, #88	; 0x58
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	f04f 30ff 	mov.w	r0, #4294967295
 8009726:	4770      	bx	lr
 8009728:	20007590 	.word	0x20007590

0800972c <_getpid>:
 800972c:	4b02      	ldr	r3, [pc, #8]	; (8009738 <_getpid+0xc>)
 800972e:	2258      	movs	r2, #88	; 0x58
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	f04f 30ff 	mov.w	r0, #4294967295
 8009736:	4770      	bx	lr
 8009738:	20007590 	.word	0x20007590

0800973c <_isatty>:
 800973c:	4b02      	ldr	r3, [pc, #8]	; (8009748 <_isatty+0xc>)
 800973e:	2258      	movs	r2, #88	; 0x58
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	2000      	movs	r0, #0
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20007590 	.word	0x20007590

0800974c <_kill>:
 800974c:	4b02      	ldr	r3, [pc, #8]	; (8009758 <_kill+0xc>)
 800974e:	2258      	movs	r2, #88	; 0x58
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	f04f 30ff 	mov.w	r0, #4294967295
 8009756:	4770      	bx	lr
 8009758:	20007590 	.word	0x20007590

0800975c <_lseek>:
 800975c:	4b02      	ldr	r3, [pc, #8]	; (8009768 <_lseek+0xc>)
 800975e:	2258      	movs	r2, #88	; 0x58
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	f04f 30ff 	mov.w	r0, #4294967295
 8009766:	4770      	bx	lr
 8009768:	20007590 	.word	0x20007590

0800976c <_read>:
 800976c:	4b02      	ldr	r3, [pc, #8]	; (8009778 <_read+0xc>)
 800976e:	2258      	movs	r2, #88	; 0x58
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	f04f 30ff 	mov.w	r0, #4294967295
 8009776:	4770      	bx	lr
 8009778:	20007590 	.word	0x20007590

0800977c <_write>:
 800977c:	4b02      	ldr	r3, [pc, #8]	; (8009788 <_write+0xc>)
 800977e:	2258      	movs	r2, #88	; 0x58
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	f04f 30ff 	mov.w	r0, #4294967295
 8009786:	4770      	bx	lr
 8009788:	20007590 	.word	0x20007590

0800978c <_exit>:
 800978c:	e7fe      	b.n	800978c <_exit>
	...

08009790 <_init>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	bf00      	nop
 8009794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009796:	bc08      	pop	{r3}
 8009798:	469e      	mov	lr, r3
 800979a:	4770      	bx	lr

0800979c <_fini>:
 800979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979e:	bf00      	nop
 80097a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a2:	bc08      	pop	{r3}
 80097a4:	469e      	mov	lr, r3
 80097a6:	4770      	bx	lr
